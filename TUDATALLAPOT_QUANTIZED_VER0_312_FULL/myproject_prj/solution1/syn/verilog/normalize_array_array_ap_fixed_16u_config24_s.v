// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalize_array_array_ap_fixed_16u_config24_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [13:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [13:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [13:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [13:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [13:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [13:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [13:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [13:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [13:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [13:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [13:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [13:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [13:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [13:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [13:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [13:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [13:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [13:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [13:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [13:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [13:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [13:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [13:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [13:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [13:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [13:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [13:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [13:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [13:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [13:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [13:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [13:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;
output   start_out;
output   start_write;

reg ap_done;
reg ap_idle;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    internal_ap_ready;
wire    io_acc_block_signal_op5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    io_acc_block_signal_op170;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg    data_V_data_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg  signed [13:0] tmp_data_V_58_0_reg_2089;
reg  signed [13:0] tmp_data_V_58_1_reg_2094;
reg  signed [13:0] tmp_data_V_58_2_reg_2099;
reg  signed [13:0] tmp_data_V_58_3_reg_2104;
reg  signed [13:0] tmp_data_V_58_4_reg_2109;
reg  signed [13:0] tmp_data_V_58_5_reg_2114;
reg  signed [13:0] tmp_data_V_58_6_reg_2119;
reg  signed [13:0] tmp_data_V_58_7_reg_2124;
reg  signed [13:0] tmp_data_V_58_8_reg_2129;
reg  signed [13:0] tmp_data_V_58_9_reg_2134;
reg  signed [13:0] tmp_data_V_58_10_reg_2139;
reg  signed [13:0] tmp_data_V_58_11_reg_2144;
reg  signed [13:0] tmp_data_V_58_12_reg_2149;
reg  signed [13:0] tmp_data_V_58_13_reg_2154;
reg  signed [13:0] tmp_data_V_58_14_reg_2159;
reg  signed [13:0] tmp_data_V_58_15_reg_2164;
reg   [13:0] tmp_8_reg_2249;
reg   [13:0] tmp_9_reg_2254;
reg   [13:0] tmp_s_reg_2259;
reg   [13:0] tmp_1_reg_2264;
reg   [13:0] tmp_2_reg_2269;
reg   [13:0] tmp_3_reg_2274;
reg   [13:0] tmp_4_reg_2279;
reg   [13:0] tmp_5_reg_2284;
reg   [13:0] tmp_6_reg_2289;
reg   [13:0] tmp_7_reg_2294;
reg   [13:0] tmp_10_reg_2299;
reg   [13:0] tmp_11_reg_2304;
reg   [13:0] tmp_12_reg_2309;
reg   [13:0] tmp_13_reg_2314;
reg   [13:0] tmp_14_reg_2319;
reg   [13:0] tmp_15_reg_2324;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [13:0] grp_fu_264_p1;
wire   [11:0] grp_fu_265_p1;
wire   [14:0] grp_fu_266_p1;
wire   [13:0] grp_fu_267_p1;
wire   [13:0] grp_fu_268_p1;
wire   [13:0] grp_fu_269_p1;
wire   [13:0] grp_fu_270_p1;
wire   [13:0] grp_fu_271_p1;
wire   [13:0] grp_fu_272_p1;
wire   [13:0] grp_fu_273_p1;
wire   [12:0] grp_fu_274_p1;
wire   [13:0] grp_fu_275_p1;
wire   [13:0] grp_fu_276_p1;
wire   [12:0] grp_fu_277_p1;
wire   [12:0] grp_fu_278_p1;
wire   [14:0] grp_fu_279_p1;
wire   [23:0] grp_fu_265_p2;
wire   [23:0] grp_fu_269_p2;
wire   [23:0] grp_fu_279_p2;
wire   [23:0] grp_fu_272_p2;
wire   [23:0] grp_fu_267_p2;
wire   [23:0] grp_fu_268_p2;
wire   [23:0] grp_fu_270_p2;
wire   [23:0] grp_fu_276_p2;
wire   [23:0] grp_fu_273_p2;
wire   [23:0] grp_fu_266_p2;
wire   [23:0] grp_fu_274_p2;
wire   [23:0] grp_fu_271_p2;
wire   [23:0] grp_fu_275_p2;
wire   [23:0] grp_fu_277_p2;
wire   [23:0] grp_fu_278_p2;
wire   [23:0] grp_fu_264_p2;
wire   [15:0] shl_ln_fu_1705_p3;
wire   [15:0] add_ln1192_fu_1712_p2;
wire   [15:0] shl_ln728_s_fu_1729_p3;
wire   [15:0] add_ln1192_5_fu_1736_p2;
wire   [15:0] shl_ln728_4_fu_1753_p3;
wire   [15:0] add_ln1192_6_fu_1760_p2;
wire   [15:0] shl_ln728_5_fu_1777_p3;
wire   [15:0] add_ln1192_7_fu_1784_p2;
wire   [15:0] shl_ln728_6_fu_1801_p3;
wire   [15:0] add_ln1192_8_fu_1808_p2;
wire   [15:0] shl_ln728_7_fu_1825_p3;
wire   [15:0] add_ln1192_9_fu_1832_p2;
wire   [15:0] shl_ln728_8_fu_1849_p3;
wire   [15:0] add_ln1192_10_fu_1856_p2;
wire   [15:0] shl_ln728_9_fu_1873_p3;
wire   [15:0] add_ln1192_11_fu_1880_p2;
wire   [15:0] shl_ln728_1_fu_1897_p3;
wire   [15:0] add_ln1192_12_fu_1904_p2;
wire   [15:0] shl_ln728_2_fu_1921_p3;
wire   [15:0] add_ln1192_13_fu_1928_p2;
wire   [15:0] shl_ln728_3_fu_1945_p3;
wire   [15:0] add_ln1192_14_fu_1952_p2;
wire   [15:0] shl_ln728_10_fu_1969_p3;
wire   [15:0] add_ln1192_15_fu_1976_p2;
wire   [15:0] shl_ln728_11_fu_1993_p3;
wire   [15:0] add_ln1192_16_fu_2000_p2;
wire   [15:0] shl_ln728_12_fu_2017_p3;
wire   [15:0] add_ln1192_17_fu_2024_p2;
wire   [15:0] shl_ln728_13_fu_2041_p3;
wire   [15:0] add_ln1192_18_fu_2048_p2;
wire   [15:0] shl_ln728_14_fu_2065_p3;
wire   [15:0] add_ln1192_19_fu_2072_p2;
reg    grp_fu_264_ce;
reg    grp_fu_265_ce;
reg    grp_fu_266_ce;
reg    grp_fu_267_ce;
reg    grp_fu_268_ce;
reg    grp_fu_269_ce;
reg    grp_fu_270_ce;
reg    grp_fu_271_ce;
reg    grp_fu_272_ce;
reg    grp_fu_273_ce;
reg    grp_fu_274_ce;
reg    grp_fu_275_ce;
reg    grp_fu_276_ce;
reg    grp_fu_277_ce;
reg    grp_fu_278_ce;
reg    grp_fu_279_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2182(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_15_reg_2164),
    .din1(grp_fu_264_p1),
    .ce(grp_fu_264_ce),
    .dout(grp_fu_264_p2)
);

myproject_axi_mul_14s_12ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_12ns_24_2_1_U2183(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_0_reg_2089),
    .din1(grp_fu_265_p1),
    .ce(grp_fu_265_ce),
    .dout(grp_fu_265_p2)
);

myproject_axi_mul_14s_15ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_15ns_24_2_1_U2184(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_9_reg_2134),
    .din1(grp_fu_266_p1),
    .ce(grp_fu_266_ce),
    .dout(grp_fu_266_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2185(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_4_reg_2109),
    .din1(grp_fu_267_p1),
    .ce(grp_fu_267_ce),
    .dout(grp_fu_267_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2186(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_5_reg_2114),
    .din1(grp_fu_268_p1),
    .ce(grp_fu_268_ce),
    .dout(grp_fu_268_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2187(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_1_reg_2094),
    .din1(grp_fu_269_p1),
    .ce(grp_fu_269_ce),
    .dout(grp_fu_269_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2188(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_6_reg_2119),
    .din1(grp_fu_270_p1),
    .ce(grp_fu_270_ce),
    .dout(grp_fu_270_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2189(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_11_reg_2144),
    .din1(grp_fu_271_p1),
    .ce(grp_fu_271_ce),
    .dout(grp_fu_271_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2190(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_3_reg_2104),
    .din1(grp_fu_272_p1),
    .ce(grp_fu_272_ce),
    .dout(grp_fu_272_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2191(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_8_reg_2129),
    .din1(grp_fu_273_p1),
    .ce(grp_fu_273_ce),
    .dout(grp_fu_273_p2)
);

myproject_axi_mul_14s_13ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_13ns_24_2_1_U2192(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_10_reg_2139),
    .din1(grp_fu_274_p1),
    .ce(grp_fu_274_ce),
    .dout(grp_fu_274_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2193(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_12_reg_2149),
    .din1(grp_fu_275_p1),
    .ce(grp_fu_275_ce),
    .dout(grp_fu_275_p2)
);

myproject_axi_mul_14s_14ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_14ns_24_2_1_U2194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_7_reg_2124),
    .din1(grp_fu_276_p1),
    .ce(grp_fu_276_ce),
    .dout(grp_fu_276_p2)
);

myproject_axi_mul_14s_13ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_13ns_24_2_1_U2195(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_13_reg_2154),
    .din1(grp_fu_277_p1),
    .ce(grp_fu_277_ce),
    .dout(grp_fu_277_p2)
);

myproject_axi_mul_14s_13ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_13ns_24_2_1_U2196(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_14_reg_2159),
    .din1(grp_fu_278_p1),
    .ce(grp_fu_278_ce),
    .dout(grp_fu_278_p2)
);

myproject_axi_mul_14s_15ns_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_14s_15ns_24_2_1_U2197(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_58_2_reg_2099),
    .din1(grp_fu_279_p1),
    .ce(grp_fu_279_ce),
    .dout(grp_fu_279_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_10_reg_2299 <= {{grp_fu_274_p2[23:10]}};
        tmp_11_reg_2304 <= {{grp_fu_271_p2[23:10]}};
        tmp_12_reg_2309 <= {{grp_fu_275_p2[23:10]}};
        tmp_13_reg_2314 <= {{grp_fu_277_p2[23:10]}};
        tmp_14_reg_2319 <= {{grp_fu_278_p2[23:10]}};
        tmp_15_reg_2324 <= {{grp_fu_264_p2[23:10]}};
        tmp_1_reg_2264 <= {{grp_fu_272_p2[23:10]}};
        tmp_2_reg_2269 <= {{grp_fu_267_p2[23:10]}};
        tmp_3_reg_2274 <= {{grp_fu_268_p2[23:10]}};
        tmp_4_reg_2279 <= {{grp_fu_270_p2[23:10]}};
        tmp_5_reg_2284 <= {{grp_fu_276_p2[23:10]}};
        tmp_6_reg_2289 <= {{grp_fu_273_p2[23:10]}};
        tmp_7_reg_2294 <= {{grp_fu_266_p2[23:10]}};
        tmp_8_reg_2249 <= {{grp_fu_265_p2[23:10]}};
        tmp_9_reg_2254 <= {{grp_fu_269_p2[23:10]}};
        tmp_s_reg_2259 <= {{grp_fu_279_p2[23:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_58_0_reg_2089 <= data_V_data_0_V_dout;
        tmp_data_V_58_10_reg_2139 <= data_V_data_10_V_dout;
        tmp_data_V_58_11_reg_2144 <= data_V_data_11_V_dout;
        tmp_data_V_58_12_reg_2149 <= data_V_data_12_V_dout;
        tmp_data_V_58_13_reg_2154 <= data_V_data_13_V_dout;
        tmp_data_V_58_14_reg_2159 <= data_V_data_14_V_dout;
        tmp_data_V_58_15_reg_2164 <= data_V_data_15_V_dout;
        tmp_data_V_58_1_reg_2094 <= data_V_data_1_V_dout;
        tmp_data_V_58_2_reg_2099 <= data_V_data_2_V_dout;
        tmp_data_V_58_3_reg_2104 <= data_V_data_3_V_dout;
        tmp_data_V_58_4_reg_2109 <= data_V_data_4_V_dout;
        tmp_data_V_58_5_reg_2114 <= data_V_data_5_V_dout;
        tmp_data_V_58_6_reg_2119 <= data_V_data_6_V_dout;
        tmp_data_V_58_7_reg_2124 <= data_V_data_7_V_dout;
        tmp_data_V_58_8_reg_2129 <= data_V_data_8_V_dout;
        tmp_data_V_58_9_reg_2134 <= data_V_data_9_V_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_264_ce = 1'b1;
    end else begin
        grp_fu_264_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_265_ce = 1'b1;
    end else begin
        grp_fu_265_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_266_ce = 1'b1;
    end else begin
        grp_fu_266_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_267_ce = 1'b1;
    end else begin
        grp_fu_267_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_268_ce = 1'b1;
    end else begin
        grp_fu_268_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_269_ce = 1'b1;
    end else begin
        grp_fu_269_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_270_ce = 1'b1;
    end else begin
        grp_fu_270_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_271_ce = 1'b1;
    end else begin
        grp_fu_271_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_272_ce = 1'b1;
    end else begin
        grp_fu_272_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_273_ce = 1'b1;
    end else begin
        grp_fu_273_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_274_ce = 1'b1;
    end else begin
        grp_fu_274_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_275_ce = 1'b1;
    end else begin
        grp_fu_275_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_276_ce = 1'b1;
    end else begin
        grp_fu_276_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_277_ce = 1'b1;
    end else begin
        grp_fu_277_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_278_ce = 1'b1;
    end else begin
        grp_fu_278_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_279_ce = 1'b1;
    end else begin
        grp_fu_279_ce = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_10_fu_1856_p2 = (shl_ln728_8_fu_1849_p3 + 16'd1564);

assign add_ln1192_11_fu_1880_p2 = (shl_ln728_9_fu_1873_p3 + 16'd128);

assign add_ln1192_12_fu_1904_p2 = ($signed(shl_ln728_1_fu_1897_p3) + $signed(16'd62376));

assign add_ln1192_13_fu_1928_p2 = (shl_ln728_2_fu_1921_p3 + 16'd1420);

assign add_ln1192_14_fu_1952_p2 = (shl_ln728_3_fu_1945_p3 + 16'd1764);

assign add_ln1192_15_fu_1976_p2 = (shl_ln728_10_fu_1969_p3 + 16'd1508);

assign add_ln1192_16_fu_2000_p2 = ($signed(shl_ln728_11_fu_1993_p3) + $signed(16'd65436));

assign add_ln1192_17_fu_2024_p2 = ($signed(shl_ln728_12_fu_2017_p3) + $signed(16'd65108));

assign add_ln1192_18_fu_2048_p2 = (shl_ln728_13_fu_2041_p3 + 16'd2392);

assign add_ln1192_19_fu_2072_p2 = (shl_ln728_14_fu_2065_p3 + 16'd160);

assign add_ln1192_5_fu_1736_p2 = ($signed(shl_ln728_s_fu_1729_p3) + $signed(16'd63264));

assign add_ln1192_6_fu_1760_p2 = ($signed(shl_ln728_4_fu_1753_p3) + $signed(16'd64576));

assign add_ln1192_7_fu_1784_p2 = ($signed(shl_ln728_5_fu_1777_p3) + $signed(16'd63852));

assign add_ln1192_8_fu_1808_p2 = ($signed(shl_ln728_6_fu_1801_p3) + $signed(16'd65220));

assign add_ln1192_9_fu_1832_p2 = (shl_ln728_7_fu_1825_p3 + 16'd1804);

assign add_ln1192_fu_1712_p2 = ($signed(shl_ln_fu_1705_p3) + $signed(16'd65332));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op5 == 1'b0) | (ap_done_reg == 1'b1))) | ((io_acc_block_signal_op170 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op5 == 1'b0) | (ap_done_reg == 1'b1))) | ((io_acc_block_signal_op170 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op5 == 1'b0) | (ap_done_reg == 1'b1))) | ((io_acc_block_signal_op170 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (io_acc_block_signal_op5 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (io_acc_block_signal_op170 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign grp_fu_264_p1 = 24'd4404;

assign grp_fu_265_p1 = 24'd1852;

assign grp_fu_266_p1 = 24'd10161;

assign grp_fu_267_p1 = 24'd4366;

assign grp_fu_268_p1 = 24'd4206;

assign grp_fu_269_p1 = 24'd5704;

assign grp_fu_270_p1 = 24'd4660;

assign grp_fu_271_p1 = 24'd5555;

assign grp_fu_272_p1 = 24'd5044;

assign grp_fu_273_p1 = 24'd5325;

assign grp_fu_274_p1 = 24'd3483;

assign grp_fu_275_p1 = 24'd4188;

assign grp_fu_276_p1 = 24'd7329;

assign grp_fu_277_p1 = 24'd3383;

assign grp_fu_278_p1 = 24'd2860;

assign grp_fu_279_p1 = 24'd8933;

assign io_acc_block_signal_op170 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op5 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = {{add_ln1192_fu_1712_p2[15:2]}};

assign res_V_data_10_V_din = {{add_ln1192_14_fu_1952_p2[15:2]}};

assign res_V_data_11_V_din = {{add_ln1192_15_fu_1976_p2[15:2]}};

assign res_V_data_12_V_din = {{add_ln1192_16_fu_2000_p2[15:2]}};

assign res_V_data_13_V_din = {{add_ln1192_17_fu_2024_p2[15:2]}};

assign res_V_data_14_V_din = {{add_ln1192_18_fu_2048_p2[15:2]}};

assign res_V_data_15_V_din = {{add_ln1192_19_fu_2072_p2[15:2]}};

assign res_V_data_1_V_din = {{add_ln1192_5_fu_1736_p2[15:2]}};

assign res_V_data_2_V_din = {{add_ln1192_6_fu_1760_p2[15:2]}};

assign res_V_data_3_V_din = {{add_ln1192_7_fu_1784_p2[15:2]}};

assign res_V_data_4_V_din = {{add_ln1192_8_fu_1808_p2[15:2]}};

assign res_V_data_5_V_din = {{add_ln1192_9_fu_1832_p2[15:2]}};

assign res_V_data_6_V_din = {{add_ln1192_10_fu_1856_p2[15:2]}};

assign res_V_data_7_V_din = {{add_ln1192_11_fu_1880_p2[15:2]}};

assign res_V_data_8_V_din = {{add_ln1192_12_fu_1904_p2[15:2]}};

assign res_V_data_9_V_din = {{add_ln1192_13_fu_1928_p2[15:2]}};

assign shl_ln728_10_fu_1969_p3 = {{tmp_11_reg_2304}, {2'd0}};

assign shl_ln728_11_fu_1993_p3 = {{tmp_12_reg_2309}, {2'd0}};

assign shl_ln728_12_fu_2017_p3 = {{tmp_13_reg_2314}, {2'd0}};

assign shl_ln728_13_fu_2041_p3 = {{tmp_14_reg_2319}, {2'd0}};

assign shl_ln728_14_fu_2065_p3 = {{tmp_15_reg_2324}, {2'd0}};

assign shl_ln728_1_fu_1897_p3 = {{tmp_6_reg_2289}, {2'd0}};

assign shl_ln728_2_fu_1921_p3 = {{tmp_7_reg_2294}, {2'd0}};

assign shl_ln728_3_fu_1945_p3 = {{tmp_10_reg_2299}, {2'd0}};

assign shl_ln728_4_fu_1753_p3 = {{tmp_s_reg_2259}, {2'd0}};

assign shl_ln728_5_fu_1777_p3 = {{tmp_1_reg_2264}, {2'd0}};

assign shl_ln728_6_fu_1801_p3 = {{tmp_2_reg_2269}, {2'd0}};

assign shl_ln728_7_fu_1825_p3 = {{tmp_3_reg_2274}, {2'd0}};

assign shl_ln728_8_fu_1849_p3 = {{tmp_4_reg_2279}, {2'd0}};

assign shl_ln728_9_fu_1873_p3 = {{tmp_5_reg_2284}, {2'd0}};

assign shl_ln728_s_fu_1729_p3 = {{tmp_9_reg_2254}, {2'd0}};

assign shl_ln_fu_1705_p3 = {{tmp_8_reg_2249}, {2'd0}};

assign start_out = real_start;

endmodule //normalize_array_array_ap_fixed_16u_config24_s
