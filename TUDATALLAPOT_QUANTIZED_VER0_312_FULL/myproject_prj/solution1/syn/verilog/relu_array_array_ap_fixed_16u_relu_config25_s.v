// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_fixed_16u_relu_config25_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [13:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [13:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [13:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [13:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [13:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [13:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [13:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [13:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [13:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [13:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [13:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [13:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [13:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [13:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [13:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [13:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [5:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [5:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [5:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [5:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [5:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [5:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [5:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [5:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [5:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [5:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [5:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [5:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;
output   start_out;
output   start_write;

reg ap_done;
reg ap_idle;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    internal_ap_ready;
wire    io_acc_block_signal_op4;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    io_acc_block_signal_op408;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    data_V_data_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [13:0] tmp_data_V_42_0_reg_2580;
reg   [13:0] tmp_data_V_42_1_reg_2586;
reg   [13:0] tmp_data_V_42_2_reg_2592;
reg   [13:0] tmp_data_V_42_3_reg_2598;
reg   [13:0] tmp_data_V_42_4_reg_2604;
reg   [13:0] tmp_data_V_42_5_reg_2610;
reg   [13:0] tmp_data_V_42_6_reg_2616;
reg   [13:0] tmp_data_V_42_7_reg_2622;
reg   [13:0] tmp_data_V_42_8_reg_2628;
reg   [13:0] tmp_data_V_42_9_reg_2634;
reg   [13:0] tmp_data_V_42_10_reg_2640;
reg   [13:0] tmp_data_V_42_11_reg_2646;
reg   [13:0] tmp_data_V_42_12_reg_2652;
reg   [13:0] tmp_data_V_42_13_reg_2658;
reg   [13:0] tmp_data_V_42_14_reg_2664;
reg   [13:0] tmp_data_V_42_15_reg_2670;
reg   [5:0] trunc_ln_reg_2676;
reg   [0:0] tmp_58_reg_2681;
reg   [4:0] trunc_ln415_s_reg_2687;
wire   [0:0] icmp_ln879_fu_314_p2;
reg   [0:0] icmp_ln879_reg_2692;
wire   [0:0] icmp_ln768_fu_320_p2;
reg   [0:0] icmp_ln768_reg_2697;
reg   [5:0] trunc_ln708_s_reg_2702;
reg   [0:0] tmp_62_reg_2707;
reg   [4:0] trunc_ln415_10_reg_2713;
wire   [0:0] icmp_ln879_12_fu_364_p2;
reg   [0:0] icmp_ln879_12_reg_2718;
wire   [0:0] icmp_ln768_12_fu_370_p2;
reg   [0:0] icmp_ln768_12_reg_2723;
reg   [5:0] trunc_ln708_20_reg_2728;
reg   [0:0] tmp_66_reg_2733;
reg   [4:0] trunc_ln415_11_reg_2739;
wire   [0:0] icmp_ln879_13_fu_414_p2;
reg   [0:0] icmp_ln879_13_reg_2744;
wire   [0:0] icmp_ln768_13_fu_420_p2;
reg   [0:0] icmp_ln768_13_reg_2749;
reg   [5:0] trunc_ln708_21_reg_2754;
reg   [0:0] tmp_70_reg_2759;
reg   [4:0] trunc_ln415_12_reg_2765;
wire   [0:0] icmp_ln879_14_fu_464_p2;
reg   [0:0] icmp_ln879_14_reg_2770;
wire   [0:0] icmp_ln768_14_fu_470_p2;
reg   [0:0] icmp_ln768_14_reg_2775;
reg   [5:0] trunc_ln708_22_reg_2780;
reg   [0:0] tmp_74_reg_2785;
reg   [4:0] trunc_ln415_13_reg_2791;
wire   [0:0] icmp_ln879_15_fu_514_p2;
reg   [0:0] icmp_ln879_15_reg_2796;
wire   [0:0] icmp_ln768_15_fu_520_p2;
reg   [0:0] icmp_ln768_15_reg_2801;
reg   [5:0] trunc_ln708_23_reg_2806;
reg   [0:0] tmp_78_reg_2811;
reg   [4:0] trunc_ln415_14_reg_2817;
wire   [0:0] icmp_ln879_16_fu_564_p2;
reg   [0:0] icmp_ln879_16_reg_2822;
wire   [0:0] icmp_ln768_16_fu_570_p2;
reg   [0:0] icmp_ln768_16_reg_2827;
reg   [5:0] trunc_ln708_24_reg_2832;
reg   [0:0] tmp_82_reg_2837;
reg   [4:0] trunc_ln415_15_reg_2843;
wire   [0:0] icmp_ln879_17_fu_614_p2;
reg   [0:0] icmp_ln879_17_reg_2848;
wire   [0:0] icmp_ln768_17_fu_620_p2;
reg   [0:0] icmp_ln768_17_reg_2853;
reg   [5:0] trunc_ln708_25_reg_2858;
reg   [0:0] tmp_86_reg_2863;
reg   [4:0] trunc_ln415_16_reg_2869;
wire   [0:0] icmp_ln879_18_fu_664_p2;
reg   [0:0] icmp_ln879_18_reg_2874;
wire   [0:0] icmp_ln768_18_fu_670_p2;
reg   [0:0] icmp_ln768_18_reg_2879;
reg   [5:0] trunc_ln708_26_reg_2884;
reg   [0:0] tmp_90_reg_2889;
reg   [4:0] trunc_ln415_17_reg_2895;
wire   [0:0] icmp_ln879_19_fu_714_p2;
reg   [0:0] icmp_ln879_19_reg_2900;
wire   [0:0] icmp_ln768_19_fu_720_p2;
reg   [0:0] icmp_ln768_19_reg_2905;
reg   [5:0] trunc_ln708_27_reg_2910;
reg   [0:0] tmp_94_reg_2915;
reg   [4:0] trunc_ln415_18_reg_2921;
wire   [0:0] icmp_ln879_20_fu_764_p2;
reg   [0:0] icmp_ln879_20_reg_2926;
wire   [0:0] icmp_ln768_20_fu_770_p2;
reg   [0:0] icmp_ln768_20_reg_2931;
reg   [5:0] trunc_ln708_28_reg_2936;
reg   [0:0] tmp_98_reg_2941;
reg   [4:0] trunc_ln415_19_reg_2947;
wire   [0:0] icmp_ln879_21_fu_814_p2;
reg   [0:0] icmp_ln879_21_reg_2952;
wire   [0:0] icmp_ln768_21_fu_820_p2;
reg   [0:0] icmp_ln768_21_reg_2957;
reg   [5:0] trunc_ln708_29_reg_2962;
reg   [0:0] tmp_102_reg_2967;
reg   [4:0] trunc_ln415_20_reg_2973;
wire   [0:0] icmp_ln879_22_fu_864_p2;
reg   [0:0] icmp_ln879_22_reg_2978;
wire   [0:0] icmp_ln768_22_fu_870_p2;
reg   [0:0] icmp_ln768_22_reg_2983;
reg   [5:0] trunc_ln708_30_reg_2988;
reg   [0:0] tmp_106_reg_2993;
reg   [4:0] trunc_ln415_21_reg_2999;
wire   [0:0] icmp_ln879_23_fu_914_p2;
reg   [0:0] icmp_ln879_23_reg_3004;
wire   [0:0] icmp_ln768_23_fu_920_p2;
reg   [0:0] icmp_ln768_23_reg_3009;
reg   [5:0] trunc_ln708_31_reg_3014;
reg   [0:0] tmp_110_reg_3019;
reg   [4:0] trunc_ln415_22_reg_3025;
wire   [0:0] icmp_ln879_24_fu_964_p2;
reg   [0:0] icmp_ln879_24_reg_3030;
wire   [0:0] icmp_ln768_24_fu_970_p2;
reg   [0:0] icmp_ln768_24_reg_3035;
reg   [5:0] trunc_ln708_32_reg_3040;
reg   [0:0] tmp_114_reg_3045;
reg   [4:0] trunc_ln415_23_reg_3051;
wire   [0:0] icmp_ln879_25_fu_1014_p2;
reg   [0:0] icmp_ln879_25_reg_3056;
wire   [0:0] icmp_ln768_25_fu_1020_p2;
reg   [0:0] icmp_ln768_25_reg_3061;
reg   [5:0] trunc_ln708_33_reg_3066;
reg   [0:0] tmp_118_reg_3071;
reg   [4:0] trunc_ln415_24_reg_3077;
wire   [0:0] icmp_ln879_26_fu_1064_p2;
reg   [0:0] icmp_ln879_26_reg_3082;
wire   [0:0] icmp_ln768_26_fu_1070_p2;
reg   [0:0] icmp_ln768_26_reg_3087;
wire   [4:0] tmp_data_0_V_fu_2388_p3;
reg   [4:0] tmp_data_0_V_reg_3092;
wire   [4:0] tmp_data_1_V_fu_2396_p3;
reg   [4:0] tmp_data_1_V_reg_3097;
wire   [4:0] tmp_data_2_V_fu_2404_p3;
reg   [4:0] tmp_data_2_V_reg_3102;
wire   [4:0] tmp_data_3_V_fu_2412_p3;
reg   [4:0] tmp_data_3_V_reg_3107;
wire   [4:0] tmp_data_4_V_fu_2420_p3;
reg   [4:0] tmp_data_4_V_reg_3112;
wire   [4:0] tmp_data_5_V_fu_2428_p3;
reg   [4:0] tmp_data_5_V_reg_3117;
wire   [4:0] tmp_data_6_V_fu_2436_p3;
reg   [4:0] tmp_data_6_V_reg_3122;
wire   [4:0] tmp_data_7_V_fu_2444_p3;
reg   [4:0] tmp_data_7_V_reg_3127;
wire   [4:0] tmp_data_8_V_fu_2452_p3;
reg   [4:0] tmp_data_8_V_reg_3132;
wire   [4:0] tmp_data_9_V_fu_2460_p3;
reg   [4:0] tmp_data_9_V_reg_3137;
wire   [4:0] tmp_data_10_V_fu_2468_p3;
reg   [4:0] tmp_data_10_V_reg_3142;
wire   [4:0] tmp_data_11_V_fu_2476_p3;
reg   [4:0] tmp_data_11_V_reg_3147;
wire   [4:0] tmp_data_12_V_fu_2484_p3;
reg   [4:0] tmp_data_12_V_reg_3152;
wire   [4:0] tmp_data_13_V_fu_2492_p3;
reg   [4:0] tmp_data_13_V_reg_3157;
wire   [4:0] tmp_data_14_V_fu_2500_p3;
reg   [4:0] tmp_data_14_V_reg_3162;
wire   [4:0] tmp_data_15_V_fu_2508_p3;
reg   [4:0] tmp_data_15_V_reg_3167;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] p_Result_s_fu_304_p4;
wire   [4:0] p_Result_15_1_fu_354_p4;
wire   [4:0] p_Result_15_2_fu_404_p4;
wire   [4:0] p_Result_15_3_fu_454_p4;
wire   [4:0] p_Result_15_4_fu_504_p4;
wire   [4:0] p_Result_15_5_fu_554_p4;
wire   [4:0] p_Result_15_6_fu_604_p4;
wire   [4:0] p_Result_15_7_fu_654_p4;
wire   [4:0] p_Result_15_8_fu_704_p4;
wire   [4:0] p_Result_15_9_fu_754_p4;
wire   [4:0] p_Result_15_s_fu_804_p4;
wire   [4:0] p_Result_15_10_fu_854_p4;
wire   [4:0] p_Result_15_11_fu_904_p4;
wire   [4:0] p_Result_15_12_fu_954_p4;
wire   [4:0] p_Result_15_13_fu_1004_p4;
wire   [4:0] p_Result_15_14_fu_1054_p4;
wire   [5:0] zext_ln415_fu_1088_p1;
wire   [4:0] zext_ln415_27_fu_1091_p1;
wire   [5:0] add_ln415_fu_1094_p2;
wire   [0:0] tmp_59_fu_1104_p3;
wire   [0:0] tmp_57_fu_1081_p3;
wire   [0:0] xor_ln416_fu_1112_p2;
wire   [0:0] and_ln416_fu_1118_p2;
wire   [0:0] select_ln777_fu_1132_p3;
wire   [0:0] tmp_60_fu_1124_p3;
wire   [0:0] xor_ln785_fu_1138_p2;
wire   [0:0] or_ln340_fu_1144_p2;
wire   [4:0] add_ln416_fu_1099_p2;
wire   [5:0] zext_ln415_12_fu_1170_p1;
wire   [4:0] zext_ln415_28_fu_1173_p1;
wire   [5:0] add_ln415_12_fu_1176_p2;
wire   [0:0] tmp_63_fu_1186_p3;
wire   [0:0] tmp_61_fu_1163_p3;
wire   [0:0] xor_ln416_12_fu_1194_p2;
wire   [0:0] and_ln416_12_fu_1200_p2;
wire   [0:0] select_ln777_12_fu_1214_p3;
wire   [0:0] tmp_64_fu_1206_p3;
wire   [0:0] xor_ln785_1_fu_1220_p2;
wire   [0:0] or_ln340_1_fu_1226_p2;
wire   [4:0] add_ln416_12_fu_1181_p2;
wire   [5:0] zext_ln415_13_fu_1252_p1;
wire   [4:0] zext_ln415_29_fu_1255_p1;
wire   [5:0] add_ln415_13_fu_1258_p2;
wire   [0:0] tmp_67_fu_1268_p3;
wire   [0:0] tmp_65_fu_1245_p3;
wire   [0:0] xor_ln416_13_fu_1276_p2;
wire   [0:0] and_ln416_13_fu_1282_p2;
wire   [0:0] select_ln777_13_fu_1296_p3;
wire   [0:0] tmp_68_fu_1288_p3;
wire   [0:0] xor_ln785_2_fu_1302_p2;
wire   [0:0] or_ln340_2_fu_1308_p2;
wire   [4:0] add_ln416_13_fu_1263_p2;
wire   [5:0] zext_ln415_14_fu_1334_p1;
wire   [4:0] zext_ln415_30_fu_1337_p1;
wire   [5:0] add_ln415_14_fu_1340_p2;
wire   [0:0] tmp_71_fu_1350_p3;
wire   [0:0] tmp_69_fu_1327_p3;
wire   [0:0] xor_ln416_14_fu_1358_p2;
wire   [0:0] and_ln416_14_fu_1364_p2;
wire   [0:0] select_ln777_14_fu_1378_p3;
wire   [0:0] tmp_72_fu_1370_p3;
wire   [0:0] xor_ln785_3_fu_1384_p2;
wire   [0:0] or_ln340_3_fu_1390_p2;
wire   [4:0] add_ln416_14_fu_1345_p2;
wire   [5:0] zext_ln415_15_fu_1416_p1;
wire   [4:0] zext_ln415_31_fu_1419_p1;
wire   [5:0] add_ln415_15_fu_1422_p2;
wire   [0:0] tmp_75_fu_1432_p3;
wire   [0:0] tmp_73_fu_1409_p3;
wire   [0:0] xor_ln416_15_fu_1440_p2;
wire   [0:0] and_ln416_15_fu_1446_p2;
wire   [0:0] select_ln777_15_fu_1460_p3;
wire   [0:0] tmp_76_fu_1452_p3;
wire   [0:0] xor_ln785_4_fu_1466_p2;
wire   [0:0] or_ln340_4_fu_1472_p2;
wire   [4:0] add_ln416_15_fu_1427_p2;
wire   [5:0] zext_ln415_16_fu_1498_p1;
wire   [4:0] zext_ln415_32_fu_1501_p1;
wire   [5:0] add_ln415_16_fu_1504_p2;
wire   [0:0] tmp_79_fu_1514_p3;
wire   [0:0] tmp_77_fu_1491_p3;
wire   [0:0] xor_ln416_16_fu_1522_p2;
wire   [0:0] and_ln416_16_fu_1528_p2;
wire   [0:0] select_ln777_16_fu_1542_p3;
wire   [0:0] tmp_80_fu_1534_p3;
wire   [0:0] xor_ln785_5_fu_1548_p2;
wire   [0:0] or_ln340_5_fu_1554_p2;
wire   [4:0] add_ln416_16_fu_1509_p2;
wire   [5:0] zext_ln415_17_fu_1580_p1;
wire   [4:0] zext_ln415_33_fu_1583_p1;
wire   [5:0] add_ln415_17_fu_1586_p2;
wire   [0:0] tmp_83_fu_1596_p3;
wire   [0:0] tmp_81_fu_1573_p3;
wire   [0:0] xor_ln416_17_fu_1604_p2;
wire   [0:0] and_ln416_17_fu_1610_p2;
wire   [0:0] select_ln777_17_fu_1624_p3;
wire   [0:0] tmp_84_fu_1616_p3;
wire   [0:0] xor_ln785_6_fu_1630_p2;
wire   [0:0] or_ln340_6_fu_1636_p2;
wire   [4:0] add_ln416_17_fu_1591_p2;
wire   [5:0] zext_ln415_18_fu_1662_p1;
wire   [4:0] zext_ln415_34_fu_1665_p1;
wire   [5:0] add_ln415_18_fu_1668_p2;
wire   [0:0] tmp_87_fu_1678_p3;
wire   [0:0] tmp_85_fu_1655_p3;
wire   [0:0] xor_ln416_18_fu_1686_p2;
wire   [0:0] and_ln416_18_fu_1692_p2;
wire   [0:0] select_ln777_18_fu_1706_p3;
wire   [0:0] tmp_88_fu_1698_p3;
wire   [0:0] xor_ln785_7_fu_1712_p2;
wire   [0:0] or_ln340_7_fu_1718_p2;
wire   [4:0] add_ln416_18_fu_1673_p2;
wire   [5:0] zext_ln415_19_fu_1744_p1;
wire   [4:0] zext_ln415_35_fu_1747_p1;
wire   [5:0] add_ln415_19_fu_1750_p2;
wire   [0:0] tmp_91_fu_1760_p3;
wire   [0:0] tmp_89_fu_1737_p3;
wire   [0:0] xor_ln416_19_fu_1768_p2;
wire   [0:0] and_ln416_19_fu_1774_p2;
wire   [0:0] select_ln777_19_fu_1788_p3;
wire   [0:0] tmp_92_fu_1780_p3;
wire   [0:0] xor_ln785_8_fu_1794_p2;
wire   [0:0] or_ln340_8_fu_1800_p2;
wire   [4:0] add_ln416_19_fu_1755_p2;
wire   [5:0] zext_ln415_20_fu_1826_p1;
wire   [4:0] zext_ln415_36_fu_1829_p1;
wire   [5:0] add_ln415_20_fu_1832_p2;
wire   [0:0] tmp_95_fu_1842_p3;
wire   [0:0] tmp_93_fu_1819_p3;
wire   [0:0] xor_ln416_20_fu_1850_p2;
wire   [0:0] and_ln416_20_fu_1856_p2;
wire   [0:0] select_ln777_20_fu_1870_p3;
wire   [0:0] tmp_96_fu_1862_p3;
wire   [0:0] xor_ln785_9_fu_1876_p2;
wire   [0:0] or_ln340_9_fu_1882_p2;
wire   [4:0] add_ln416_20_fu_1837_p2;
wire   [5:0] zext_ln415_21_fu_1908_p1;
wire   [4:0] zext_ln415_37_fu_1911_p1;
wire   [5:0] add_ln415_21_fu_1914_p2;
wire   [0:0] tmp_99_fu_1924_p3;
wire   [0:0] tmp_97_fu_1901_p3;
wire   [0:0] xor_ln416_21_fu_1932_p2;
wire   [0:0] and_ln416_21_fu_1938_p2;
wire   [0:0] select_ln777_21_fu_1952_p3;
wire   [0:0] tmp_100_fu_1944_p3;
wire   [0:0] xor_ln785_10_fu_1958_p2;
wire   [0:0] or_ln340_10_fu_1964_p2;
wire   [4:0] add_ln416_21_fu_1919_p2;
wire   [5:0] zext_ln415_22_fu_1990_p1;
wire   [4:0] zext_ln415_38_fu_1993_p1;
wire   [5:0] add_ln415_22_fu_1996_p2;
wire   [0:0] tmp_103_fu_2006_p3;
wire   [0:0] tmp_101_fu_1983_p3;
wire   [0:0] xor_ln416_22_fu_2014_p2;
wire   [0:0] and_ln416_22_fu_2020_p2;
wire   [0:0] select_ln777_22_fu_2034_p3;
wire   [0:0] tmp_104_fu_2026_p3;
wire   [0:0] xor_ln785_11_fu_2040_p2;
wire   [0:0] or_ln340_11_fu_2046_p2;
wire   [4:0] add_ln416_22_fu_2001_p2;
wire   [5:0] zext_ln415_23_fu_2072_p1;
wire   [4:0] zext_ln415_39_fu_2075_p1;
wire   [5:0] add_ln415_23_fu_2078_p2;
wire   [0:0] tmp_107_fu_2088_p3;
wire   [0:0] tmp_105_fu_2065_p3;
wire   [0:0] xor_ln416_23_fu_2096_p2;
wire   [0:0] and_ln416_23_fu_2102_p2;
wire   [0:0] select_ln777_23_fu_2116_p3;
wire   [0:0] tmp_108_fu_2108_p3;
wire   [0:0] xor_ln785_12_fu_2122_p2;
wire   [0:0] or_ln340_12_fu_2128_p2;
wire   [4:0] add_ln416_23_fu_2083_p2;
wire   [5:0] zext_ln415_24_fu_2154_p1;
wire   [4:0] zext_ln415_40_fu_2157_p1;
wire   [5:0] add_ln415_24_fu_2160_p2;
wire   [0:0] tmp_111_fu_2170_p3;
wire   [0:0] tmp_109_fu_2147_p3;
wire   [0:0] xor_ln416_24_fu_2178_p2;
wire   [0:0] and_ln416_24_fu_2184_p2;
wire   [0:0] select_ln777_24_fu_2198_p3;
wire   [0:0] tmp_112_fu_2190_p3;
wire   [0:0] xor_ln785_13_fu_2204_p2;
wire   [0:0] or_ln340_13_fu_2210_p2;
wire   [4:0] add_ln416_24_fu_2165_p2;
wire   [5:0] zext_ln415_25_fu_2236_p1;
wire   [4:0] zext_ln415_41_fu_2239_p1;
wire   [5:0] add_ln415_25_fu_2242_p2;
wire   [0:0] tmp_115_fu_2252_p3;
wire   [0:0] tmp_113_fu_2229_p3;
wire   [0:0] xor_ln416_25_fu_2260_p2;
wire   [0:0] and_ln416_25_fu_2266_p2;
wire   [0:0] select_ln777_25_fu_2280_p3;
wire   [0:0] tmp_116_fu_2272_p3;
wire   [0:0] xor_ln785_14_fu_2286_p2;
wire   [0:0] or_ln340_14_fu_2292_p2;
wire   [4:0] add_ln416_25_fu_2247_p2;
wire   [5:0] zext_ln415_26_fu_2318_p1;
wire   [4:0] zext_ln415_42_fu_2321_p1;
wire   [5:0] add_ln415_26_fu_2324_p2;
wire   [0:0] tmp_119_fu_2334_p3;
wire   [0:0] tmp_117_fu_2311_p3;
wire   [0:0] xor_ln416_26_fu_2342_p2;
wire   [0:0] and_ln416_26_fu_2348_p2;
wire   [0:0] select_ln777_26_fu_2362_p3;
wire   [0:0] tmp_120_fu_2354_p3;
wire   [0:0] xor_ln785_15_fu_2368_p2;
wire   [0:0] or_ln340_15_fu_2374_p2;
wire   [4:0] add_ln416_26_fu_2329_p2;
wire   [0:0] icmp_ln1494_fu_1076_p2;
wire   [4:0] select_ln340_fu_1150_p3;
wire   [0:0] icmp_ln1494_1_fu_1158_p2;
wire   [4:0] select_ln340_1_fu_1232_p3;
wire   [0:0] icmp_ln1494_2_fu_1240_p2;
wire   [4:0] select_ln340_2_fu_1314_p3;
wire   [0:0] icmp_ln1494_3_fu_1322_p2;
wire   [4:0] select_ln340_3_fu_1396_p3;
wire   [0:0] icmp_ln1494_4_fu_1404_p2;
wire   [4:0] select_ln340_4_fu_1478_p3;
wire   [0:0] icmp_ln1494_5_fu_1486_p2;
wire   [4:0] select_ln340_5_fu_1560_p3;
wire   [0:0] icmp_ln1494_6_fu_1568_p2;
wire   [4:0] select_ln340_6_fu_1642_p3;
wire   [0:0] icmp_ln1494_7_fu_1650_p2;
wire   [4:0] select_ln340_7_fu_1724_p3;
wire   [0:0] icmp_ln1494_8_fu_1732_p2;
wire   [4:0] select_ln340_8_fu_1806_p3;
wire   [0:0] icmp_ln1494_9_fu_1814_p2;
wire   [4:0] select_ln340_9_fu_1888_p3;
wire   [0:0] icmp_ln1494_10_fu_1896_p2;
wire   [4:0] select_ln340_10_fu_1970_p3;
wire   [0:0] icmp_ln1494_11_fu_1978_p2;
wire   [4:0] select_ln340_11_fu_2052_p3;
wire   [0:0] icmp_ln1494_12_fu_2060_p2;
wire   [4:0] select_ln340_12_fu_2134_p3;
wire   [0:0] icmp_ln1494_13_fu_2142_p2;
wire   [4:0] select_ln340_13_fu_2216_p3;
wire   [0:0] icmp_ln1494_14_fu_2224_p2;
wire   [4:0] select_ln340_14_fu_2298_p3;
wire   [0:0] icmp_ln1494_15_fu_2306_p2;
wire   [4:0] select_ln340_15_fu_2380_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln768_12_reg_2723 <= icmp_ln768_12_fu_370_p2;
        icmp_ln768_13_reg_2749 <= icmp_ln768_13_fu_420_p2;
        icmp_ln768_14_reg_2775 <= icmp_ln768_14_fu_470_p2;
        icmp_ln768_15_reg_2801 <= icmp_ln768_15_fu_520_p2;
        icmp_ln768_16_reg_2827 <= icmp_ln768_16_fu_570_p2;
        icmp_ln768_17_reg_2853 <= icmp_ln768_17_fu_620_p2;
        icmp_ln768_18_reg_2879 <= icmp_ln768_18_fu_670_p2;
        icmp_ln768_19_reg_2905 <= icmp_ln768_19_fu_720_p2;
        icmp_ln768_20_reg_2931 <= icmp_ln768_20_fu_770_p2;
        icmp_ln768_21_reg_2957 <= icmp_ln768_21_fu_820_p2;
        icmp_ln768_22_reg_2983 <= icmp_ln768_22_fu_870_p2;
        icmp_ln768_23_reg_3009 <= icmp_ln768_23_fu_920_p2;
        icmp_ln768_24_reg_3035 <= icmp_ln768_24_fu_970_p2;
        icmp_ln768_25_reg_3061 <= icmp_ln768_25_fu_1020_p2;
        icmp_ln768_26_reg_3087 <= icmp_ln768_26_fu_1070_p2;
        icmp_ln768_reg_2697 <= icmp_ln768_fu_320_p2;
        icmp_ln879_12_reg_2718 <= icmp_ln879_12_fu_364_p2;
        icmp_ln879_13_reg_2744 <= icmp_ln879_13_fu_414_p2;
        icmp_ln879_14_reg_2770 <= icmp_ln879_14_fu_464_p2;
        icmp_ln879_15_reg_2796 <= icmp_ln879_15_fu_514_p2;
        icmp_ln879_16_reg_2822 <= icmp_ln879_16_fu_564_p2;
        icmp_ln879_17_reg_2848 <= icmp_ln879_17_fu_614_p2;
        icmp_ln879_18_reg_2874 <= icmp_ln879_18_fu_664_p2;
        icmp_ln879_19_reg_2900 <= icmp_ln879_19_fu_714_p2;
        icmp_ln879_20_reg_2926 <= icmp_ln879_20_fu_764_p2;
        icmp_ln879_21_reg_2952 <= icmp_ln879_21_fu_814_p2;
        icmp_ln879_22_reg_2978 <= icmp_ln879_22_fu_864_p2;
        icmp_ln879_23_reg_3004 <= icmp_ln879_23_fu_914_p2;
        icmp_ln879_24_reg_3030 <= icmp_ln879_24_fu_964_p2;
        icmp_ln879_25_reg_3056 <= icmp_ln879_25_fu_1014_p2;
        icmp_ln879_26_reg_3082 <= icmp_ln879_26_fu_1064_p2;
        icmp_ln879_reg_2692 <= icmp_ln879_fu_314_p2;
        tmp_102_reg_2967 <= data_V_data_11_V_dout[32'd2];
        tmp_106_reg_2993 <= data_V_data_12_V_dout[32'd2];
        tmp_110_reg_3019 <= data_V_data_13_V_dout[32'd2];
        tmp_114_reg_3045 <= data_V_data_14_V_dout[32'd2];
        tmp_118_reg_3071 <= data_V_data_15_V_dout[32'd2];
        tmp_58_reg_2681 <= data_V_data_0_V_dout[32'd2];
        tmp_62_reg_2707 <= data_V_data_1_V_dout[32'd2];
        tmp_66_reg_2733 <= data_V_data_2_V_dout[32'd2];
        tmp_70_reg_2759 <= data_V_data_3_V_dout[32'd2];
        tmp_74_reg_2785 <= data_V_data_4_V_dout[32'd2];
        tmp_78_reg_2811 <= data_V_data_5_V_dout[32'd2];
        tmp_82_reg_2837 <= data_V_data_6_V_dout[32'd2];
        tmp_86_reg_2863 <= data_V_data_7_V_dout[32'd2];
        tmp_90_reg_2889 <= data_V_data_8_V_dout[32'd2];
        tmp_94_reg_2915 <= data_V_data_9_V_dout[32'd2];
        tmp_98_reg_2941 <= data_V_data_10_V_dout[32'd2];
        tmp_data_0_V_reg_3092 <= tmp_data_0_V_fu_2388_p3;
        tmp_data_10_V_reg_3142 <= tmp_data_10_V_fu_2468_p3;
        tmp_data_11_V_reg_3147 <= tmp_data_11_V_fu_2476_p3;
        tmp_data_12_V_reg_3152 <= tmp_data_12_V_fu_2484_p3;
        tmp_data_13_V_reg_3157 <= tmp_data_13_V_fu_2492_p3;
        tmp_data_14_V_reg_3162 <= tmp_data_14_V_fu_2500_p3;
        tmp_data_15_V_reg_3167 <= tmp_data_15_V_fu_2508_p3;
        tmp_data_1_V_reg_3097 <= tmp_data_1_V_fu_2396_p3;
        tmp_data_2_V_reg_3102 <= tmp_data_2_V_fu_2404_p3;
        tmp_data_3_V_reg_3107 <= tmp_data_3_V_fu_2412_p3;
        tmp_data_4_V_reg_3112 <= tmp_data_4_V_fu_2420_p3;
        tmp_data_5_V_reg_3117 <= tmp_data_5_V_fu_2428_p3;
        tmp_data_6_V_reg_3122 <= tmp_data_6_V_fu_2436_p3;
        tmp_data_7_V_reg_3127 <= tmp_data_7_V_fu_2444_p3;
        tmp_data_8_V_reg_3132 <= tmp_data_8_V_fu_2452_p3;
        tmp_data_9_V_reg_3137 <= tmp_data_9_V_fu_2460_p3;
        tmp_data_V_42_0_reg_2580 <= data_V_data_0_V_dout;
        tmp_data_V_42_10_reg_2640 <= data_V_data_10_V_dout;
        tmp_data_V_42_11_reg_2646 <= data_V_data_11_V_dout;
        tmp_data_V_42_12_reg_2652 <= data_V_data_12_V_dout;
        tmp_data_V_42_13_reg_2658 <= data_V_data_13_V_dout;
        tmp_data_V_42_14_reg_2664 <= data_V_data_14_V_dout;
        tmp_data_V_42_15_reg_2670 <= data_V_data_15_V_dout;
        tmp_data_V_42_1_reg_2586 <= data_V_data_1_V_dout;
        tmp_data_V_42_2_reg_2592 <= data_V_data_2_V_dout;
        tmp_data_V_42_3_reg_2598 <= data_V_data_3_V_dout;
        tmp_data_V_42_4_reg_2604 <= data_V_data_4_V_dout;
        tmp_data_V_42_5_reg_2610 <= data_V_data_5_V_dout;
        tmp_data_V_42_6_reg_2616 <= data_V_data_6_V_dout;
        tmp_data_V_42_7_reg_2622 <= data_V_data_7_V_dout;
        tmp_data_V_42_8_reg_2628 <= data_V_data_8_V_dout;
        tmp_data_V_42_9_reg_2634 <= data_V_data_9_V_dout;
        trunc_ln415_10_reg_2713 <= {{data_V_data_1_V_dout[7:3]}};
        trunc_ln415_11_reg_2739 <= {{data_V_data_2_V_dout[7:3]}};
        trunc_ln415_12_reg_2765 <= {{data_V_data_3_V_dout[7:3]}};
        trunc_ln415_13_reg_2791 <= {{data_V_data_4_V_dout[7:3]}};
        trunc_ln415_14_reg_2817 <= {{data_V_data_5_V_dout[7:3]}};
        trunc_ln415_15_reg_2843 <= {{data_V_data_6_V_dout[7:3]}};
        trunc_ln415_16_reg_2869 <= {{data_V_data_7_V_dout[7:3]}};
        trunc_ln415_17_reg_2895 <= {{data_V_data_8_V_dout[7:3]}};
        trunc_ln415_18_reg_2921 <= {{data_V_data_9_V_dout[7:3]}};
        trunc_ln415_19_reg_2947 <= {{data_V_data_10_V_dout[7:3]}};
        trunc_ln415_20_reg_2973 <= {{data_V_data_11_V_dout[7:3]}};
        trunc_ln415_21_reg_2999 <= {{data_V_data_12_V_dout[7:3]}};
        trunc_ln415_22_reg_3025 <= {{data_V_data_13_V_dout[7:3]}};
        trunc_ln415_23_reg_3051 <= {{data_V_data_14_V_dout[7:3]}};
        trunc_ln415_24_reg_3077 <= {{data_V_data_15_V_dout[7:3]}};
        trunc_ln415_s_reg_2687 <= {{data_V_data_0_V_dout[7:3]}};
        trunc_ln708_20_reg_2728 <= {{data_V_data_2_V_dout[8:3]}};
        trunc_ln708_21_reg_2754 <= {{data_V_data_3_V_dout[8:3]}};
        trunc_ln708_22_reg_2780 <= {{data_V_data_4_V_dout[8:3]}};
        trunc_ln708_23_reg_2806 <= {{data_V_data_5_V_dout[8:3]}};
        trunc_ln708_24_reg_2832 <= {{data_V_data_6_V_dout[8:3]}};
        trunc_ln708_25_reg_2858 <= {{data_V_data_7_V_dout[8:3]}};
        trunc_ln708_26_reg_2884 <= {{data_V_data_8_V_dout[8:3]}};
        trunc_ln708_27_reg_2910 <= {{data_V_data_9_V_dout[8:3]}};
        trunc_ln708_28_reg_2936 <= {{data_V_data_10_V_dout[8:3]}};
        trunc_ln708_29_reg_2962 <= {{data_V_data_11_V_dout[8:3]}};
        trunc_ln708_30_reg_2988 <= {{data_V_data_12_V_dout[8:3]}};
        trunc_ln708_31_reg_3014 <= {{data_V_data_13_V_dout[8:3]}};
        trunc_ln708_32_reg_3040 <= {{data_V_data_14_V_dout[8:3]}};
        trunc_ln708_33_reg_3066 <= {{data_V_data_15_V_dout[8:3]}};
        trunc_ln708_s_reg_2702 <= {{data_V_data_1_V_dout[8:3]}};
        trunc_ln_reg_2676 <= {{data_V_data_0_V_dout[8:3]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_12_fu_1176_p2 = (trunc_ln708_s_reg_2702 + zext_ln415_12_fu_1170_p1);

assign add_ln415_13_fu_1258_p2 = (trunc_ln708_20_reg_2728 + zext_ln415_13_fu_1252_p1);

assign add_ln415_14_fu_1340_p2 = (trunc_ln708_21_reg_2754 + zext_ln415_14_fu_1334_p1);

assign add_ln415_15_fu_1422_p2 = (trunc_ln708_22_reg_2780 + zext_ln415_15_fu_1416_p1);

assign add_ln415_16_fu_1504_p2 = (trunc_ln708_23_reg_2806 + zext_ln415_16_fu_1498_p1);

assign add_ln415_17_fu_1586_p2 = (trunc_ln708_24_reg_2832 + zext_ln415_17_fu_1580_p1);

assign add_ln415_18_fu_1668_p2 = (trunc_ln708_25_reg_2858 + zext_ln415_18_fu_1662_p1);

assign add_ln415_19_fu_1750_p2 = (trunc_ln708_26_reg_2884 + zext_ln415_19_fu_1744_p1);

assign add_ln415_20_fu_1832_p2 = (trunc_ln708_27_reg_2910 + zext_ln415_20_fu_1826_p1);

assign add_ln415_21_fu_1914_p2 = (trunc_ln708_28_reg_2936 + zext_ln415_21_fu_1908_p1);

assign add_ln415_22_fu_1996_p2 = (trunc_ln708_29_reg_2962 + zext_ln415_22_fu_1990_p1);

assign add_ln415_23_fu_2078_p2 = (trunc_ln708_30_reg_2988 + zext_ln415_23_fu_2072_p1);

assign add_ln415_24_fu_2160_p2 = (trunc_ln708_31_reg_3014 + zext_ln415_24_fu_2154_p1);

assign add_ln415_25_fu_2242_p2 = (trunc_ln708_32_reg_3040 + zext_ln415_25_fu_2236_p1);

assign add_ln415_26_fu_2324_p2 = (trunc_ln708_33_reg_3066 + zext_ln415_26_fu_2318_p1);

assign add_ln415_fu_1094_p2 = (trunc_ln_reg_2676 + zext_ln415_fu_1088_p1);

assign add_ln416_12_fu_1181_p2 = (trunc_ln415_10_reg_2713 + zext_ln415_28_fu_1173_p1);

assign add_ln416_13_fu_1263_p2 = (trunc_ln415_11_reg_2739 + zext_ln415_29_fu_1255_p1);

assign add_ln416_14_fu_1345_p2 = (trunc_ln415_12_reg_2765 + zext_ln415_30_fu_1337_p1);

assign add_ln416_15_fu_1427_p2 = (trunc_ln415_13_reg_2791 + zext_ln415_31_fu_1419_p1);

assign add_ln416_16_fu_1509_p2 = (trunc_ln415_14_reg_2817 + zext_ln415_32_fu_1501_p1);

assign add_ln416_17_fu_1591_p2 = (trunc_ln415_15_reg_2843 + zext_ln415_33_fu_1583_p1);

assign add_ln416_18_fu_1673_p2 = (trunc_ln415_16_reg_2869 + zext_ln415_34_fu_1665_p1);

assign add_ln416_19_fu_1755_p2 = (trunc_ln415_17_reg_2895 + zext_ln415_35_fu_1747_p1);

assign add_ln416_20_fu_1837_p2 = (trunc_ln415_18_reg_2921 + zext_ln415_36_fu_1829_p1);

assign add_ln416_21_fu_1919_p2 = (trunc_ln415_19_reg_2947 + zext_ln415_37_fu_1911_p1);

assign add_ln416_22_fu_2001_p2 = (trunc_ln415_20_reg_2973 + zext_ln415_38_fu_1993_p1);

assign add_ln416_23_fu_2083_p2 = (trunc_ln415_21_reg_2999 + zext_ln415_39_fu_2075_p1);

assign add_ln416_24_fu_2165_p2 = (trunc_ln415_22_reg_3025 + zext_ln415_40_fu_2157_p1);

assign add_ln416_25_fu_2247_p2 = (trunc_ln415_23_reg_3051 + zext_ln415_41_fu_2239_p1);

assign add_ln416_26_fu_2329_p2 = (trunc_ln415_24_reg_3077 + zext_ln415_42_fu_2321_p1);

assign add_ln416_fu_1099_p2 = (trunc_ln415_s_reg_2687 + zext_ln415_27_fu_1091_p1);

assign and_ln416_12_fu_1200_p2 = (xor_ln416_12_fu_1194_p2 & tmp_61_fu_1163_p3);

assign and_ln416_13_fu_1282_p2 = (xor_ln416_13_fu_1276_p2 & tmp_65_fu_1245_p3);

assign and_ln416_14_fu_1364_p2 = (xor_ln416_14_fu_1358_p2 & tmp_69_fu_1327_p3);

assign and_ln416_15_fu_1446_p2 = (xor_ln416_15_fu_1440_p2 & tmp_73_fu_1409_p3);

assign and_ln416_16_fu_1528_p2 = (xor_ln416_16_fu_1522_p2 & tmp_77_fu_1491_p3);

assign and_ln416_17_fu_1610_p2 = (xor_ln416_17_fu_1604_p2 & tmp_81_fu_1573_p3);

assign and_ln416_18_fu_1692_p2 = (xor_ln416_18_fu_1686_p2 & tmp_85_fu_1655_p3);

assign and_ln416_19_fu_1774_p2 = (xor_ln416_19_fu_1768_p2 & tmp_89_fu_1737_p3);

assign and_ln416_20_fu_1856_p2 = (xor_ln416_20_fu_1850_p2 & tmp_93_fu_1819_p3);

assign and_ln416_21_fu_1938_p2 = (xor_ln416_21_fu_1932_p2 & tmp_97_fu_1901_p3);

assign and_ln416_22_fu_2020_p2 = (xor_ln416_22_fu_2014_p2 & tmp_101_fu_1983_p3);

assign and_ln416_23_fu_2102_p2 = (xor_ln416_23_fu_2096_p2 & tmp_105_fu_2065_p3);

assign and_ln416_24_fu_2184_p2 = (xor_ln416_24_fu_2178_p2 & tmp_109_fu_2147_p3);

assign and_ln416_25_fu_2266_p2 = (xor_ln416_25_fu_2260_p2 & tmp_113_fu_2229_p3);

assign and_ln416_26_fu_2348_p2 = (xor_ln416_26_fu_2342_p2 & tmp_117_fu_2311_p3);

assign and_ln416_fu_1118_p2 = (xor_ln416_fu_1112_p2 & tmp_57_fu_1081_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))) | ((io_acc_block_signal_op408 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))) | ((io_acc_block_signal_op408 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))) | ((io_acc_block_signal_op408 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (io_acc_block_signal_op408 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign icmp_ln1494_10_fu_1896_p2 = (($signed(tmp_data_V_42_10_reg_2640) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_1978_p2 = (($signed(tmp_data_V_42_11_reg_2646) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_2060_p2 = (($signed(tmp_data_V_42_12_reg_2652) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_2142_p2 = (($signed(tmp_data_V_42_13_reg_2658) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_2224_p2 = (($signed(tmp_data_V_42_14_reg_2664) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_2306_p2 = (($signed(tmp_data_V_42_15_reg_2670) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_1158_p2 = (($signed(tmp_data_V_42_1_reg_2586) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_1240_p2 = (($signed(tmp_data_V_42_2_reg_2592) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1322_p2 = (($signed(tmp_data_V_42_3_reg_2598) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1404_p2 = (($signed(tmp_data_V_42_4_reg_2604) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1486_p2 = (($signed(tmp_data_V_42_5_reg_2610) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1568_p2 = (($signed(tmp_data_V_42_6_reg_2616) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1650_p2 = (($signed(tmp_data_V_42_7_reg_2622) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_1732_p2 = (($signed(tmp_data_V_42_8_reg_2628) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1814_p2 = (($signed(tmp_data_V_42_9_reg_2634) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1076_p2 = (($signed(tmp_data_V_42_0_reg_2580) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln768_12_fu_370_p2 = ((p_Result_15_1_fu_354_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_13_fu_420_p2 = ((p_Result_15_2_fu_404_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_14_fu_470_p2 = ((p_Result_15_3_fu_454_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_15_fu_520_p2 = ((p_Result_15_4_fu_504_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_16_fu_570_p2 = ((p_Result_15_5_fu_554_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_17_fu_620_p2 = ((p_Result_15_6_fu_604_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_18_fu_670_p2 = ((p_Result_15_7_fu_654_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_19_fu_720_p2 = ((p_Result_15_8_fu_704_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_20_fu_770_p2 = ((p_Result_15_9_fu_754_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_21_fu_820_p2 = ((p_Result_15_s_fu_804_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_22_fu_870_p2 = ((p_Result_15_10_fu_854_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_23_fu_920_p2 = ((p_Result_15_11_fu_904_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_24_fu_970_p2 = ((p_Result_15_12_fu_954_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_25_fu_1020_p2 = ((p_Result_15_13_fu_1004_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_26_fu_1070_p2 = ((p_Result_15_14_fu_1054_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_320_p2 = ((p_Result_s_fu_304_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_12_fu_364_p2 = ((p_Result_15_1_fu_354_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_13_fu_414_p2 = ((p_Result_15_2_fu_404_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_14_fu_464_p2 = ((p_Result_15_3_fu_454_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_15_fu_514_p2 = ((p_Result_15_4_fu_504_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_16_fu_564_p2 = ((p_Result_15_5_fu_554_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_17_fu_614_p2 = ((p_Result_15_6_fu_604_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_18_fu_664_p2 = ((p_Result_15_7_fu_654_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_19_fu_714_p2 = ((p_Result_15_8_fu_704_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_20_fu_764_p2 = ((p_Result_15_9_fu_754_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_21_fu_814_p2 = ((p_Result_15_s_fu_804_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_22_fu_864_p2 = ((p_Result_15_10_fu_854_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_23_fu_914_p2 = ((p_Result_15_11_fu_904_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_24_fu_964_p2 = ((p_Result_15_12_fu_954_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_25_fu_1014_p2 = ((p_Result_15_13_fu_1004_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_26_fu_1064_p2 = ((p_Result_15_14_fu_1054_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_314_p2 = ((p_Result_s_fu_304_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op4 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op408 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign or_ln340_10_fu_1964_p2 = (xor_ln785_10_fu_1958_p2 | tmp_100_fu_1944_p3);

assign or_ln340_11_fu_2046_p2 = (xor_ln785_11_fu_2040_p2 | tmp_104_fu_2026_p3);

assign or_ln340_12_fu_2128_p2 = (xor_ln785_12_fu_2122_p2 | tmp_108_fu_2108_p3);

assign or_ln340_13_fu_2210_p2 = (xor_ln785_13_fu_2204_p2 | tmp_112_fu_2190_p3);

assign or_ln340_14_fu_2292_p2 = (xor_ln785_14_fu_2286_p2 | tmp_116_fu_2272_p3);

assign or_ln340_15_fu_2374_p2 = (xor_ln785_15_fu_2368_p2 | tmp_120_fu_2354_p3);

assign or_ln340_1_fu_1226_p2 = (xor_ln785_1_fu_1220_p2 | tmp_64_fu_1206_p3);

assign or_ln340_2_fu_1308_p2 = (xor_ln785_2_fu_1302_p2 | tmp_68_fu_1288_p3);

assign or_ln340_3_fu_1390_p2 = (xor_ln785_3_fu_1384_p2 | tmp_72_fu_1370_p3);

assign or_ln340_4_fu_1472_p2 = (xor_ln785_4_fu_1466_p2 | tmp_76_fu_1452_p3);

assign or_ln340_5_fu_1554_p2 = (xor_ln785_5_fu_1548_p2 | tmp_80_fu_1534_p3);

assign or_ln340_6_fu_1636_p2 = (xor_ln785_6_fu_1630_p2 | tmp_84_fu_1616_p3);

assign or_ln340_7_fu_1718_p2 = (xor_ln785_7_fu_1712_p2 | tmp_88_fu_1698_p3);

assign or_ln340_8_fu_1800_p2 = (xor_ln785_8_fu_1794_p2 | tmp_92_fu_1780_p3);

assign or_ln340_9_fu_1882_p2 = (xor_ln785_9_fu_1876_p2 | tmp_96_fu_1862_p3);

assign or_ln340_fu_1144_p2 = (xor_ln785_fu_1138_p2 | tmp_60_fu_1124_p3);

assign p_Result_15_10_fu_854_p4 = {{data_V_data_11_V_dout[13:9]}};

assign p_Result_15_11_fu_904_p4 = {{data_V_data_12_V_dout[13:9]}};

assign p_Result_15_12_fu_954_p4 = {{data_V_data_13_V_dout[13:9]}};

assign p_Result_15_13_fu_1004_p4 = {{data_V_data_14_V_dout[13:9]}};

assign p_Result_15_14_fu_1054_p4 = {{data_V_data_15_V_dout[13:9]}};

assign p_Result_15_1_fu_354_p4 = {{data_V_data_1_V_dout[13:9]}};

assign p_Result_15_2_fu_404_p4 = {{data_V_data_2_V_dout[13:9]}};

assign p_Result_15_3_fu_454_p4 = {{data_V_data_3_V_dout[13:9]}};

assign p_Result_15_4_fu_504_p4 = {{data_V_data_4_V_dout[13:9]}};

assign p_Result_15_5_fu_554_p4 = {{data_V_data_5_V_dout[13:9]}};

assign p_Result_15_6_fu_604_p4 = {{data_V_data_6_V_dout[13:9]}};

assign p_Result_15_7_fu_654_p4 = {{data_V_data_7_V_dout[13:9]}};

assign p_Result_15_8_fu_704_p4 = {{data_V_data_8_V_dout[13:9]}};

assign p_Result_15_9_fu_754_p4 = {{data_V_data_9_V_dout[13:9]}};

assign p_Result_15_s_fu_804_p4 = {{data_V_data_10_V_dout[13:9]}};

assign p_Result_s_fu_304_p4 = {{data_V_data_0_V_dout[13:9]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_3092;

assign res_V_data_10_V_din = tmp_data_10_V_reg_3142;

assign res_V_data_11_V_din = tmp_data_11_V_reg_3147;

assign res_V_data_12_V_din = tmp_data_12_V_reg_3152;

assign res_V_data_13_V_din = tmp_data_13_V_reg_3157;

assign res_V_data_14_V_din = tmp_data_14_V_reg_3162;

assign res_V_data_15_V_din = tmp_data_15_V_reg_3167;

assign res_V_data_1_V_din = tmp_data_1_V_reg_3097;

assign res_V_data_2_V_din = tmp_data_2_V_reg_3102;

assign res_V_data_3_V_din = tmp_data_3_V_reg_3107;

assign res_V_data_4_V_din = tmp_data_4_V_reg_3112;

assign res_V_data_5_V_din = tmp_data_5_V_reg_3117;

assign res_V_data_6_V_din = tmp_data_6_V_reg_3122;

assign res_V_data_7_V_din = tmp_data_7_V_reg_3127;

assign res_V_data_8_V_din = tmp_data_8_V_reg_3132;

assign res_V_data_9_V_din = tmp_data_9_V_reg_3137;

assign select_ln340_10_fu_1970_p3 = ((or_ln340_10_fu_1964_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_21_fu_1919_p2);

assign select_ln340_11_fu_2052_p3 = ((or_ln340_11_fu_2046_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_22_fu_2001_p2);

assign select_ln340_12_fu_2134_p3 = ((or_ln340_12_fu_2128_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_23_fu_2083_p2);

assign select_ln340_13_fu_2216_p3 = ((or_ln340_13_fu_2210_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_24_fu_2165_p2);

assign select_ln340_14_fu_2298_p3 = ((or_ln340_14_fu_2292_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_25_fu_2247_p2);

assign select_ln340_15_fu_2380_p3 = ((or_ln340_15_fu_2374_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_26_fu_2329_p2);

assign select_ln340_1_fu_1232_p3 = ((or_ln340_1_fu_1226_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_12_fu_1181_p2);

assign select_ln340_2_fu_1314_p3 = ((or_ln340_2_fu_1308_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_13_fu_1263_p2);

assign select_ln340_3_fu_1396_p3 = ((or_ln340_3_fu_1390_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_14_fu_1345_p2);

assign select_ln340_4_fu_1478_p3 = ((or_ln340_4_fu_1472_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_15_fu_1427_p2);

assign select_ln340_5_fu_1560_p3 = ((or_ln340_5_fu_1554_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_16_fu_1509_p2);

assign select_ln340_6_fu_1642_p3 = ((or_ln340_6_fu_1636_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_17_fu_1591_p2);

assign select_ln340_7_fu_1724_p3 = ((or_ln340_7_fu_1718_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_18_fu_1673_p2);

assign select_ln340_8_fu_1806_p3 = ((or_ln340_8_fu_1800_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_19_fu_1755_p2);

assign select_ln340_9_fu_1888_p3 = ((or_ln340_9_fu_1882_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_20_fu_1837_p2);

assign select_ln340_fu_1150_p3 = ((or_ln340_fu_1144_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_fu_1099_p2);

assign select_ln777_12_fu_1214_p3 = ((and_ln416_12_fu_1200_p2[0:0] === 1'b1) ? icmp_ln879_12_reg_2718 : icmp_ln768_12_reg_2723);

assign select_ln777_13_fu_1296_p3 = ((and_ln416_13_fu_1282_p2[0:0] === 1'b1) ? icmp_ln879_13_reg_2744 : icmp_ln768_13_reg_2749);

assign select_ln777_14_fu_1378_p3 = ((and_ln416_14_fu_1364_p2[0:0] === 1'b1) ? icmp_ln879_14_reg_2770 : icmp_ln768_14_reg_2775);

assign select_ln777_15_fu_1460_p3 = ((and_ln416_15_fu_1446_p2[0:0] === 1'b1) ? icmp_ln879_15_reg_2796 : icmp_ln768_15_reg_2801);

assign select_ln777_16_fu_1542_p3 = ((and_ln416_16_fu_1528_p2[0:0] === 1'b1) ? icmp_ln879_16_reg_2822 : icmp_ln768_16_reg_2827);

assign select_ln777_17_fu_1624_p3 = ((and_ln416_17_fu_1610_p2[0:0] === 1'b1) ? icmp_ln879_17_reg_2848 : icmp_ln768_17_reg_2853);

assign select_ln777_18_fu_1706_p3 = ((and_ln416_18_fu_1692_p2[0:0] === 1'b1) ? icmp_ln879_18_reg_2874 : icmp_ln768_18_reg_2879);

assign select_ln777_19_fu_1788_p3 = ((and_ln416_19_fu_1774_p2[0:0] === 1'b1) ? icmp_ln879_19_reg_2900 : icmp_ln768_19_reg_2905);

assign select_ln777_20_fu_1870_p3 = ((and_ln416_20_fu_1856_p2[0:0] === 1'b1) ? icmp_ln879_20_reg_2926 : icmp_ln768_20_reg_2931);

assign select_ln777_21_fu_1952_p3 = ((and_ln416_21_fu_1938_p2[0:0] === 1'b1) ? icmp_ln879_21_reg_2952 : icmp_ln768_21_reg_2957);

assign select_ln777_22_fu_2034_p3 = ((and_ln416_22_fu_2020_p2[0:0] === 1'b1) ? icmp_ln879_22_reg_2978 : icmp_ln768_22_reg_2983);

assign select_ln777_23_fu_2116_p3 = ((and_ln416_23_fu_2102_p2[0:0] === 1'b1) ? icmp_ln879_23_reg_3004 : icmp_ln768_23_reg_3009);

assign select_ln777_24_fu_2198_p3 = ((and_ln416_24_fu_2184_p2[0:0] === 1'b1) ? icmp_ln879_24_reg_3030 : icmp_ln768_24_reg_3035);

assign select_ln777_25_fu_2280_p3 = ((and_ln416_25_fu_2266_p2[0:0] === 1'b1) ? icmp_ln879_25_reg_3056 : icmp_ln768_25_reg_3061);

assign select_ln777_26_fu_2362_p3 = ((and_ln416_26_fu_2348_p2[0:0] === 1'b1) ? icmp_ln879_26_reg_3082 : icmp_ln768_26_reg_3087);

assign select_ln777_fu_1132_p3 = ((and_ln416_fu_1118_p2[0:0] === 1'b1) ? icmp_ln879_reg_2692 : icmp_ln768_reg_2697);

assign start_out = real_start;

assign tmp_100_fu_1944_p3 = add_ln415_21_fu_1914_p2[32'd5];

assign tmp_101_fu_1983_p3 = tmp_data_V_42_11_reg_2646[32'd8];

assign tmp_103_fu_2006_p3 = add_ln415_22_fu_1996_p2[32'd5];

assign tmp_104_fu_2026_p3 = add_ln415_22_fu_1996_p2[32'd5];

assign tmp_105_fu_2065_p3 = tmp_data_V_42_12_reg_2652[32'd8];

assign tmp_107_fu_2088_p3 = add_ln415_23_fu_2078_p2[32'd5];

assign tmp_108_fu_2108_p3 = add_ln415_23_fu_2078_p2[32'd5];

assign tmp_109_fu_2147_p3 = tmp_data_V_42_13_reg_2658[32'd8];

assign tmp_111_fu_2170_p3 = add_ln415_24_fu_2160_p2[32'd5];

assign tmp_112_fu_2190_p3 = add_ln415_24_fu_2160_p2[32'd5];

assign tmp_113_fu_2229_p3 = tmp_data_V_42_14_reg_2664[32'd8];

assign tmp_115_fu_2252_p3 = add_ln415_25_fu_2242_p2[32'd5];

assign tmp_116_fu_2272_p3 = add_ln415_25_fu_2242_p2[32'd5];

assign tmp_117_fu_2311_p3 = tmp_data_V_42_15_reg_2670[32'd8];

assign tmp_119_fu_2334_p3 = add_ln415_26_fu_2324_p2[32'd5];

assign tmp_120_fu_2354_p3 = add_ln415_26_fu_2324_p2[32'd5];

assign tmp_57_fu_1081_p3 = tmp_data_V_42_0_reg_2580[32'd8];

assign tmp_59_fu_1104_p3 = add_ln415_fu_1094_p2[32'd5];

assign tmp_60_fu_1124_p3 = add_ln415_fu_1094_p2[32'd5];

assign tmp_61_fu_1163_p3 = tmp_data_V_42_1_reg_2586[32'd8];

assign tmp_63_fu_1186_p3 = add_ln415_12_fu_1176_p2[32'd5];

assign tmp_64_fu_1206_p3 = add_ln415_12_fu_1176_p2[32'd5];

assign tmp_65_fu_1245_p3 = tmp_data_V_42_2_reg_2592[32'd8];

assign tmp_67_fu_1268_p3 = add_ln415_13_fu_1258_p2[32'd5];

assign tmp_68_fu_1288_p3 = add_ln415_13_fu_1258_p2[32'd5];

assign tmp_69_fu_1327_p3 = tmp_data_V_42_3_reg_2598[32'd8];

assign tmp_71_fu_1350_p3 = add_ln415_14_fu_1340_p2[32'd5];

assign tmp_72_fu_1370_p3 = add_ln415_14_fu_1340_p2[32'd5];

assign tmp_73_fu_1409_p3 = tmp_data_V_42_4_reg_2604[32'd8];

assign tmp_75_fu_1432_p3 = add_ln415_15_fu_1422_p2[32'd5];

assign tmp_76_fu_1452_p3 = add_ln415_15_fu_1422_p2[32'd5];

assign tmp_77_fu_1491_p3 = tmp_data_V_42_5_reg_2610[32'd8];

assign tmp_79_fu_1514_p3 = add_ln415_16_fu_1504_p2[32'd5];

assign tmp_80_fu_1534_p3 = add_ln415_16_fu_1504_p2[32'd5];

assign tmp_81_fu_1573_p3 = tmp_data_V_42_6_reg_2616[32'd8];

assign tmp_83_fu_1596_p3 = add_ln415_17_fu_1586_p2[32'd5];

assign tmp_84_fu_1616_p3 = add_ln415_17_fu_1586_p2[32'd5];

assign tmp_85_fu_1655_p3 = tmp_data_V_42_7_reg_2622[32'd8];

assign tmp_87_fu_1678_p3 = add_ln415_18_fu_1668_p2[32'd5];

assign tmp_88_fu_1698_p3 = add_ln415_18_fu_1668_p2[32'd5];

assign tmp_89_fu_1737_p3 = tmp_data_V_42_8_reg_2628[32'd8];

assign tmp_91_fu_1760_p3 = add_ln415_19_fu_1750_p2[32'd5];

assign tmp_92_fu_1780_p3 = add_ln415_19_fu_1750_p2[32'd5];

assign tmp_93_fu_1819_p3 = tmp_data_V_42_9_reg_2634[32'd8];

assign tmp_95_fu_1842_p3 = add_ln415_20_fu_1832_p2[32'd5];

assign tmp_96_fu_1862_p3 = add_ln415_20_fu_1832_p2[32'd5];

assign tmp_97_fu_1901_p3 = tmp_data_V_42_10_reg_2640[32'd8];

assign tmp_99_fu_1924_p3 = add_ln415_21_fu_1914_p2[32'd5];

assign tmp_data_0_V_fu_2388_p3 = ((icmp_ln1494_fu_1076_p2[0:0] === 1'b1) ? select_ln340_fu_1150_p3 : 5'd0);

assign tmp_data_10_V_fu_2468_p3 = ((icmp_ln1494_10_fu_1896_p2[0:0] === 1'b1) ? select_ln340_10_fu_1970_p3 : 5'd0);

assign tmp_data_11_V_fu_2476_p3 = ((icmp_ln1494_11_fu_1978_p2[0:0] === 1'b1) ? select_ln340_11_fu_2052_p3 : 5'd0);

assign tmp_data_12_V_fu_2484_p3 = ((icmp_ln1494_12_fu_2060_p2[0:0] === 1'b1) ? select_ln340_12_fu_2134_p3 : 5'd0);

assign tmp_data_13_V_fu_2492_p3 = ((icmp_ln1494_13_fu_2142_p2[0:0] === 1'b1) ? select_ln340_13_fu_2216_p3 : 5'd0);

assign tmp_data_14_V_fu_2500_p3 = ((icmp_ln1494_14_fu_2224_p2[0:0] === 1'b1) ? select_ln340_14_fu_2298_p3 : 5'd0);

assign tmp_data_15_V_fu_2508_p3 = ((icmp_ln1494_15_fu_2306_p2[0:0] === 1'b1) ? select_ln340_15_fu_2380_p3 : 5'd0);

assign tmp_data_1_V_fu_2396_p3 = ((icmp_ln1494_1_fu_1158_p2[0:0] === 1'b1) ? select_ln340_1_fu_1232_p3 : 5'd0);

assign tmp_data_2_V_fu_2404_p3 = ((icmp_ln1494_2_fu_1240_p2[0:0] === 1'b1) ? select_ln340_2_fu_1314_p3 : 5'd0);

assign tmp_data_3_V_fu_2412_p3 = ((icmp_ln1494_3_fu_1322_p2[0:0] === 1'b1) ? select_ln340_3_fu_1396_p3 : 5'd0);

assign tmp_data_4_V_fu_2420_p3 = ((icmp_ln1494_4_fu_1404_p2[0:0] === 1'b1) ? select_ln340_4_fu_1478_p3 : 5'd0);

assign tmp_data_5_V_fu_2428_p3 = ((icmp_ln1494_5_fu_1486_p2[0:0] === 1'b1) ? select_ln340_5_fu_1560_p3 : 5'd0);

assign tmp_data_6_V_fu_2436_p3 = ((icmp_ln1494_6_fu_1568_p2[0:0] === 1'b1) ? select_ln340_6_fu_1642_p3 : 5'd0);

assign tmp_data_7_V_fu_2444_p3 = ((icmp_ln1494_7_fu_1650_p2[0:0] === 1'b1) ? select_ln340_7_fu_1724_p3 : 5'd0);

assign tmp_data_8_V_fu_2452_p3 = ((icmp_ln1494_8_fu_1732_p2[0:0] === 1'b1) ? select_ln340_8_fu_1806_p3 : 5'd0);

assign tmp_data_9_V_fu_2460_p3 = ((icmp_ln1494_9_fu_1814_p2[0:0] === 1'b1) ? select_ln340_9_fu_1888_p3 : 5'd0);

assign xor_ln416_12_fu_1194_p2 = (tmp_63_fu_1186_p3 ^ 1'd1);

assign xor_ln416_13_fu_1276_p2 = (tmp_67_fu_1268_p3 ^ 1'd1);

assign xor_ln416_14_fu_1358_p2 = (tmp_71_fu_1350_p3 ^ 1'd1);

assign xor_ln416_15_fu_1440_p2 = (tmp_75_fu_1432_p3 ^ 1'd1);

assign xor_ln416_16_fu_1522_p2 = (tmp_79_fu_1514_p3 ^ 1'd1);

assign xor_ln416_17_fu_1604_p2 = (tmp_83_fu_1596_p3 ^ 1'd1);

assign xor_ln416_18_fu_1686_p2 = (tmp_87_fu_1678_p3 ^ 1'd1);

assign xor_ln416_19_fu_1768_p2 = (tmp_91_fu_1760_p3 ^ 1'd1);

assign xor_ln416_20_fu_1850_p2 = (tmp_95_fu_1842_p3 ^ 1'd1);

assign xor_ln416_21_fu_1932_p2 = (tmp_99_fu_1924_p3 ^ 1'd1);

assign xor_ln416_22_fu_2014_p2 = (tmp_103_fu_2006_p3 ^ 1'd1);

assign xor_ln416_23_fu_2096_p2 = (tmp_107_fu_2088_p3 ^ 1'd1);

assign xor_ln416_24_fu_2178_p2 = (tmp_111_fu_2170_p3 ^ 1'd1);

assign xor_ln416_25_fu_2260_p2 = (tmp_115_fu_2252_p3 ^ 1'd1);

assign xor_ln416_26_fu_2342_p2 = (tmp_119_fu_2334_p3 ^ 1'd1);

assign xor_ln416_fu_1112_p2 = (tmp_59_fu_1104_p3 ^ 1'd1);

assign xor_ln785_10_fu_1958_p2 = (select_ln777_21_fu_1952_p3 ^ 1'd1);

assign xor_ln785_11_fu_2040_p2 = (select_ln777_22_fu_2034_p3 ^ 1'd1);

assign xor_ln785_12_fu_2122_p2 = (select_ln777_23_fu_2116_p3 ^ 1'd1);

assign xor_ln785_13_fu_2204_p2 = (select_ln777_24_fu_2198_p3 ^ 1'd1);

assign xor_ln785_14_fu_2286_p2 = (select_ln777_25_fu_2280_p3 ^ 1'd1);

assign xor_ln785_15_fu_2368_p2 = (select_ln777_26_fu_2362_p3 ^ 1'd1);

assign xor_ln785_1_fu_1220_p2 = (select_ln777_12_fu_1214_p3 ^ 1'd1);

assign xor_ln785_2_fu_1302_p2 = (select_ln777_13_fu_1296_p3 ^ 1'd1);

assign xor_ln785_3_fu_1384_p2 = (select_ln777_14_fu_1378_p3 ^ 1'd1);

assign xor_ln785_4_fu_1466_p2 = (select_ln777_15_fu_1460_p3 ^ 1'd1);

assign xor_ln785_5_fu_1548_p2 = (select_ln777_16_fu_1542_p3 ^ 1'd1);

assign xor_ln785_6_fu_1630_p2 = (select_ln777_17_fu_1624_p3 ^ 1'd1);

assign xor_ln785_7_fu_1712_p2 = (select_ln777_18_fu_1706_p3 ^ 1'd1);

assign xor_ln785_8_fu_1794_p2 = (select_ln777_19_fu_1788_p3 ^ 1'd1);

assign xor_ln785_9_fu_1876_p2 = (select_ln777_20_fu_1870_p3 ^ 1'd1);

assign xor_ln785_fu_1138_p2 = (select_ln777_fu_1132_p3 ^ 1'd1);

assign zext_ln415_12_fu_1170_p1 = tmp_62_reg_2707;

assign zext_ln415_13_fu_1252_p1 = tmp_66_reg_2733;

assign zext_ln415_14_fu_1334_p1 = tmp_70_reg_2759;

assign zext_ln415_15_fu_1416_p1 = tmp_74_reg_2785;

assign zext_ln415_16_fu_1498_p1 = tmp_78_reg_2811;

assign zext_ln415_17_fu_1580_p1 = tmp_82_reg_2837;

assign zext_ln415_18_fu_1662_p1 = tmp_86_reg_2863;

assign zext_ln415_19_fu_1744_p1 = tmp_90_reg_2889;

assign zext_ln415_20_fu_1826_p1 = tmp_94_reg_2915;

assign zext_ln415_21_fu_1908_p1 = tmp_98_reg_2941;

assign zext_ln415_22_fu_1990_p1 = tmp_102_reg_2967;

assign zext_ln415_23_fu_2072_p1 = tmp_106_reg_2993;

assign zext_ln415_24_fu_2154_p1 = tmp_110_reg_3019;

assign zext_ln415_25_fu_2236_p1 = tmp_114_reg_3045;

assign zext_ln415_26_fu_2318_p1 = tmp_118_reg_3071;

assign zext_ln415_27_fu_1091_p1 = tmp_58_reg_2681;

assign zext_ln415_28_fu_1173_p1 = tmp_62_reg_2707;

assign zext_ln415_29_fu_1255_p1 = tmp_66_reg_2733;

assign zext_ln415_30_fu_1337_p1 = tmp_70_reg_2759;

assign zext_ln415_31_fu_1419_p1 = tmp_74_reg_2785;

assign zext_ln415_32_fu_1501_p1 = tmp_78_reg_2811;

assign zext_ln415_33_fu_1583_p1 = tmp_82_reg_2837;

assign zext_ln415_34_fu_1665_p1 = tmp_86_reg_2863;

assign zext_ln415_35_fu_1747_p1 = tmp_90_reg_2889;

assign zext_ln415_36_fu_1829_p1 = tmp_94_reg_2915;

assign zext_ln415_37_fu_1911_p1 = tmp_98_reg_2941;

assign zext_ln415_38_fu_1993_p1 = tmp_102_reg_2967;

assign zext_ln415_39_fu_2075_p1 = tmp_106_reg_2993;

assign zext_ln415_40_fu_2157_p1 = tmp_110_reg_3019;

assign zext_ln415_41_fu_2239_p1 = tmp_114_reg_3045;

assign zext_ln415_42_fu_2321_p1 = tmp_118_reg_3071;

assign zext_ln415_fu_1088_p1 = tmp_58_reg_2681;

endmodule //relu_array_array_ap_fixed_16u_relu_config25_s
