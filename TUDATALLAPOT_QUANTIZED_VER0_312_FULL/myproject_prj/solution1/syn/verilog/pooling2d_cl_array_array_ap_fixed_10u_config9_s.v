// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_10u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [5:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [5:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [5:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [5:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [5:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [5:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [5:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [5:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [5:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_2;
reg   [31:0] sX_2;
reg   [31:0] pY_2;
reg   [31:0] sY_2;
reg   [5:0] kernel_data_V_4_10;
reg   [5:0] kernel_data_V_4_11;
reg   [5:0] kernel_data_V_4_12;
reg   [5:0] kernel_data_V_4_13;
reg   [5:0] kernel_data_V_4_14;
reg   [5:0] kernel_data_V_4_15;
reg   [5:0] kernel_data_V_4_16;
reg   [5:0] kernel_data_V_4_17;
reg   [5:0] kernel_data_V_4_18;
reg   [5:0] kernel_data_V_4_19;
reg   [5:0] kernel_data_V_4_30;
reg   [5:0] kernel_data_V_4_31;
reg   [5:0] kernel_data_V_4_32;
reg   [5:0] kernel_data_V_4_33;
reg   [5:0] kernel_data_V_4_34;
reg   [5:0] kernel_data_V_4_35;
reg   [5:0] kernel_data_V_4_36;
reg   [5:0] kernel_data_V_4_37;
reg   [5:0] kernel_data_V_4_38;
reg   [5:0] kernel_data_V_4_39;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln233_reg_1329;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] and_ln185_6_reg_1578;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg   [11:0] indvar_flatten_reg_220;
wire   [0:0] icmp_ln233_fu_296_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln233_reg_1329_pp0_iter1_reg;
wire   [11:0] add_ln233_fu_302_p2;
reg   [11:0] add_ln233_reg_1333;
reg   [5:0] pool_window_2_V_12_reg_1338;
wire    io_acc_block_signal_op32;
reg    ap_block_state3_pp0_stage1_iter0;
wire    io_acc_block_signal_op239;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [5:0] pool_window_2_V_1_reg_1344;
reg   [5:0] pool_window_2_V_2_reg_1350;
reg   [5:0] pool_window_2_V_3_reg_1356;
reg   [5:0] pool_window_2_V_4_reg_1362;
reg   [5:0] pool_window_2_V_5_reg_1368;
reg   [5:0] pool_window_2_V_6_reg_1374;
reg   [5:0] pool_window_2_V_7_reg_1380;
reg   [5:0] pool_window_2_V_reg_1386;
reg   [5:0] pool_window_2_V_8_reg_1392;
reg   [5:0] pool_window_0_V_12_reg_1398;
reg   [5:0] pool_window_0_V_1_reg_1404;
reg   [5:0] pool_window_0_V_2_reg_1410;
reg   [5:0] pool_window_0_V_3_reg_1416;
reg   [5:0] pool_window_0_V_4_reg_1422;
reg   [5:0] pool_window_0_V_5_reg_1428;
reg   [5:0] pool_window_0_V_6_reg_1434;
reg   [5:0] pool_window_0_V_7_reg_1440;
reg   [5:0] pool_window_0_V_reg_1446;
reg   [5:0] pool_window_0_V_8_reg_1452;
reg   [5:0] pool_window_1_V_12_reg_1458;
reg   [5:0] pool_window_1_V_reg_1464;
reg   [5:0] pool_window_1_V_1_reg_1470;
reg   [5:0] pool_window_1_V_2_reg_1476;
reg   [5:0] pool_window_1_V_3_reg_1482;
reg   [5:0] pool_window_1_V_4_reg_1488;
reg   [5:0] pool_window_1_V_5_reg_1494;
reg   [5:0] pool_window_1_V_6_reg_1500;
reg   [5:0] pool_window_1_V_7_reg_1506;
reg   [5:0] pool_window_1_V_8_reg_1512;
reg   [5:0] pool_window_3_V_12_reg_1518;
reg   [5:0] pool_window_3_V_reg_1524;
reg   [5:0] pool_window_3_V_1_reg_1530;
reg   [5:0] pool_window_3_V_2_reg_1536;
reg   [5:0] pool_window_3_V_3_reg_1542;
reg   [5:0] pool_window_3_V_4_reg_1548;
reg   [5:0] pool_window_3_V_5_reg_1554;
reg   [5:0] pool_window_3_V_6_reg_1560;
reg   [5:0] pool_window_3_V_7_reg_1566;
reg   [5:0] pool_window_3_V_8_reg_1572;
wire   [0:0] and_ln185_6_fu_790_p2;
wire   [5:0] select_ln86_fu_800_p3;
reg   [5:0] select_ln86_reg_1582;
wire   [5:0] select_ln86_38_fu_810_p3;
reg   [5:0] select_ln86_38_reg_1587;
wire   [0:0] icmp_ln1496_39_fu_816_p2;
reg   [0:0] icmp_ln1496_39_reg_1592;
wire   [5:0] select_ln86_40_fu_826_p3;
reg   [5:0] select_ln86_40_reg_1597;
wire   [5:0] select_ln86_41_fu_836_p3;
reg   [5:0] select_ln86_41_reg_1602;
wire   [0:0] icmp_ln1496_42_fu_842_p2;
reg   [0:0] icmp_ln1496_42_reg_1607;
wire   [5:0] select_ln86_43_fu_852_p3;
reg   [5:0] select_ln86_43_reg_1612;
wire   [5:0] select_ln86_44_fu_862_p3;
reg   [5:0] select_ln86_44_reg_1617;
wire   [0:0] icmp_ln1496_45_fu_868_p2;
reg   [0:0] icmp_ln1496_45_reg_1622;
wire   [5:0] select_ln86_46_fu_878_p3;
reg   [5:0] select_ln86_46_reg_1627;
wire   [5:0] select_ln86_47_fu_888_p3;
reg   [5:0] select_ln86_47_reg_1632;
wire   [0:0] icmp_ln1496_48_fu_894_p2;
reg   [0:0] icmp_ln1496_48_reg_1637;
wire   [5:0] select_ln86_49_fu_904_p3;
reg   [5:0] select_ln86_49_reg_1642;
wire   [5:0] select_ln86_50_fu_914_p3;
reg   [5:0] select_ln86_50_reg_1647;
wire   [0:0] icmp_ln1496_51_fu_920_p2;
reg   [0:0] icmp_ln1496_51_reg_1652;
wire   [5:0] select_ln86_52_fu_930_p3;
reg   [5:0] select_ln86_52_reg_1657;
wire   [5:0] select_ln86_53_fu_940_p3;
reg   [5:0] select_ln86_53_reg_1662;
wire   [0:0] icmp_ln1496_54_fu_946_p2;
reg   [0:0] icmp_ln1496_54_reg_1667;
wire   [5:0] select_ln86_55_fu_956_p3;
reg   [5:0] select_ln86_55_reg_1672;
wire   [5:0] select_ln86_56_fu_966_p3;
reg   [5:0] select_ln86_56_reg_1677;
wire   [0:0] icmp_ln1496_57_fu_972_p2;
reg   [0:0] icmp_ln1496_57_reg_1682;
wire   [5:0] select_ln86_58_fu_982_p3;
reg   [5:0] select_ln86_58_reg_1687;
wire   [5:0] select_ln86_59_fu_992_p3;
reg   [5:0] select_ln86_59_reg_1692;
wire   [0:0] icmp_ln1496_60_fu_998_p2;
reg   [0:0] icmp_ln1496_60_reg_1697;
wire   [5:0] select_ln86_61_fu_1008_p3;
reg   [5:0] select_ln86_61_reg_1702;
wire   [5:0] select_ln86_62_fu_1018_p3;
reg   [5:0] select_ln86_62_reg_1707;
wire   [0:0] icmp_ln1496_63_fu_1024_p2;
reg   [0:0] icmp_ln1496_63_reg_1712;
wire   [5:0] select_ln86_64_fu_1034_p3;
reg   [5:0] select_ln86_64_reg_1717;
wire   [5:0] select_ln86_65_fu_1044_p3;
reg   [5:0] select_ln86_65_reg_1722;
wire   [0:0] icmp_ln1496_66_fu_1050_p2;
reg   [0:0] icmp_ln1496_66_reg_1727;
wire   [0:0] icmp_ln203_fu_1056_p2;
reg   [0:0] icmp_ln203_reg_1732;
wire   [31:0] select_ln218_fu_1080_p3;
reg   [31:0] select_ln218_reg_1736;
wire   [0:0] icmp_ln207_fu_1100_p2;
reg   [0:0] icmp_ln207_reg_1741;
wire   [31:0] select_ln213_fu_1124_p3;
reg   [31:0] select_ln213_reg_1745;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
wire    call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start;
wire    call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_done;
wire    call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_idle;
wire    call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_ready;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_0;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_1;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_2;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_3;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_4;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_5;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_6;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_7;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_8;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_9;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_10;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_11;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_12;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_13;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_14;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_15;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_16;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_17;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_18;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_19;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_20;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_21;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_22;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_23;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_24;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_25;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_26;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_27;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_28;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_29;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_30;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_31;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_32;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_33;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_34;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_35;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_36;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_37;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_38;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_39;
reg    call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_ce;
reg    ap_block_state3_pp0_stage1_iter0_ignore_call36;
reg    ap_block_state5_pp0_stage1_iter1_ignore_call36;
reg    ap_block_pp0_stage1_11001_ignoreCallOp63;
reg   [11:0] ap_phi_mux_indvar_flatten_phi_fu_224_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_235_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_231;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_231;
reg    call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start_reg;
wire   [31:0] add_ln216_fu_1062_p2;
wire   [31:0] add_ln211_fu_1106_p2;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln185_fu_742_p2;
wire   [0:0] icmp_ln185_7_fu_752_p2;
wire   [0:0] icmp_ln185_8_fu_762_p2;
wire   [0:0] icmp_ln185_9_fu_772_p2;
wire   [0:0] and_ln185_5_fu_784_p2;
wire   [0:0] and_ln185_fu_778_p2;
wire   [0:0] icmp_ln1496_fu_796_p2;
wire   [0:0] icmp_ln1496_38_fu_806_p2;
wire   [0:0] icmp_ln1496_40_fu_822_p2;
wire   [0:0] icmp_ln1496_41_fu_832_p2;
wire   [0:0] icmp_ln1496_43_fu_848_p2;
wire   [0:0] icmp_ln1496_44_fu_858_p2;
wire   [0:0] icmp_ln1496_46_fu_874_p2;
wire   [0:0] icmp_ln1496_47_fu_884_p2;
wire   [0:0] icmp_ln1496_49_fu_900_p2;
wire   [0:0] icmp_ln1496_50_fu_910_p2;
wire   [0:0] icmp_ln1496_52_fu_926_p2;
wire   [0:0] icmp_ln1496_53_fu_936_p2;
wire   [0:0] icmp_ln1496_55_fu_952_p2;
wire   [0:0] icmp_ln1496_56_fu_962_p2;
wire   [0:0] icmp_ln1496_58_fu_978_p2;
wire   [0:0] icmp_ln1496_59_fu_988_p2;
wire   [0:0] icmp_ln1496_61_fu_1004_p2;
wire   [0:0] icmp_ln1496_62_fu_1014_p2;
wire   [0:0] icmp_ln1496_64_fu_1030_p2;
wire   [0:0] icmp_ln1496_65_fu_1040_p2;
wire   [31:0] add_ln218_fu_1074_p2;
wire   [31:0] add_ln213_fu_1118_p2;
wire   [5:0] select_ln86_39_fu_1138_p3;
wire   [10:0] tmp_data_0_V_8_fu_1143_p3;
wire   [5:0] select_ln86_42_fu_1156_p3;
wire   [10:0] tmp_data_1_V_8_fu_1161_p3;
wire   [5:0] select_ln86_45_fu_1174_p3;
wire   [10:0] tmp_data_2_V_8_fu_1179_p3;
wire   [5:0] select_ln86_48_fu_1192_p3;
wire   [10:0] tmp_data_3_V_7_fu_1197_p3;
wire   [5:0] select_ln86_51_fu_1210_p3;
wire   [10:0] tmp_data_4_V_7_fu_1215_p3;
wire   [5:0] select_ln86_54_fu_1228_p3;
wire   [10:0] tmp_data_5_V_6_fu_1233_p3;
wire   [5:0] select_ln86_57_fu_1246_p3;
wire   [10:0] tmp_data_6_V_6_fu_1251_p3;
wire   [5:0] select_ln86_60_fu_1264_p3;
wire   [10:0] tmp_data_7_V_6_fu_1269_p3;
wire   [5:0] select_ln86_63_fu_1282_p3;
wire   [10:0] tmp_data_8_V_4_fu_1287_p3;
wire   [5:0] select_ln86_66_fu_1300_p3;
wire   [10:0] tmp_data_9_V_4_fu_1305_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_494;
reg    ap_condition_2771;
reg    ap_condition_383;
reg    ap_condition_2776;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX_2 = 32'd0;
#0 sX_2 = 32'd0;
#0 pY_2 = 32'd0;
#0 sY_2 = 32'd0;
#0 kernel_data_V_4_10 = 6'd0;
#0 kernel_data_V_4_11 = 6'd0;
#0 kernel_data_V_4_12 = 6'd0;
#0 kernel_data_V_4_13 = 6'd0;
#0 kernel_data_V_4_14 = 6'd0;
#0 kernel_data_V_4_15 = 6'd0;
#0 kernel_data_V_4_16 = 6'd0;
#0 kernel_data_V_4_17 = 6'd0;
#0 kernel_data_V_4_18 = 6'd0;
#0 kernel_data_V_4_19 = 6'd0;
#0 kernel_data_V_4_30 = 6'd0;
#0 kernel_data_V_4_31 = 6'd0;
#0 kernel_data_V_4_32 = 6'd0;
#0 kernel_data_V_4_33 = 6'd0;
#0 kernel_data_V_4_34 = 6'd0;
#0 kernel_data_V_4_35 = 6'd0;
#0 kernel_data_V_4_36 = 6'd0;
#0 kernel_data_V_4_37 = 6'd0;
#0 kernel_data_V_4_38 = 6'd0;
#0 kernel_data_V_4_39 = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start_reg = 1'b0;
end

shift_line_buffer_array_ap_fixed_10u_config9_s call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start),
    .ap_done(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_done),
    .ap_idle(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_idle),
    .ap_ready(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_ready),
    .kernel_window_30_V_write(data_V_data_0_V_dout),
    .kernel_window_31_V_write(data_V_data_1_V_dout),
    .kernel_window_32_V_write(data_V_data_2_V_dout),
    .kernel_window_33_V_write(data_V_data_3_V_dout),
    .kernel_window_34_V_write(data_V_data_4_V_dout),
    .kernel_window_35_V_write(data_V_data_5_V_dout),
    .kernel_window_36_V_write(data_V_data_6_V_dout),
    .kernel_window_37_V_write(data_V_data_7_V_dout),
    .kernel_window_38_V_write(data_V_data_8_V_dout),
    .kernel_window_39_V_write(data_V_data_9_V_dout),
    .kernel_window_10_V_read(kernel_data_V_4_10),
    .kernel_window_11_V_read(kernel_data_V_4_11),
    .kernel_window_12_V_read(kernel_data_V_4_12),
    .kernel_window_13_V_read(kernel_data_V_4_13),
    .kernel_window_14_V_read(kernel_data_V_4_14),
    .kernel_window_15_V_read(kernel_data_V_4_15),
    .kernel_window_16_V_read(kernel_data_V_4_16),
    .kernel_window_17_V_read(kernel_data_V_4_17),
    .kernel_window_18_V_read(kernel_data_V_4_18),
    .kernel_window_19_V_read(kernel_data_V_4_19),
    .kernel_window_30_V_read(kernel_data_V_4_30),
    .kernel_window_31_V_read(kernel_data_V_4_31),
    .kernel_window_32_V_read(kernel_data_V_4_32),
    .kernel_window_33_V_read(kernel_data_V_4_33),
    .kernel_window_34_V_read(kernel_data_V_4_34),
    .kernel_window_35_V_read(kernel_data_V_4_35),
    .kernel_window_36_V_read(kernel_data_V_4_36),
    .kernel_window_37_V_read(kernel_data_V_4_37),
    .kernel_window_38_V_read(kernel_data_V_4_38),
    .kernel_window_39_V_read(kernel_data_V_4_39),
    .ap_return_0(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_0),
    .ap_return_1(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_1),
    .ap_return_2(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_2),
    .ap_return_3(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_3),
    .ap_return_4(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_4),
    .ap_return_5(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_5),
    .ap_return_6(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_6),
    .ap_return_7(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_7),
    .ap_return_8(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_8),
    .ap_return_9(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_9),
    .ap_return_10(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_10),
    .ap_return_11(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_11),
    .ap_return_12(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_12),
    .ap_return_13(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_13),
    .ap_return_14(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_14),
    .ap_return_15(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_15),
    .ap_return_16(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_16),
    .ap_return_17(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_17),
    .ap_return_18(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_18),
    .ap_return_19(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_19),
    .ap_return_20(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_20),
    .ap_return_21(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_21),
    .ap_return_22(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_22),
    .ap_return_23(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_23),
    .ap_return_24(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_24),
    .ap_return_25(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_25),
    .ap_return_26(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_26),
    .ap_return_27(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_27),
    .ap_return_28(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_28),
    .ap_return_29(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_29),
    .ap_return_30(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_30),
    .ap_return_31(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_31),
    .ap_return_32(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_32),
    .ap_return_33(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_33),
    .ap_return_34(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_34),
    .ap_return_35(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_35),
    .ap_return_36(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_36),
    .ap_return_37(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_37),
    .ap_return_38(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_38),
    .ap_return_39(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_39),
    .ap_ce(call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_fu_296_p2 == 1'd0))) begin
            call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start_reg <= 1'b1;
        end else if ((call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_ready == 1'b1)) begin
            call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln207_fu_1100_p2 == 1'd1) & (icmp_ln203_fu_1056_p2 == 1'd1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_231 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_231 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_231;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        indvar_flatten_reg_220 <= add_ln233_reg_1333;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_220 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_494)) begin
        if ((icmp_ln203_fu_1056_p2 == 1'd1)) begin
            pX_2 <= 32'd0;
        end else if ((icmp_ln203_fu_1056_p2 == 1'd0)) begin
            pX_2 <= add_ln216_fu_1062_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2771)) begin
        if ((icmp_ln207_fu_1100_p2 == 1'd1)) begin
            pY_2 <= 32'd0;
        end else if ((icmp_ln207_fu_1100_p2 == 1'd0)) begin
            pY_2 <= add_ln211_fu_1106_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_2776)) begin
            sX_2 <= select_ln218_reg_1736;
        end else if ((1'b1 == ap_condition_383)) begin
            sX_2 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln233_reg_1333 <= add_ln233_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln233_reg_1329 == 1'd0))) begin
        and_ln185_6_reg_1578 <= and_ln185_6_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln185_6_fu_790_p2))) begin
        icmp_ln1496_39_reg_1592 <= icmp_ln1496_39_fu_816_p2;
        icmp_ln1496_42_reg_1607 <= icmp_ln1496_42_fu_842_p2;
        icmp_ln1496_45_reg_1622 <= icmp_ln1496_45_fu_868_p2;
        icmp_ln1496_48_reg_1637 <= icmp_ln1496_48_fu_894_p2;
        icmp_ln1496_51_reg_1652 <= icmp_ln1496_51_fu_920_p2;
        icmp_ln1496_54_reg_1667 <= icmp_ln1496_54_fu_946_p2;
        icmp_ln1496_57_reg_1682 <= icmp_ln1496_57_fu_972_p2;
        icmp_ln1496_60_reg_1697 <= icmp_ln1496_60_fu_998_p2;
        icmp_ln1496_63_reg_1712 <= icmp_ln1496_63_fu_1024_p2;
        icmp_ln1496_66_reg_1727 <= icmp_ln1496_66_fu_1050_p2;
        select_ln86_38_reg_1587 <= select_ln86_38_fu_810_p3;
        select_ln86_40_reg_1597 <= select_ln86_40_fu_826_p3;
        select_ln86_41_reg_1602 <= select_ln86_41_fu_836_p3;
        select_ln86_43_reg_1612 <= select_ln86_43_fu_852_p3;
        select_ln86_44_reg_1617 <= select_ln86_44_fu_862_p3;
        select_ln86_46_reg_1627 <= select_ln86_46_fu_878_p3;
        select_ln86_47_reg_1632 <= select_ln86_47_fu_888_p3;
        select_ln86_49_reg_1642 <= select_ln86_49_fu_904_p3;
        select_ln86_50_reg_1647 <= select_ln86_50_fu_914_p3;
        select_ln86_52_reg_1657 <= select_ln86_52_fu_930_p3;
        select_ln86_53_reg_1662 <= select_ln86_53_fu_940_p3;
        select_ln86_55_reg_1672 <= select_ln86_55_fu_956_p3;
        select_ln86_56_reg_1677 <= select_ln86_56_fu_966_p3;
        select_ln86_58_reg_1687 <= select_ln86_58_fu_982_p3;
        select_ln86_59_reg_1692 <= select_ln86_59_fu_992_p3;
        select_ln86_61_reg_1702 <= select_ln86_61_fu_1008_p3;
        select_ln86_62_reg_1707 <= select_ln86_62_fu_1018_p3;
        select_ln86_64_reg_1717 <= select_ln86_64_fu_1034_p3;
        select_ln86_65_reg_1722 <= select_ln86_65_fu_1044_p3;
        select_ln86_reg_1582 <= select_ln86_fu_800_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln203_reg_1732 <= icmp_ln203_fu_1056_p2;
        icmp_ln233_reg_1329 <= icmp_ln233_fu_296_p2;
        icmp_ln233_reg_1329_pp0_iter1_reg <= icmp_ln233_reg_1329;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln203_fu_1056_p2 == 1'd1))) begin
        icmp_ln207_reg_1741 <= icmp_ln207_fu_1100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        kernel_data_V_4_10 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_20;
        kernel_data_V_4_11 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_21;
        kernel_data_V_4_12 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_22;
        kernel_data_V_4_13 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_23;
        kernel_data_V_4_14 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_24;
        kernel_data_V_4_15 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_25;
        kernel_data_V_4_16 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_26;
        kernel_data_V_4_17 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_27;
        kernel_data_V_4_18 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_28;
        kernel_data_V_4_19 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_29;
        kernel_data_V_4_30 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_30;
        kernel_data_V_4_31 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_31;
        kernel_data_V_4_32 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_32;
        kernel_data_V_4_33 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_33;
        kernel_data_V_4_34 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_34;
        kernel_data_V_4_35 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_35;
        kernel_data_V_4_36 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_36;
        kernel_data_V_4_37 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_37;
        kernel_data_V_4_38 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_38;
        kernel_data_V_4_39 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_39;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        pool_window_0_V_12_reg_1398 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_9;
        pool_window_0_V_1_reg_1404 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_8;
        pool_window_0_V_2_reg_1410 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_7;
        pool_window_0_V_3_reg_1416 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_6;
        pool_window_0_V_4_reg_1422 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_5;
        pool_window_0_V_5_reg_1428 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_4;
        pool_window_0_V_6_reg_1434 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_3;
        pool_window_0_V_7_reg_1440 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_2;
        pool_window_0_V_8_reg_1452 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_0;
        pool_window_0_V_reg_1446 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_1;
        pool_window_1_V_12_reg_1458 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_20;
        pool_window_1_V_1_reg_1470 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_22;
        pool_window_1_V_2_reg_1476 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_23;
        pool_window_1_V_3_reg_1482 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_24;
        pool_window_1_V_4_reg_1488 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_25;
        pool_window_1_V_5_reg_1494 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_26;
        pool_window_1_V_6_reg_1500 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_27;
        pool_window_1_V_7_reg_1506 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_28;
        pool_window_1_V_8_reg_1512 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_29;
        pool_window_1_V_reg_1464 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_21;
        pool_window_2_V_12_reg_1338 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_19;
        pool_window_2_V_1_reg_1344 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_18;
        pool_window_2_V_2_reg_1350 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_17;
        pool_window_2_V_3_reg_1356 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_16;
        pool_window_2_V_4_reg_1362 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_15;
        pool_window_2_V_5_reg_1368 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_14;
        pool_window_2_V_6_reg_1374 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_13;
        pool_window_2_V_7_reg_1380 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_12;
        pool_window_2_V_8_reg_1392 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_10;
        pool_window_2_V_reg_1386 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_11;
        pool_window_3_V_12_reg_1518 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_30;
        pool_window_3_V_1_reg_1530 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_32;
        pool_window_3_V_2_reg_1536 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_33;
        pool_window_3_V_3_reg_1542 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_34;
        pool_window_3_V_4_reg_1548 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_35;
        pool_window_3_V_5_reg_1554 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_36;
        pool_window_3_V_6_reg_1560 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_37;
        pool_window_3_V_7_reg_1566 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_38;
        pool_window_3_V_8_reg_1572 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_39;
        pool_window_3_V_reg_1524 <= call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_return_31;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln203_reg_1732 == 1'd1))) begin
        sY_2 <= ap_phi_mux_storemerge_i_i_phi_fu_235_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln203_fu_1056_p2 == 1'd1) & (icmp_ln207_fu_1100_p2 == 1'd0) & (icmp_ln233_reg_1329 == 1'd0))) begin
        select_ln213_reg_1745 <= select_ln213_fu_1124_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln203_fu_1056_p2 == 1'd0))) begin
        select_ln218_reg_1736 <= select_ln218_fu_1080_p3;
    end
end

always @ (*) begin
    if ((icmp_ln233_fu_296_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_224_p4 = add_ln233_reg_1333;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_224_p4 = indvar_flatten_reg_220;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln203_reg_1732 == 1'd1) & (icmp_ln207_reg_1741 == 1'd0) & (icmp_ln233_reg_1329_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_235_p4 = select_ln213_reg_1745;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_235_p4 = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_231;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp63) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_ce = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1329 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_6_reg_1578))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_fu_296_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_fu_296_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln211_fu_1106_p2 = (pY_2 + 32'd1);

assign add_ln213_fu_1118_p2 = (sY_2 + 32'd1);

assign add_ln216_fu_1062_p2 = (pX_2 + 32'd1);

assign add_ln218_fu_1074_p2 = (sX_2 + 32'd1);

assign add_ln233_fu_302_p2 = (ap_phi_mux_indvar_flatten_phi_fu_224_p4 + 12'd1);

assign and_ln185_5_fu_784_p2 = (icmp_ln185_9_fu_772_p2 & icmp_ln185_8_fu_762_p2);

assign and_ln185_6_fu_790_p2 = (and_ln185_fu_778_p2 & and_ln185_5_fu_784_p2);

assign and_ln185_fu_778_p2 = (icmp_ln185_fu_742_p2 & icmp_ln185_7_fu_752_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((io_acc_block_signal_op239 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_6_reg_1578)) | ((io_acc_block_signal_op32 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1329 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((io_acc_block_signal_op239 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_6_reg_1578)) | ((io_acc_block_signal_op32 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1329 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp63 = (((io_acc_block_signal_op239 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_6_reg_1578)) | ((io_acc_block_signal_op32 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1329 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((io_acc_block_signal_op239 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_6_reg_1578)) | ((io_acc_block_signal_op32 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1329 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((io_acc_block_signal_op32 == 1'b0) & (icmp_ln233_reg_1329 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0_ignore_call36 = ((io_acc_block_signal_op32 == 1'b0) & (icmp_ln233_reg_1329 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((io_acc_block_signal_op239 == 1'b0) & (1'd1 == and_ln185_6_reg_1578));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1_ignore_call36 = ((io_acc_block_signal_op239 == 1'b0) & (1'd1 == and_ln185_6_reg_1578));
end

always @ (*) begin
    ap_condition_2771 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln203_fu_1056_p2 == 1'd1) & (icmp_ln233_reg_1329 == 1'd0));
end

always @ (*) begin
    ap_condition_2776 = ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln203_reg_1732 == 1'd0));
end

always @ (*) begin
    ap_condition_383 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln203_fu_1056_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_494 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_231 = 'bx;

assign ap_ready = internal_ap_ready;

assign call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start = call_ret_shift_line_buffer_array_ap_fixed_10u_config9_s_fu_242_ap_start_reg;

assign icmp_ln1496_38_fu_806_p2 = (($signed(pool_window_2_V_8_reg_1392) < $signed(pool_window_3_V_12_reg_1518)) ? 1'b1 : 1'b0);

assign icmp_ln1496_39_fu_816_p2 = (($signed(select_ln86_fu_800_p3) < $signed(select_ln86_38_fu_810_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_40_fu_822_p2 = (($signed(pool_window_0_V_reg_1446) < $signed(pool_window_1_V_reg_1464)) ? 1'b1 : 1'b0);

assign icmp_ln1496_41_fu_832_p2 = (($signed(pool_window_2_V_reg_1386) < $signed(pool_window_3_V_reg_1524)) ? 1'b1 : 1'b0);

assign icmp_ln1496_42_fu_842_p2 = (($signed(select_ln86_40_fu_826_p3) < $signed(select_ln86_41_fu_836_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_43_fu_848_p2 = (($signed(pool_window_0_V_7_reg_1440) < $signed(pool_window_1_V_1_reg_1470)) ? 1'b1 : 1'b0);

assign icmp_ln1496_44_fu_858_p2 = (($signed(pool_window_2_V_7_reg_1380) < $signed(pool_window_3_V_1_reg_1530)) ? 1'b1 : 1'b0);

assign icmp_ln1496_45_fu_868_p2 = (($signed(select_ln86_43_fu_852_p3) < $signed(select_ln86_44_fu_862_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_46_fu_874_p2 = (($signed(pool_window_0_V_6_reg_1434) < $signed(pool_window_1_V_2_reg_1476)) ? 1'b1 : 1'b0);

assign icmp_ln1496_47_fu_884_p2 = (($signed(pool_window_2_V_6_reg_1374) < $signed(pool_window_3_V_2_reg_1536)) ? 1'b1 : 1'b0);

assign icmp_ln1496_48_fu_894_p2 = (($signed(select_ln86_46_fu_878_p3) < $signed(select_ln86_47_fu_888_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_49_fu_900_p2 = (($signed(pool_window_0_V_5_reg_1428) < $signed(pool_window_1_V_3_reg_1482)) ? 1'b1 : 1'b0);

assign icmp_ln1496_50_fu_910_p2 = (($signed(pool_window_2_V_5_reg_1368) < $signed(pool_window_3_V_3_reg_1542)) ? 1'b1 : 1'b0);

assign icmp_ln1496_51_fu_920_p2 = (($signed(select_ln86_49_fu_904_p3) < $signed(select_ln86_50_fu_914_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_52_fu_926_p2 = (($signed(pool_window_0_V_4_reg_1422) < $signed(pool_window_1_V_4_reg_1488)) ? 1'b1 : 1'b0);

assign icmp_ln1496_53_fu_936_p2 = (($signed(pool_window_2_V_4_reg_1362) < $signed(pool_window_3_V_4_reg_1548)) ? 1'b1 : 1'b0);

assign icmp_ln1496_54_fu_946_p2 = (($signed(select_ln86_52_fu_930_p3) < $signed(select_ln86_53_fu_940_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_55_fu_952_p2 = (($signed(pool_window_0_V_3_reg_1416) < $signed(pool_window_1_V_5_reg_1494)) ? 1'b1 : 1'b0);

assign icmp_ln1496_56_fu_962_p2 = (($signed(pool_window_2_V_3_reg_1356) < $signed(pool_window_3_V_5_reg_1554)) ? 1'b1 : 1'b0);

assign icmp_ln1496_57_fu_972_p2 = (($signed(select_ln86_55_fu_956_p3) < $signed(select_ln86_56_fu_966_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_58_fu_978_p2 = (($signed(pool_window_0_V_2_reg_1410) < $signed(pool_window_1_V_6_reg_1500)) ? 1'b1 : 1'b0);

assign icmp_ln1496_59_fu_988_p2 = (($signed(pool_window_2_V_2_reg_1350) < $signed(pool_window_3_V_6_reg_1560)) ? 1'b1 : 1'b0);

assign icmp_ln1496_60_fu_998_p2 = (($signed(select_ln86_58_fu_982_p3) < $signed(select_ln86_59_fu_992_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_61_fu_1004_p2 = (($signed(pool_window_0_V_1_reg_1404) < $signed(pool_window_1_V_7_reg_1506)) ? 1'b1 : 1'b0);

assign icmp_ln1496_62_fu_1014_p2 = (($signed(pool_window_2_V_1_reg_1344) < $signed(pool_window_3_V_7_reg_1566)) ? 1'b1 : 1'b0);

assign icmp_ln1496_63_fu_1024_p2 = (($signed(select_ln86_61_fu_1008_p3) < $signed(select_ln86_62_fu_1018_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_64_fu_1030_p2 = (($signed(pool_window_0_V_12_reg_1398) < $signed(pool_window_1_V_8_reg_1512)) ? 1'b1 : 1'b0);

assign icmp_ln1496_65_fu_1040_p2 = (($signed(pool_window_2_V_12_reg_1338) < $signed(pool_window_3_V_8_reg_1572)) ? 1'b1 : 1'b0);

assign icmp_ln1496_66_fu_1050_p2 = (($signed(select_ln86_64_fu_1034_p3) < $signed(select_ln86_65_fu_1044_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_796_p2 = (($signed(pool_window_0_V_8_reg_1452) < $signed(pool_window_1_V_12_reg_1458)) ? 1'b1 : 1'b0);

assign icmp_ln185_7_fu_752_p2 = ((sY_2 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln185_8_fu_762_p2 = (($signed(pY_2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln185_9_fu_772_p2 = (($signed(pX_2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_742_p2 = ((sX_2 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_1056_p2 = ((pX_2 == 32'd7) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_1100_p2 = ((pY_2 == 32'd255) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_296_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_224_p4 == 12'd2048) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op239 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op32 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = $signed(tmp_data_0_V_8_fu_1143_p3);

assign res_V_data_1_V_din = $signed(tmp_data_1_V_8_fu_1161_p3);

assign res_V_data_2_V_din = $signed(tmp_data_2_V_8_fu_1179_p3);

assign res_V_data_3_V_din = $signed(tmp_data_3_V_7_fu_1197_p3);

assign res_V_data_4_V_din = $signed(tmp_data_4_V_7_fu_1215_p3);

assign res_V_data_5_V_din = $signed(tmp_data_5_V_6_fu_1233_p3);

assign res_V_data_6_V_din = $signed(tmp_data_6_V_6_fu_1251_p3);

assign res_V_data_7_V_din = $signed(tmp_data_7_V_6_fu_1269_p3);

assign res_V_data_8_V_din = $signed(tmp_data_8_V_4_fu_1287_p3);

assign res_V_data_9_V_din = $signed(tmp_data_9_V_4_fu_1305_p3);

assign select_ln213_fu_1124_p3 = ((icmp_ln185_7_fu_752_p2[0:0] === 1'b1) ? 32'd0 : add_ln213_fu_1118_p2);

assign select_ln218_fu_1080_p3 = ((icmp_ln185_fu_742_p2[0:0] === 1'b1) ? 32'd0 : add_ln218_fu_1074_p2);

assign select_ln86_38_fu_810_p3 = ((icmp_ln1496_38_fu_806_p2[0:0] === 1'b1) ? pool_window_3_V_12_reg_1518 : pool_window_2_V_8_reg_1392);

assign select_ln86_39_fu_1138_p3 = ((icmp_ln1496_39_reg_1592[0:0] === 1'b1) ? select_ln86_38_reg_1587 : select_ln86_reg_1582);

assign select_ln86_40_fu_826_p3 = ((icmp_ln1496_40_fu_822_p2[0:0] === 1'b1) ? pool_window_1_V_reg_1464 : pool_window_0_V_reg_1446);

assign select_ln86_41_fu_836_p3 = ((icmp_ln1496_41_fu_832_p2[0:0] === 1'b1) ? pool_window_3_V_reg_1524 : pool_window_2_V_reg_1386);

assign select_ln86_42_fu_1156_p3 = ((icmp_ln1496_42_reg_1607[0:0] === 1'b1) ? select_ln86_41_reg_1602 : select_ln86_40_reg_1597);

assign select_ln86_43_fu_852_p3 = ((icmp_ln1496_43_fu_848_p2[0:0] === 1'b1) ? pool_window_1_V_1_reg_1470 : pool_window_0_V_7_reg_1440);

assign select_ln86_44_fu_862_p3 = ((icmp_ln1496_44_fu_858_p2[0:0] === 1'b1) ? pool_window_3_V_1_reg_1530 : pool_window_2_V_7_reg_1380);

assign select_ln86_45_fu_1174_p3 = ((icmp_ln1496_45_reg_1622[0:0] === 1'b1) ? select_ln86_44_reg_1617 : select_ln86_43_reg_1612);

assign select_ln86_46_fu_878_p3 = ((icmp_ln1496_46_fu_874_p2[0:0] === 1'b1) ? pool_window_1_V_2_reg_1476 : pool_window_0_V_6_reg_1434);

assign select_ln86_47_fu_888_p3 = ((icmp_ln1496_47_fu_884_p2[0:0] === 1'b1) ? pool_window_3_V_2_reg_1536 : pool_window_2_V_6_reg_1374);

assign select_ln86_48_fu_1192_p3 = ((icmp_ln1496_48_reg_1637[0:0] === 1'b1) ? select_ln86_47_reg_1632 : select_ln86_46_reg_1627);

assign select_ln86_49_fu_904_p3 = ((icmp_ln1496_49_fu_900_p2[0:0] === 1'b1) ? pool_window_1_V_3_reg_1482 : pool_window_0_V_5_reg_1428);

assign select_ln86_50_fu_914_p3 = ((icmp_ln1496_50_fu_910_p2[0:0] === 1'b1) ? pool_window_3_V_3_reg_1542 : pool_window_2_V_5_reg_1368);

assign select_ln86_51_fu_1210_p3 = ((icmp_ln1496_51_reg_1652[0:0] === 1'b1) ? select_ln86_50_reg_1647 : select_ln86_49_reg_1642);

assign select_ln86_52_fu_930_p3 = ((icmp_ln1496_52_fu_926_p2[0:0] === 1'b1) ? pool_window_1_V_4_reg_1488 : pool_window_0_V_4_reg_1422);

assign select_ln86_53_fu_940_p3 = ((icmp_ln1496_53_fu_936_p2[0:0] === 1'b1) ? pool_window_3_V_4_reg_1548 : pool_window_2_V_4_reg_1362);

assign select_ln86_54_fu_1228_p3 = ((icmp_ln1496_54_reg_1667[0:0] === 1'b1) ? select_ln86_53_reg_1662 : select_ln86_52_reg_1657);

assign select_ln86_55_fu_956_p3 = ((icmp_ln1496_55_fu_952_p2[0:0] === 1'b1) ? pool_window_1_V_5_reg_1494 : pool_window_0_V_3_reg_1416);

assign select_ln86_56_fu_966_p3 = ((icmp_ln1496_56_fu_962_p2[0:0] === 1'b1) ? pool_window_3_V_5_reg_1554 : pool_window_2_V_3_reg_1356);

assign select_ln86_57_fu_1246_p3 = ((icmp_ln1496_57_reg_1682[0:0] === 1'b1) ? select_ln86_56_reg_1677 : select_ln86_55_reg_1672);

assign select_ln86_58_fu_982_p3 = ((icmp_ln1496_58_fu_978_p2[0:0] === 1'b1) ? pool_window_1_V_6_reg_1500 : pool_window_0_V_2_reg_1410);

assign select_ln86_59_fu_992_p3 = ((icmp_ln1496_59_fu_988_p2[0:0] === 1'b1) ? pool_window_3_V_6_reg_1560 : pool_window_2_V_2_reg_1350);

assign select_ln86_60_fu_1264_p3 = ((icmp_ln1496_60_reg_1697[0:0] === 1'b1) ? select_ln86_59_reg_1692 : select_ln86_58_reg_1687);

assign select_ln86_61_fu_1008_p3 = ((icmp_ln1496_61_fu_1004_p2[0:0] === 1'b1) ? pool_window_1_V_7_reg_1506 : pool_window_0_V_1_reg_1404);

assign select_ln86_62_fu_1018_p3 = ((icmp_ln1496_62_fu_1014_p2[0:0] === 1'b1) ? pool_window_3_V_7_reg_1566 : pool_window_2_V_1_reg_1344);

assign select_ln86_63_fu_1282_p3 = ((icmp_ln1496_63_reg_1712[0:0] === 1'b1) ? select_ln86_62_reg_1707 : select_ln86_61_reg_1702);

assign select_ln86_64_fu_1034_p3 = ((icmp_ln1496_64_fu_1030_p2[0:0] === 1'b1) ? pool_window_1_V_8_reg_1512 : pool_window_0_V_12_reg_1398);

assign select_ln86_65_fu_1044_p3 = ((icmp_ln1496_65_fu_1040_p2[0:0] === 1'b1) ? pool_window_3_V_8_reg_1572 : pool_window_2_V_12_reg_1338);

assign select_ln86_66_fu_1300_p3 = ((icmp_ln1496_66_reg_1727[0:0] === 1'b1) ? select_ln86_65_reg_1722 : select_ln86_64_reg_1717);

assign select_ln86_fu_800_p3 = ((icmp_ln1496_fu_796_p2[0:0] === 1'b1) ? pool_window_1_V_12_reg_1458 : pool_window_0_V_8_reg_1452);

assign start_out = real_start;

assign tmp_data_0_V_8_fu_1143_p3 = {{select_ln86_39_fu_1138_p3}, {5'd0}};

assign tmp_data_1_V_8_fu_1161_p3 = {{select_ln86_42_fu_1156_p3}, {5'd0}};

assign tmp_data_2_V_8_fu_1179_p3 = {{select_ln86_45_fu_1174_p3}, {5'd0}};

assign tmp_data_3_V_7_fu_1197_p3 = {{select_ln86_48_fu_1192_p3}, {5'd0}};

assign tmp_data_4_V_7_fu_1215_p3 = {{select_ln86_51_fu_1210_p3}, {5'd0}};

assign tmp_data_5_V_6_fu_1233_p3 = {{select_ln86_54_fu_1228_p3}, {5'd0}};

assign tmp_data_6_V_6_fu_1251_p3 = {{select_ln86_57_fu_1246_p3}, {5'd0}};

assign tmp_data_7_V_6_fu_1269_p3 = {{select_ln86_60_fu_1264_p3}, {5'd0}};

assign tmp_data_8_V_4_fu_1287_p3 = {{select_ln86_63_fu_1282_p3}, {5'd0}};

assign tmp_data_9_V_4_fu_1305_p3 = {{select_ln86_66_fu_1300_p3}, {5'd0}};

endmodule //pooling2d_cl_array_array_ap_fixed_10u_config9_s
