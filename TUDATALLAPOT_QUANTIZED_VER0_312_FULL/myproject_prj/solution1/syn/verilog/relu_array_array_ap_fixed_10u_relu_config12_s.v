// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_fixed_10u_relu_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [13:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [13:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [13:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [13:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [13:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [13:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [13:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [13:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [13:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [13:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [5:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [5:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [5:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [5:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [5:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [5:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln60_reg_1671;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln60_reg_1671_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg   [9:0] i_0_reg_168;
wire   [0:0] icmp_ln60_fu_179_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op33;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op267;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln60_reg_1671_pp0_iter1_reg;
wire   [9:0] i_fu_185_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [13:0] tmp_data_V_48_0_reg_1680;
reg   [13:0] tmp_data_V_48_1_reg_1686;
reg   [13:0] tmp_data_V_48_2_reg_1692;
reg   [13:0] tmp_data_V_48_3_reg_1698;
reg   [13:0] tmp_data_V_48_4_reg_1704;
reg   [13:0] tmp_data_V_48_5_reg_1710;
reg   [13:0] tmp_data_V_48_6_reg_1716;
reg   [13:0] tmp_data_V_48_7_reg_1722;
reg   [13:0] tmp_data_V_48_8_reg_1728;
reg   [13:0] tmp_data_V_48_9_reg_1734;
reg   [5:0] trunc_ln_reg_1740;
reg   [0:0] tmp_210_reg_1745;
reg   [4:0] trunc_ln415_s_reg_1751;
wire   [0:0] icmp_ln879_fu_269_p2;
reg   [0:0] icmp_ln879_reg_1756;
wire   [0:0] icmp_ln768_fu_275_p2;
reg   [0:0] icmp_ln768_reg_1761;
reg   [5:0] trunc_ln708_s_reg_1766;
reg   [0:0] tmp_214_reg_1771;
reg   [4:0] trunc_ln415_45_reg_1777;
wire   [0:0] icmp_ln879_47_fu_319_p2;
reg   [0:0] icmp_ln879_47_reg_1782;
wire   [0:0] icmp_ln768_47_fu_325_p2;
reg   [0:0] icmp_ln768_47_reg_1787;
reg   [5:0] trunc_ln708_52_reg_1792;
reg   [0:0] tmp_218_reg_1797;
reg   [4:0] trunc_ln415_46_reg_1803;
wire   [0:0] icmp_ln879_48_fu_369_p2;
reg   [0:0] icmp_ln879_48_reg_1808;
wire   [0:0] icmp_ln768_48_fu_375_p2;
reg   [0:0] icmp_ln768_48_reg_1813;
reg   [5:0] trunc_ln708_53_reg_1818;
reg   [0:0] tmp_222_reg_1823;
reg   [4:0] trunc_ln415_47_reg_1829;
wire   [0:0] icmp_ln879_49_fu_419_p2;
reg   [0:0] icmp_ln879_49_reg_1834;
wire   [0:0] icmp_ln768_49_fu_425_p2;
reg   [0:0] icmp_ln768_49_reg_1839;
reg   [5:0] trunc_ln708_54_reg_1844;
reg   [0:0] tmp_226_reg_1849;
reg   [4:0] trunc_ln415_48_reg_1855;
wire   [0:0] icmp_ln879_50_fu_469_p2;
reg   [0:0] icmp_ln879_50_reg_1860;
wire   [0:0] icmp_ln768_50_fu_475_p2;
reg   [0:0] icmp_ln768_50_reg_1865;
reg   [5:0] trunc_ln708_55_reg_1870;
reg   [0:0] tmp_230_reg_1875;
reg   [4:0] trunc_ln415_49_reg_1881;
wire   [0:0] icmp_ln879_51_fu_519_p2;
reg   [0:0] icmp_ln879_51_reg_1886;
wire   [0:0] icmp_ln768_51_fu_525_p2;
reg   [0:0] icmp_ln768_51_reg_1891;
reg   [5:0] trunc_ln708_56_reg_1896;
reg   [0:0] tmp_234_reg_1901;
reg   [4:0] trunc_ln415_50_reg_1907;
wire   [0:0] icmp_ln879_52_fu_569_p2;
reg   [0:0] icmp_ln879_52_reg_1912;
wire   [0:0] icmp_ln768_52_fu_575_p2;
reg   [0:0] icmp_ln768_52_reg_1917;
reg   [5:0] trunc_ln708_57_reg_1922;
reg   [0:0] tmp_238_reg_1927;
reg   [4:0] trunc_ln415_51_reg_1933;
wire   [0:0] icmp_ln879_53_fu_619_p2;
reg   [0:0] icmp_ln879_53_reg_1938;
wire   [0:0] icmp_ln768_53_fu_625_p2;
reg   [0:0] icmp_ln768_53_reg_1943;
reg   [5:0] trunc_ln708_58_reg_1948;
reg   [0:0] tmp_242_reg_1953;
reg   [4:0] trunc_ln415_52_reg_1959;
wire   [0:0] icmp_ln879_54_fu_669_p2;
reg   [0:0] icmp_ln879_54_reg_1964;
wire   [0:0] icmp_ln768_54_fu_675_p2;
reg   [0:0] icmp_ln768_54_reg_1969;
reg   [5:0] trunc_ln708_59_reg_1974;
reg   [0:0] tmp_246_reg_1979;
reg   [4:0] trunc_ln415_53_reg_1985;
wire   [0:0] icmp_ln879_55_fu_719_p2;
reg   [0:0] icmp_ln879_55_reg_1990;
wire   [0:0] icmp_ln768_55_fu_725_p2;
reg   [0:0] icmp_ln768_55_reg_1995;
wire   [4:0] tmp_data_0_V_fu_813_p3;
reg   [4:0] tmp_data_0_V_reg_2000;
wire   [4:0] tmp_data_1_V_fu_903_p3;
reg   [4:0] tmp_data_1_V_reg_2005;
wire   [4:0] tmp_data_2_V_fu_993_p3;
reg   [4:0] tmp_data_2_V_reg_2010;
wire   [4:0] tmp_data_3_V_fu_1083_p3;
reg   [4:0] tmp_data_3_V_reg_2015;
wire   [4:0] tmp_data_4_V_fu_1173_p3;
reg   [4:0] tmp_data_4_V_reg_2020;
wire   [4:0] tmp_data_5_V_fu_1263_p3;
reg   [4:0] tmp_data_5_V_reg_2025;
wire   [4:0] tmp_data_6_V_fu_1353_p3;
reg   [4:0] tmp_data_6_V_reg_2030;
wire   [4:0] tmp_data_7_V_fu_1443_p3;
reg   [4:0] tmp_data_7_V_reg_2035;
wire   [4:0] tmp_data_8_V_fu_1533_p3;
reg   [4:0] tmp_data_8_V_reg_2040;
wire   [4:0] tmp_data_9_V_fu_1623_p3;
reg   [4:0] tmp_data_9_V_reg_2045;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] p_Result_s_fu_259_p4;
wire   [4:0] p_Result_27_1_fu_309_p4;
wire   [4:0] p_Result_27_2_fu_359_p4;
wire   [4:0] p_Result_27_3_fu_409_p4;
wire   [4:0] p_Result_27_4_fu_459_p4;
wire   [4:0] p_Result_27_5_fu_509_p4;
wire   [4:0] p_Result_27_6_fu_559_p4;
wire   [4:0] p_Result_27_7_fu_609_p4;
wire   [4:0] p_Result_27_8_fu_659_p4;
wire   [4:0] p_Result_27_9_fu_709_p4;
wire   [5:0] zext_ln415_fu_743_p1;
wire   [4:0] zext_ln415_65_fu_746_p1;
wire   [5:0] add_ln415_fu_749_p2;
wire   [0:0] tmp_211_fu_759_p3;
wire   [0:0] tmp_209_fu_736_p3;
wire   [0:0] xor_ln416_fu_767_p2;
wire   [0:0] and_ln416_fu_773_p2;
wire   [0:0] select_ln777_fu_787_p3;
wire   [0:0] tmp_212_fu_779_p3;
wire   [0:0] xor_ln785_fu_793_p2;
wire   [0:0] or_ln340_fu_799_p2;
wire   [4:0] add_ln416_fu_754_p2;
wire   [0:0] icmp_ln1494_fu_731_p2;
wire   [4:0] select_ln340_fu_805_p3;
wire   [5:0] zext_ln415_47_fu_833_p1;
wire   [4:0] zext_ln415_66_fu_836_p1;
wire   [5:0] add_ln415_47_fu_839_p2;
wire   [0:0] tmp_215_fu_849_p3;
wire   [0:0] tmp_213_fu_826_p3;
wire   [0:0] xor_ln416_47_fu_857_p2;
wire   [0:0] and_ln416_47_fu_863_p2;
wire   [0:0] select_ln777_47_fu_877_p3;
wire   [0:0] tmp_216_fu_869_p3;
wire   [0:0] xor_ln785_1_fu_883_p2;
wire   [0:0] or_ln340_1_fu_889_p2;
wire   [4:0] add_ln416_47_fu_844_p2;
wire   [0:0] icmp_ln1494_1_fu_821_p2;
wire   [4:0] select_ln340_1_fu_895_p3;
wire   [5:0] zext_ln415_48_fu_923_p1;
wire   [4:0] zext_ln415_67_fu_926_p1;
wire   [5:0] add_ln415_48_fu_929_p2;
wire   [0:0] tmp_219_fu_939_p3;
wire   [0:0] tmp_217_fu_916_p3;
wire   [0:0] xor_ln416_48_fu_947_p2;
wire   [0:0] and_ln416_48_fu_953_p2;
wire   [0:0] select_ln777_48_fu_967_p3;
wire   [0:0] tmp_220_fu_959_p3;
wire   [0:0] xor_ln785_2_fu_973_p2;
wire   [0:0] or_ln340_2_fu_979_p2;
wire   [4:0] add_ln416_48_fu_934_p2;
wire   [0:0] icmp_ln1494_2_fu_911_p2;
wire   [4:0] select_ln340_2_fu_985_p3;
wire   [5:0] zext_ln415_49_fu_1013_p1;
wire   [4:0] zext_ln415_68_fu_1016_p1;
wire   [5:0] add_ln415_49_fu_1019_p2;
wire   [0:0] tmp_223_fu_1029_p3;
wire   [0:0] tmp_221_fu_1006_p3;
wire   [0:0] xor_ln416_49_fu_1037_p2;
wire   [0:0] and_ln416_49_fu_1043_p2;
wire   [0:0] select_ln777_49_fu_1057_p3;
wire   [0:0] tmp_224_fu_1049_p3;
wire   [0:0] xor_ln785_3_fu_1063_p2;
wire   [0:0] or_ln340_3_fu_1069_p2;
wire   [4:0] add_ln416_49_fu_1024_p2;
wire   [0:0] icmp_ln1494_3_fu_1001_p2;
wire   [4:0] select_ln340_3_fu_1075_p3;
wire   [5:0] zext_ln415_50_fu_1103_p1;
wire   [4:0] zext_ln415_69_fu_1106_p1;
wire   [5:0] add_ln415_50_fu_1109_p2;
wire   [0:0] tmp_227_fu_1119_p3;
wire   [0:0] tmp_225_fu_1096_p3;
wire   [0:0] xor_ln416_50_fu_1127_p2;
wire   [0:0] and_ln416_50_fu_1133_p2;
wire   [0:0] select_ln777_50_fu_1147_p3;
wire   [0:0] tmp_228_fu_1139_p3;
wire   [0:0] xor_ln785_4_fu_1153_p2;
wire   [0:0] or_ln340_4_fu_1159_p2;
wire   [4:0] add_ln416_50_fu_1114_p2;
wire   [0:0] icmp_ln1494_4_fu_1091_p2;
wire   [4:0] select_ln340_4_fu_1165_p3;
wire   [5:0] zext_ln415_51_fu_1193_p1;
wire   [4:0] zext_ln415_70_fu_1196_p1;
wire   [5:0] add_ln415_51_fu_1199_p2;
wire   [0:0] tmp_231_fu_1209_p3;
wire   [0:0] tmp_229_fu_1186_p3;
wire   [0:0] xor_ln416_51_fu_1217_p2;
wire   [0:0] and_ln416_51_fu_1223_p2;
wire   [0:0] select_ln777_51_fu_1237_p3;
wire   [0:0] tmp_232_fu_1229_p3;
wire   [0:0] xor_ln785_5_fu_1243_p2;
wire   [0:0] or_ln340_5_fu_1249_p2;
wire   [4:0] add_ln416_51_fu_1204_p2;
wire   [0:0] icmp_ln1494_5_fu_1181_p2;
wire   [4:0] select_ln340_5_fu_1255_p3;
wire   [5:0] zext_ln415_52_fu_1283_p1;
wire   [4:0] zext_ln415_71_fu_1286_p1;
wire   [5:0] add_ln415_52_fu_1289_p2;
wire   [0:0] tmp_235_fu_1299_p3;
wire   [0:0] tmp_233_fu_1276_p3;
wire   [0:0] xor_ln416_52_fu_1307_p2;
wire   [0:0] and_ln416_52_fu_1313_p2;
wire   [0:0] select_ln777_52_fu_1327_p3;
wire   [0:0] tmp_236_fu_1319_p3;
wire   [0:0] xor_ln785_6_fu_1333_p2;
wire   [0:0] or_ln340_6_fu_1339_p2;
wire   [4:0] add_ln416_52_fu_1294_p2;
wire   [0:0] icmp_ln1494_6_fu_1271_p2;
wire   [4:0] select_ln340_6_fu_1345_p3;
wire   [5:0] zext_ln415_53_fu_1373_p1;
wire   [4:0] zext_ln415_72_fu_1376_p1;
wire   [5:0] add_ln415_53_fu_1379_p2;
wire   [0:0] tmp_239_fu_1389_p3;
wire   [0:0] tmp_237_fu_1366_p3;
wire   [0:0] xor_ln416_53_fu_1397_p2;
wire   [0:0] and_ln416_53_fu_1403_p2;
wire   [0:0] select_ln777_53_fu_1417_p3;
wire   [0:0] tmp_240_fu_1409_p3;
wire   [0:0] xor_ln785_7_fu_1423_p2;
wire   [0:0] or_ln340_7_fu_1429_p2;
wire   [4:0] add_ln416_53_fu_1384_p2;
wire   [0:0] icmp_ln1494_7_fu_1361_p2;
wire   [4:0] select_ln340_7_fu_1435_p3;
wire   [5:0] zext_ln415_54_fu_1463_p1;
wire   [4:0] zext_ln415_73_fu_1466_p1;
wire   [5:0] add_ln415_54_fu_1469_p2;
wire   [0:0] tmp_243_fu_1479_p3;
wire   [0:0] tmp_241_fu_1456_p3;
wire   [0:0] xor_ln416_54_fu_1487_p2;
wire   [0:0] and_ln416_54_fu_1493_p2;
wire   [0:0] select_ln777_54_fu_1507_p3;
wire   [0:0] tmp_244_fu_1499_p3;
wire   [0:0] xor_ln785_8_fu_1513_p2;
wire   [0:0] or_ln340_8_fu_1519_p2;
wire   [4:0] add_ln416_54_fu_1474_p2;
wire   [0:0] icmp_ln1494_8_fu_1451_p2;
wire   [4:0] select_ln340_8_fu_1525_p3;
wire   [5:0] zext_ln415_55_fu_1553_p1;
wire   [4:0] zext_ln415_74_fu_1556_p1;
wire   [5:0] add_ln415_55_fu_1559_p2;
wire   [0:0] tmp_247_fu_1569_p3;
wire   [0:0] tmp_245_fu_1546_p3;
wire   [0:0] xor_ln416_55_fu_1577_p2;
wire   [0:0] and_ln416_55_fu_1583_p2;
wire   [0:0] select_ln777_55_fu_1597_p3;
wire   [0:0] tmp_248_fu_1589_p3;
wire   [0:0] xor_ln785_9_fu_1603_p2;
wire   [0:0] or_ln340_9_fu_1609_p2;
wire   [4:0] add_ln416_55_fu_1564_p2;
wire   [0:0] icmp_ln1494_9_fu_1541_p2;
wire   [4:0] select_ln340_9_fu_1615_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_fu_179_p2 == 1'd0))) begin
        i_0_reg_168 <= i_fu_185_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_168 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln60_reg_1671 <= icmp_ln60_fu_179_p2;
        icmp_ln60_reg_1671_pp0_iter1_reg <= icmp_ln60_reg_1671;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln60_reg_1671_pp0_iter2_reg <= icmp_ln60_reg_1671_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        icmp_ln768_47_reg_1787 <= icmp_ln768_47_fu_325_p2;
        icmp_ln768_48_reg_1813 <= icmp_ln768_48_fu_375_p2;
        icmp_ln768_49_reg_1839 <= icmp_ln768_49_fu_425_p2;
        icmp_ln768_50_reg_1865 <= icmp_ln768_50_fu_475_p2;
        icmp_ln768_51_reg_1891 <= icmp_ln768_51_fu_525_p2;
        icmp_ln768_52_reg_1917 <= icmp_ln768_52_fu_575_p2;
        icmp_ln768_53_reg_1943 <= icmp_ln768_53_fu_625_p2;
        icmp_ln768_54_reg_1969 <= icmp_ln768_54_fu_675_p2;
        icmp_ln768_55_reg_1995 <= icmp_ln768_55_fu_725_p2;
        icmp_ln768_reg_1761 <= icmp_ln768_fu_275_p2;
        icmp_ln879_47_reg_1782 <= icmp_ln879_47_fu_319_p2;
        icmp_ln879_48_reg_1808 <= icmp_ln879_48_fu_369_p2;
        icmp_ln879_49_reg_1834 <= icmp_ln879_49_fu_419_p2;
        icmp_ln879_50_reg_1860 <= icmp_ln879_50_fu_469_p2;
        icmp_ln879_51_reg_1886 <= icmp_ln879_51_fu_519_p2;
        icmp_ln879_52_reg_1912 <= icmp_ln879_52_fu_569_p2;
        icmp_ln879_53_reg_1938 <= icmp_ln879_53_fu_619_p2;
        icmp_ln879_54_reg_1964 <= icmp_ln879_54_fu_669_p2;
        icmp_ln879_55_reg_1990 <= icmp_ln879_55_fu_719_p2;
        icmp_ln879_reg_1756 <= icmp_ln879_fu_269_p2;
        tmp_210_reg_1745 <= data_V_data_0_V_dout[32'd2];
        tmp_214_reg_1771 <= data_V_data_1_V_dout[32'd2];
        tmp_218_reg_1797 <= data_V_data_2_V_dout[32'd2];
        tmp_222_reg_1823 <= data_V_data_3_V_dout[32'd2];
        tmp_226_reg_1849 <= data_V_data_4_V_dout[32'd2];
        tmp_230_reg_1875 <= data_V_data_5_V_dout[32'd2];
        tmp_234_reg_1901 <= data_V_data_6_V_dout[32'd2];
        tmp_238_reg_1927 <= data_V_data_7_V_dout[32'd2];
        tmp_242_reg_1953 <= data_V_data_8_V_dout[32'd2];
        tmp_246_reg_1979 <= data_V_data_9_V_dout[32'd2];
        tmp_data_V_48_0_reg_1680 <= data_V_data_0_V_dout;
        tmp_data_V_48_1_reg_1686 <= data_V_data_1_V_dout;
        tmp_data_V_48_2_reg_1692 <= data_V_data_2_V_dout;
        tmp_data_V_48_3_reg_1698 <= data_V_data_3_V_dout;
        tmp_data_V_48_4_reg_1704 <= data_V_data_4_V_dout;
        tmp_data_V_48_5_reg_1710 <= data_V_data_5_V_dout;
        tmp_data_V_48_6_reg_1716 <= data_V_data_6_V_dout;
        tmp_data_V_48_7_reg_1722 <= data_V_data_7_V_dout;
        tmp_data_V_48_8_reg_1728 <= data_V_data_8_V_dout;
        tmp_data_V_48_9_reg_1734 <= data_V_data_9_V_dout;
        trunc_ln415_45_reg_1777 <= {{data_V_data_1_V_dout[7:3]}};
        trunc_ln415_46_reg_1803 <= {{data_V_data_2_V_dout[7:3]}};
        trunc_ln415_47_reg_1829 <= {{data_V_data_3_V_dout[7:3]}};
        trunc_ln415_48_reg_1855 <= {{data_V_data_4_V_dout[7:3]}};
        trunc_ln415_49_reg_1881 <= {{data_V_data_5_V_dout[7:3]}};
        trunc_ln415_50_reg_1907 <= {{data_V_data_6_V_dout[7:3]}};
        trunc_ln415_51_reg_1933 <= {{data_V_data_7_V_dout[7:3]}};
        trunc_ln415_52_reg_1959 <= {{data_V_data_8_V_dout[7:3]}};
        trunc_ln415_53_reg_1985 <= {{data_V_data_9_V_dout[7:3]}};
        trunc_ln415_s_reg_1751 <= {{data_V_data_0_V_dout[7:3]}};
        trunc_ln708_52_reg_1792 <= {{data_V_data_2_V_dout[8:3]}};
        trunc_ln708_53_reg_1818 <= {{data_V_data_3_V_dout[8:3]}};
        trunc_ln708_54_reg_1844 <= {{data_V_data_4_V_dout[8:3]}};
        trunc_ln708_55_reg_1870 <= {{data_V_data_5_V_dout[8:3]}};
        trunc_ln708_56_reg_1896 <= {{data_V_data_6_V_dout[8:3]}};
        trunc_ln708_57_reg_1922 <= {{data_V_data_7_V_dout[8:3]}};
        trunc_ln708_58_reg_1948 <= {{data_V_data_8_V_dout[8:3]}};
        trunc_ln708_59_reg_1974 <= {{data_V_data_9_V_dout[8:3]}};
        trunc_ln708_s_reg_1766 <= {{data_V_data_1_V_dout[8:3]}};
        trunc_ln_reg_1740 <= {{data_V_data_0_V_dout[8:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter1_reg == 1'd0))) begin
        tmp_data_0_V_reg_2000 <= tmp_data_0_V_fu_813_p3;
        tmp_data_1_V_reg_2005 <= tmp_data_1_V_fu_903_p3;
        tmp_data_2_V_reg_2010 <= tmp_data_2_V_fu_993_p3;
        tmp_data_3_V_reg_2015 <= tmp_data_3_V_fu_1083_p3;
        tmp_data_4_V_reg_2020 <= tmp_data_4_V_fu_1173_p3;
        tmp_data_5_V_reg_2025 <= tmp_data_5_V_fu_1263_p3;
        tmp_data_6_V_reg_2030 <= tmp_data_6_V_fu_1353_p3;
        tmp_data_7_V_reg_2035 <= tmp_data_7_V_fu_1443_p3;
        tmp_data_8_V_reg_2040 <= tmp_data_8_V_fu_1533_p3;
        tmp_data_9_V_reg_2045 <= tmp_data_9_V_fu_1623_p3;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_179_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1671 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_179_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_179_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_47_fu_839_p2 = (trunc_ln708_s_reg_1766 + zext_ln415_47_fu_833_p1);

assign add_ln415_48_fu_929_p2 = (trunc_ln708_52_reg_1792 + zext_ln415_48_fu_923_p1);

assign add_ln415_49_fu_1019_p2 = (trunc_ln708_53_reg_1818 + zext_ln415_49_fu_1013_p1);

assign add_ln415_50_fu_1109_p2 = (trunc_ln708_54_reg_1844 + zext_ln415_50_fu_1103_p1);

assign add_ln415_51_fu_1199_p2 = (trunc_ln708_55_reg_1870 + zext_ln415_51_fu_1193_p1);

assign add_ln415_52_fu_1289_p2 = (trunc_ln708_56_reg_1896 + zext_ln415_52_fu_1283_p1);

assign add_ln415_53_fu_1379_p2 = (trunc_ln708_57_reg_1922 + zext_ln415_53_fu_1373_p1);

assign add_ln415_54_fu_1469_p2 = (trunc_ln708_58_reg_1948 + zext_ln415_54_fu_1463_p1);

assign add_ln415_55_fu_1559_p2 = (trunc_ln708_59_reg_1974 + zext_ln415_55_fu_1553_p1);

assign add_ln415_fu_749_p2 = (trunc_ln_reg_1740 + zext_ln415_fu_743_p1);

assign add_ln416_47_fu_844_p2 = (trunc_ln415_45_reg_1777 + zext_ln415_66_fu_836_p1);

assign add_ln416_48_fu_934_p2 = (trunc_ln415_46_reg_1803 + zext_ln415_67_fu_926_p1);

assign add_ln416_49_fu_1024_p2 = (trunc_ln415_47_reg_1829 + zext_ln415_68_fu_1016_p1);

assign add_ln416_50_fu_1114_p2 = (trunc_ln415_48_reg_1855 + zext_ln415_69_fu_1106_p1);

assign add_ln416_51_fu_1204_p2 = (trunc_ln415_49_reg_1881 + zext_ln415_70_fu_1196_p1);

assign add_ln416_52_fu_1294_p2 = (trunc_ln415_50_reg_1907 + zext_ln415_71_fu_1286_p1);

assign add_ln416_53_fu_1384_p2 = (trunc_ln415_51_reg_1933 + zext_ln415_72_fu_1376_p1);

assign add_ln416_54_fu_1474_p2 = (trunc_ln415_52_reg_1959 + zext_ln415_73_fu_1466_p1);

assign add_ln416_55_fu_1564_p2 = (trunc_ln415_53_reg_1985 + zext_ln415_74_fu_1556_p1);

assign add_ln416_fu_754_p2 = (trunc_ln415_s_reg_1751 + zext_ln415_65_fu_746_p1);

assign and_ln416_47_fu_863_p2 = (xor_ln416_47_fu_857_p2 & tmp_213_fu_826_p3);

assign and_ln416_48_fu_953_p2 = (xor_ln416_48_fu_947_p2 & tmp_217_fu_916_p3);

assign and_ln416_49_fu_1043_p2 = (xor_ln416_49_fu_1037_p2 & tmp_221_fu_1006_p3);

assign and_ln416_50_fu_1133_p2 = (xor_ln416_50_fu_1127_p2 & tmp_225_fu_1096_p3);

assign and_ln416_51_fu_1223_p2 = (xor_ln416_51_fu_1217_p2 & tmp_229_fu_1186_p3);

assign and_ln416_52_fu_1313_p2 = (xor_ln416_52_fu_1307_p2 & tmp_233_fu_1276_p3);

assign and_ln416_53_fu_1403_p2 = (xor_ln416_53_fu_1397_p2 & tmp_237_fu_1366_p3);

assign and_ln416_54_fu_1493_p2 = (xor_ln416_54_fu_1487_p2 & tmp_241_fu_1456_p3);

assign and_ln416_55_fu_1583_p2 = (xor_ln416_55_fu_1577_p2 & tmp_245_fu_1546_p3);

assign and_ln416_fu_773_p2 = (xor_ln416_fu_767_p2 & tmp_209_fu_736_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op267 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op33 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1671 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op267 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op33 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1671 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op267 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op33 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1671 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op33 == 1'b0) & (icmp_ln60_reg_1671 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op267 == 1'b0) & (icmp_ln60_reg_1671_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_185_p2 = (i_0_reg_168 + 10'd1);

assign icmp_ln1494_1_fu_821_p2 = (($signed(tmp_data_V_48_1_reg_1686) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_911_p2 = (($signed(tmp_data_V_48_2_reg_1692) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1001_p2 = (($signed(tmp_data_V_48_3_reg_1698) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1091_p2 = (($signed(tmp_data_V_48_4_reg_1704) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1181_p2 = (($signed(tmp_data_V_48_5_reg_1710) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1271_p2 = (($signed(tmp_data_V_48_6_reg_1716) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1361_p2 = (($signed(tmp_data_V_48_7_reg_1722) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_1451_p2 = (($signed(tmp_data_V_48_8_reg_1728) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1541_p2 = (($signed(tmp_data_V_48_9_reg_1734) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_731_p2 = (($signed(tmp_data_V_48_0_reg_1680) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_179_p2 = ((i_0_reg_168 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln768_47_fu_325_p2 = ((p_Result_27_1_fu_309_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_48_fu_375_p2 = ((p_Result_27_2_fu_359_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_49_fu_425_p2 = ((p_Result_27_3_fu_409_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_50_fu_475_p2 = ((p_Result_27_4_fu_459_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_51_fu_525_p2 = ((p_Result_27_5_fu_509_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_52_fu_575_p2 = ((p_Result_27_6_fu_559_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_53_fu_625_p2 = ((p_Result_27_7_fu_609_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_54_fu_675_p2 = ((p_Result_27_8_fu_659_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_55_fu_725_p2 = ((p_Result_27_9_fu_709_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_275_p2 = ((p_Result_s_fu_259_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_47_fu_319_p2 = ((p_Result_27_1_fu_309_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_48_fu_369_p2 = ((p_Result_27_2_fu_359_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_49_fu_419_p2 = ((p_Result_27_3_fu_409_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_50_fu_469_p2 = ((p_Result_27_4_fu_459_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_51_fu_519_p2 = ((p_Result_27_5_fu_509_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_52_fu_569_p2 = ((p_Result_27_6_fu_559_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_53_fu_619_p2 = ((p_Result_27_7_fu_609_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_54_fu_669_p2 = ((p_Result_27_8_fu_659_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_55_fu_719_p2 = ((p_Result_27_9_fu_709_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_269_p2 = ((p_Result_s_fu_259_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op267 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op33 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_1_fu_889_p2 = (xor_ln785_1_fu_883_p2 | tmp_216_fu_869_p3);

assign or_ln340_2_fu_979_p2 = (xor_ln785_2_fu_973_p2 | tmp_220_fu_959_p3);

assign or_ln340_3_fu_1069_p2 = (xor_ln785_3_fu_1063_p2 | tmp_224_fu_1049_p3);

assign or_ln340_4_fu_1159_p2 = (xor_ln785_4_fu_1153_p2 | tmp_228_fu_1139_p3);

assign or_ln340_5_fu_1249_p2 = (xor_ln785_5_fu_1243_p2 | tmp_232_fu_1229_p3);

assign or_ln340_6_fu_1339_p2 = (xor_ln785_6_fu_1333_p2 | tmp_236_fu_1319_p3);

assign or_ln340_7_fu_1429_p2 = (xor_ln785_7_fu_1423_p2 | tmp_240_fu_1409_p3);

assign or_ln340_8_fu_1519_p2 = (xor_ln785_8_fu_1513_p2 | tmp_244_fu_1499_p3);

assign or_ln340_9_fu_1609_p2 = (xor_ln785_9_fu_1603_p2 | tmp_248_fu_1589_p3);

assign or_ln340_fu_799_p2 = (xor_ln785_fu_793_p2 | tmp_212_fu_779_p3);

assign p_Result_27_1_fu_309_p4 = {{data_V_data_1_V_dout[13:9]}};

assign p_Result_27_2_fu_359_p4 = {{data_V_data_2_V_dout[13:9]}};

assign p_Result_27_3_fu_409_p4 = {{data_V_data_3_V_dout[13:9]}};

assign p_Result_27_4_fu_459_p4 = {{data_V_data_4_V_dout[13:9]}};

assign p_Result_27_5_fu_509_p4 = {{data_V_data_5_V_dout[13:9]}};

assign p_Result_27_6_fu_559_p4 = {{data_V_data_6_V_dout[13:9]}};

assign p_Result_27_7_fu_609_p4 = {{data_V_data_7_V_dout[13:9]}};

assign p_Result_27_8_fu_659_p4 = {{data_V_data_8_V_dout[13:9]}};

assign p_Result_27_9_fu_709_p4 = {{data_V_data_9_V_dout[13:9]}};

assign p_Result_s_fu_259_p4 = {{data_V_data_0_V_dout[13:9]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_2000;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2005;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2010;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2015;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2020;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2025;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2030;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2035;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2040;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2045;

assign select_ln340_1_fu_895_p3 = ((or_ln340_1_fu_889_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_47_fu_844_p2);

assign select_ln340_2_fu_985_p3 = ((or_ln340_2_fu_979_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_48_fu_934_p2);

assign select_ln340_3_fu_1075_p3 = ((or_ln340_3_fu_1069_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_49_fu_1024_p2);

assign select_ln340_4_fu_1165_p3 = ((or_ln340_4_fu_1159_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_50_fu_1114_p2);

assign select_ln340_5_fu_1255_p3 = ((or_ln340_5_fu_1249_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_51_fu_1204_p2);

assign select_ln340_6_fu_1345_p3 = ((or_ln340_6_fu_1339_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_52_fu_1294_p2);

assign select_ln340_7_fu_1435_p3 = ((or_ln340_7_fu_1429_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_53_fu_1384_p2);

assign select_ln340_8_fu_1525_p3 = ((or_ln340_8_fu_1519_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_54_fu_1474_p2);

assign select_ln340_9_fu_1615_p3 = ((or_ln340_9_fu_1609_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_55_fu_1564_p2);

assign select_ln340_fu_805_p3 = ((or_ln340_fu_799_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_fu_754_p2);

assign select_ln777_47_fu_877_p3 = ((and_ln416_47_fu_863_p2[0:0] === 1'b1) ? icmp_ln879_47_reg_1782 : icmp_ln768_47_reg_1787);

assign select_ln777_48_fu_967_p3 = ((and_ln416_48_fu_953_p2[0:0] === 1'b1) ? icmp_ln879_48_reg_1808 : icmp_ln768_48_reg_1813);

assign select_ln777_49_fu_1057_p3 = ((and_ln416_49_fu_1043_p2[0:0] === 1'b1) ? icmp_ln879_49_reg_1834 : icmp_ln768_49_reg_1839);

assign select_ln777_50_fu_1147_p3 = ((and_ln416_50_fu_1133_p2[0:0] === 1'b1) ? icmp_ln879_50_reg_1860 : icmp_ln768_50_reg_1865);

assign select_ln777_51_fu_1237_p3 = ((and_ln416_51_fu_1223_p2[0:0] === 1'b1) ? icmp_ln879_51_reg_1886 : icmp_ln768_51_reg_1891);

assign select_ln777_52_fu_1327_p3 = ((and_ln416_52_fu_1313_p2[0:0] === 1'b1) ? icmp_ln879_52_reg_1912 : icmp_ln768_52_reg_1917);

assign select_ln777_53_fu_1417_p3 = ((and_ln416_53_fu_1403_p2[0:0] === 1'b1) ? icmp_ln879_53_reg_1938 : icmp_ln768_53_reg_1943);

assign select_ln777_54_fu_1507_p3 = ((and_ln416_54_fu_1493_p2[0:0] === 1'b1) ? icmp_ln879_54_reg_1964 : icmp_ln768_54_reg_1969);

assign select_ln777_55_fu_1597_p3 = ((and_ln416_55_fu_1583_p2[0:0] === 1'b1) ? icmp_ln879_55_reg_1990 : icmp_ln768_55_reg_1995);

assign select_ln777_fu_787_p3 = ((and_ln416_fu_773_p2[0:0] === 1'b1) ? icmp_ln879_reg_1756 : icmp_ln768_reg_1761);

assign start_out = real_start;

assign tmp_209_fu_736_p3 = tmp_data_V_48_0_reg_1680[32'd8];

assign tmp_211_fu_759_p3 = add_ln415_fu_749_p2[32'd5];

assign tmp_212_fu_779_p3 = add_ln415_fu_749_p2[32'd5];

assign tmp_213_fu_826_p3 = tmp_data_V_48_1_reg_1686[32'd8];

assign tmp_215_fu_849_p3 = add_ln415_47_fu_839_p2[32'd5];

assign tmp_216_fu_869_p3 = add_ln415_47_fu_839_p2[32'd5];

assign tmp_217_fu_916_p3 = tmp_data_V_48_2_reg_1692[32'd8];

assign tmp_219_fu_939_p3 = add_ln415_48_fu_929_p2[32'd5];

assign tmp_220_fu_959_p3 = add_ln415_48_fu_929_p2[32'd5];

assign tmp_221_fu_1006_p3 = tmp_data_V_48_3_reg_1698[32'd8];

assign tmp_223_fu_1029_p3 = add_ln415_49_fu_1019_p2[32'd5];

assign tmp_224_fu_1049_p3 = add_ln415_49_fu_1019_p2[32'd5];

assign tmp_225_fu_1096_p3 = tmp_data_V_48_4_reg_1704[32'd8];

assign tmp_227_fu_1119_p3 = add_ln415_50_fu_1109_p2[32'd5];

assign tmp_228_fu_1139_p3 = add_ln415_50_fu_1109_p2[32'd5];

assign tmp_229_fu_1186_p3 = tmp_data_V_48_5_reg_1710[32'd8];

assign tmp_231_fu_1209_p3 = add_ln415_51_fu_1199_p2[32'd5];

assign tmp_232_fu_1229_p3 = add_ln415_51_fu_1199_p2[32'd5];

assign tmp_233_fu_1276_p3 = tmp_data_V_48_6_reg_1716[32'd8];

assign tmp_235_fu_1299_p3 = add_ln415_52_fu_1289_p2[32'd5];

assign tmp_236_fu_1319_p3 = add_ln415_52_fu_1289_p2[32'd5];

assign tmp_237_fu_1366_p3 = tmp_data_V_48_7_reg_1722[32'd8];

assign tmp_239_fu_1389_p3 = add_ln415_53_fu_1379_p2[32'd5];

assign tmp_240_fu_1409_p3 = add_ln415_53_fu_1379_p2[32'd5];

assign tmp_241_fu_1456_p3 = tmp_data_V_48_8_reg_1728[32'd8];

assign tmp_243_fu_1479_p3 = add_ln415_54_fu_1469_p2[32'd5];

assign tmp_244_fu_1499_p3 = add_ln415_54_fu_1469_p2[32'd5];

assign tmp_245_fu_1546_p3 = tmp_data_V_48_9_reg_1734[32'd8];

assign tmp_247_fu_1569_p3 = add_ln415_55_fu_1559_p2[32'd5];

assign tmp_248_fu_1589_p3 = add_ln415_55_fu_1559_p2[32'd5];

assign tmp_data_0_V_fu_813_p3 = ((icmp_ln1494_fu_731_p2[0:0] === 1'b1) ? select_ln340_fu_805_p3 : 5'd0);

assign tmp_data_1_V_fu_903_p3 = ((icmp_ln1494_1_fu_821_p2[0:0] === 1'b1) ? select_ln340_1_fu_895_p3 : 5'd0);

assign tmp_data_2_V_fu_993_p3 = ((icmp_ln1494_2_fu_911_p2[0:0] === 1'b1) ? select_ln340_2_fu_985_p3 : 5'd0);

assign tmp_data_3_V_fu_1083_p3 = ((icmp_ln1494_3_fu_1001_p2[0:0] === 1'b1) ? select_ln340_3_fu_1075_p3 : 5'd0);

assign tmp_data_4_V_fu_1173_p3 = ((icmp_ln1494_4_fu_1091_p2[0:0] === 1'b1) ? select_ln340_4_fu_1165_p3 : 5'd0);

assign tmp_data_5_V_fu_1263_p3 = ((icmp_ln1494_5_fu_1181_p2[0:0] === 1'b1) ? select_ln340_5_fu_1255_p3 : 5'd0);

assign tmp_data_6_V_fu_1353_p3 = ((icmp_ln1494_6_fu_1271_p2[0:0] === 1'b1) ? select_ln340_6_fu_1345_p3 : 5'd0);

assign tmp_data_7_V_fu_1443_p3 = ((icmp_ln1494_7_fu_1361_p2[0:0] === 1'b1) ? select_ln340_7_fu_1435_p3 : 5'd0);

assign tmp_data_8_V_fu_1533_p3 = ((icmp_ln1494_8_fu_1451_p2[0:0] === 1'b1) ? select_ln340_8_fu_1525_p3 : 5'd0);

assign tmp_data_9_V_fu_1623_p3 = ((icmp_ln1494_9_fu_1541_p2[0:0] === 1'b1) ? select_ln340_9_fu_1615_p3 : 5'd0);

assign xor_ln416_47_fu_857_p2 = (tmp_215_fu_849_p3 ^ 1'd1);

assign xor_ln416_48_fu_947_p2 = (tmp_219_fu_939_p3 ^ 1'd1);

assign xor_ln416_49_fu_1037_p2 = (tmp_223_fu_1029_p3 ^ 1'd1);

assign xor_ln416_50_fu_1127_p2 = (tmp_227_fu_1119_p3 ^ 1'd1);

assign xor_ln416_51_fu_1217_p2 = (tmp_231_fu_1209_p3 ^ 1'd1);

assign xor_ln416_52_fu_1307_p2 = (tmp_235_fu_1299_p3 ^ 1'd1);

assign xor_ln416_53_fu_1397_p2 = (tmp_239_fu_1389_p3 ^ 1'd1);

assign xor_ln416_54_fu_1487_p2 = (tmp_243_fu_1479_p3 ^ 1'd1);

assign xor_ln416_55_fu_1577_p2 = (tmp_247_fu_1569_p3 ^ 1'd1);

assign xor_ln416_fu_767_p2 = (tmp_211_fu_759_p3 ^ 1'd1);

assign xor_ln785_1_fu_883_p2 = (select_ln777_47_fu_877_p3 ^ 1'd1);

assign xor_ln785_2_fu_973_p2 = (select_ln777_48_fu_967_p3 ^ 1'd1);

assign xor_ln785_3_fu_1063_p2 = (select_ln777_49_fu_1057_p3 ^ 1'd1);

assign xor_ln785_4_fu_1153_p2 = (select_ln777_50_fu_1147_p3 ^ 1'd1);

assign xor_ln785_5_fu_1243_p2 = (select_ln777_51_fu_1237_p3 ^ 1'd1);

assign xor_ln785_6_fu_1333_p2 = (select_ln777_52_fu_1327_p3 ^ 1'd1);

assign xor_ln785_7_fu_1423_p2 = (select_ln777_53_fu_1417_p3 ^ 1'd1);

assign xor_ln785_8_fu_1513_p2 = (select_ln777_54_fu_1507_p3 ^ 1'd1);

assign xor_ln785_9_fu_1603_p2 = (select_ln777_55_fu_1597_p3 ^ 1'd1);

assign xor_ln785_fu_793_p2 = (select_ln777_fu_787_p3 ^ 1'd1);

assign zext_ln415_47_fu_833_p1 = tmp_214_reg_1771;

assign zext_ln415_48_fu_923_p1 = tmp_218_reg_1797;

assign zext_ln415_49_fu_1013_p1 = tmp_222_reg_1823;

assign zext_ln415_50_fu_1103_p1 = tmp_226_reg_1849;

assign zext_ln415_51_fu_1193_p1 = tmp_230_reg_1875;

assign zext_ln415_52_fu_1283_p1 = tmp_234_reg_1901;

assign zext_ln415_53_fu_1373_p1 = tmp_238_reg_1927;

assign zext_ln415_54_fu_1463_p1 = tmp_242_reg_1953;

assign zext_ln415_55_fu_1553_p1 = tmp_246_reg_1979;

assign zext_ln415_65_fu_746_p1 = tmp_210_reg_1745;

assign zext_ln415_66_fu_836_p1 = tmp_214_reg_1771;

assign zext_ln415_67_fu_926_p1 = tmp_218_reg_1797;

assign zext_ln415_68_fu_1016_p1 = tmp_222_reg_1823;

assign zext_ln415_69_fu_1106_p1 = tmp_226_reg_1849;

assign zext_ln415_70_fu_1196_p1 = tmp_230_reg_1875;

assign zext_ln415_71_fu_1286_p1 = tmp_234_reg_1901;

assign zext_ln415_72_fu_1376_p1 = tmp_238_reg_1927;

assign zext_ln415_73_fu_1466_p1 = tmp_242_reg_1953;

assign zext_ln415_74_fu_1556_p1 = tmp_246_reg_1979;

assign zext_ln415_fu_743_p1 = tmp_210_reg_1745;

endmodule //relu_array_array_ap_fixed_10u_relu_config12_s
