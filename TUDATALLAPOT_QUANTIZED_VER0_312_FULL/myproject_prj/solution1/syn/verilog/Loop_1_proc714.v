// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc714 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_r_TLAST,
        in_r_TVALID,
        in_r_TREADY,
        in_local_V_data_0_V_din,
        in_local_V_data_0_V_full_n,
        in_local_V_data_0_V_write,
        in_r_TDATA,
        is_last_0_i_out_out_din,
        is_last_0_i_out_out_full_n,
        is_last_0_i_out_out_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [0:0] in_r_TLAST;
input   in_r_TVALID;
output   in_r_TREADY;
output  [15:0] in_local_V_data_0_V_din;
input   in_local_V_data_0_V_full_n;
output   in_local_V_data_0_V_write;
input  [31:0] in_r_TDATA;
output  [0:0] is_last_0_i_out_out_din;
input   is_last_0_i_out_out_full_n;
output   is_last_0_i_out_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_local_V_data_0_V_write;
reg is_last_0_i_out_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] in_last_V_0_data_out;
wire    in_last_V_0_vld_in;
wire    in_last_V_0_vld_out;
wire    in_last_V_0_ack_in;
reg    in_last_V_0_ack_out;
reg   [0:0] in_last_V_0_payload_A;
reg   [0:0] in_last_V_0_payload_B;
reg    in_last_V_0_sel_rd;
reg    in_last_V_0_sel_wr;
wire    in_last_V_0_sel;
wire    in_last_V_0_load_A;
wire    in_last_V_0_load_B;
reg   [1:0] in_last_V_0_state;
wire    in_last_V_0_state_cmp_full;
reg   [31:0] in_data_0_data_out;
wire    in_data_0_vld_in;
wire    in_data_0_vld_out;
wire    in_data_0_ack_in;
reg    in_data_0_ack_out;
reg   [31:0] in_data_0_payload_A;
reg   [31:0] in_data_0_payload_B;
reg    in_data_0_sel_rd;
reg    in_data_0_sel_wr;
wire    in_data_0_sel;
wire    in_data_0_load_A;
wire    in_data_0_load_B;
reg   [1:0] in_data_0_state;
wire    in_data_0_state_cmp_full;
reg    in_local_V_data_0_V_blk_n;
wire    ap_CS_fsm_state9;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln23_fu_138_p2;
reg    is_last_0_i_out_out_blk_n;
wire   [13:0] i_fu_144_p2;
reg   [13:0] i_reg_437;
reg    ap_block_state2;
reg   [31:0] in_data_tmp_reg_442;
wire   [0:0] or_ln28_fu_159_p2;
reg   [0:0] or_ln28_reg_448;
wire   [62:0] trunc_ln557_fu_169_p1;
reg   [62:0] trunc_ln557_reg_453;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_reg_458;
reg   [10:0] p_Result_i_i_reg_463;
wire   [51:0] trunc_ln565_fu_191_p1;
reg   [51:0] trunc_ln565_reg_468;
wire   [53:0] select_ln570_fu_215_p3;
reg   [53:0] select_ln570_reg_473;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln571_fu_222_p2;
reg   [0:0] icmp_ln571_reg_478;
wire   [0:0] icmp_ln581_fu_233_p2;
reg   [0:0] icmp_ln581_reg_484;
wire  signed [11:0] select_ln581_fu_251_p3;
reg  signed [11:0] select_ln581_reg_490;
wire   [0:0] icmp_ln582_fu_259_p2;
reg   [0:0] icmp_ln582_reg_497;
wire   [15:0] trunc_ln583_fu_265_p1;
reg   [15:0] trunc_ln583_reg_503;
reg   [7:0] tmp_297_reg_509;
wire    ap_CS_fsm_state6;
wire   [0:0] and_ln585_fu_341_p2;
reg   [0:0] and_ln585_reg_519;
wire   [0:0] and_ln603_fu_364_p2;
reg   [0:0] and_ln603_reg_524;
wire   [0:0] or_ln603_fu_370_p2;
reg   [0:0] or_ln603_reg_529;
wire   [15:0] select_ln603_1_fu_376_p3;
reg   [15:0] select_ln603_1_reg_535;
wire   [53:0] grp_fu_296_p2;
reg   [53:0] ashr_ln586_reg_540;
wire    ap_CS_fsm_state7;
wire   [0:0] or_ln603_2_fu_398_p2;
reg   [0:0] or_ln603_2_reg_545;
wire   [15:0] select_ln603_2_fu_421_p3;
reg   [15:0] select_ln603_2_reg_550;
wire    ap_CS_fsm_state8;
reg   [0:0] is_last_0_i_out_dc_0_reg_112;
reg    ap_block_state1;
reg   [13:0] i_0_i3_i_reg_124;
wire   [63:0] grp_fu_135_p1;
wire   [63:0] bitcast_ln696_fu_165_p1;
wire   [52:0] tmp_i_fu_198_p3;
wire   [53:0] zext_ln569_fu_205_p1;
wire   [53:0] sub_ln461_fu_209_p2;
wire   [11:0] zext_ln461_fu_195_p1;
wire   [11:0] sub_ln575_fu_227_p2;
wire   [11:0] add_ln581_fu_239_p2;
wire   [11:0] sub_ln581_fu_245_p2;
wire  signed [31:0] sext_ln581_fu_279_p1;
wire   [53:0] grp_fu_296_p1;
wire   [31:0] bitcast_ln696_1_fu_301_p1;
wire   [0:0] tmp_298_fu_304_p3;
wire   [0:0] or_ln582_fu_320_p2;
wire   [0:0] xor_ln582_fu_324_p2;
wire   [0:0] icmp_ln585_fu_282_p2;
wire   [0:0] and_ln581_fu_330_p2;
wire   [0:0] xor_ln585_fu_335_p2;
wire   [0:0] or_ln581_fu_353_p2;
wire   [0:0] icmp_ln603_fu_287_p2;
wire   [0:0] xor_ln581_fu_358_p2;
wire   [0:0] and_ln585_1_fu_347_p2;
wire   [15:0] select_ln588_fu_312_p3;
wire   [0:0] xor_ln571_fu_383_p2;
wire   [0:0] and_ln582_fu_388_p2;
wire   [0:0] or_ln603_1_fu_393_p2;
wire  signed [15:0] sext_ln581_1_fu_403_p1;
wire   [15:0] shl_ln604_fu_409_p2;
wire   [15:0] trunc_ln586_fu_406_p1;
wire   [15:0] select_ln603_fu_414_p3;
reg    grp_fu_135_ce;
wire    ap_CS_fsm_state3;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 in_last_V_0_sel_rd = 1'b0;
#0 in_last_V_0_sel_wr = 1'b0;
#0 in_last_V_0_state = 2'd0;
#0 in_data_0_sel_rd = 1'b0;
#0 in_data_0_sel_wr = 1'b0;
#0 in_data_0_state = 2'd0;
end

myproject_axi_fpext_32ns_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_fpext_32ns_64_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_data_0_data_out),
    .ce(grp_fu_135_ce),
    .dout(grp_fu_135_p1)
);

myproject_axi_ashr_54ns_32ns_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 2 ),
    .din0_WIDTH( 54 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 54 ))
myproject_axi_ashr_54ns_32ns_54_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln570_reg_473),
    .din1(grp_fu_296_p1),
    .ce(1'b1),
    .dout(grp_fu_296_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_data_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_0_ack_out == 1'b1) & (in_data_0_vld_out == 1'b1))) begin
            in_data_0_sel_rd <= ~in_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_data_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_0_ack_in == 1'b1) & (in_data_0_vld_in == 1'b1))) begin
            in_data_0_sel_wr <= ~in_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_data_0_state <= 2'd0;
    end else begin
        if ((((in_data_0_state == 2'd2) & (in_data_0_vld_in == 1'b0)) | ((in_data_0_state == 2'd3) & (in_data_0_vld_in == 1'b0) & (in_data_0_ack_out == 1'b1)))) begin
            in_data_0_state <= 2'd2;
        end else if ((((in_data_0_state == 2'd1) & (in_data_0_ack_out == 1'b0)) | ((in_data_0_state == 2'd3) & (in_data_0_ack_out == 1'b0) & (in_data_0_vld_in == 1'b1)))) begin
            in_data_0_state <= 2'd1;
        end else if (((~((in_data_0_vld_in == 1'b0) & (in_data_0_ack_out == 1'b1)) & ~((in_data_0_ack_out == 1'b0) & (in_data_0_vld_in == 1'b1)) & (in_data_0_state == 2'd3)) | ((in_data_0_state == 2'd1) & (in_data_0_ack_out == 1'b1)) | ((in_data_0_state == 2'd2) & (in_data_0_vld_in == 1'b1)))) begin
            in_data_0_state <= 2'd3;
        end else begin
            in_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_out == 1'b1) & (in_last_V_0_vld_out == 1'b1))) begin
            in_last_V_0_sel_rd <= ~in_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_in == 1'b1) & (in_last_V_0_vld_in == 1'b1))) begin
            in_last_V_0_sel_wr <= ~in_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)))) begin
            in_last_V_0_state <= 2'd2;
        end else if ((((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd1;
        end else if (((~((in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)) & ~((in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)) & (in_last_V_0_state == 2'd3)) | ((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b1)) | ((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd3;
        end else begin
            in_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_local_V_data_0_V_full_n == 1'b1))) begin
        i_0_i3_i_reg_124 <= i_reg_437;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i3_i_reg_124 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_local_V_data_0_V_full_n == 1'b1))) begin
        is_last_0_i_out_dc_0_reg_112 <= or_ln28_reg_448;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_out_dc_0_reg_112 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        and_ln585_reg_519 <= and_ln585_fu_341_p2;
        and_ln603_reg_524 <= and_ln603_fu_364_p2;
        or_ln603_reg_529 <= or_ln603_fu_370_p2;
        select_ln603_1_reg_535 <= select_ln603_1_fu_376_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ashr_ln586_reg_540 <= grp_fu_296_p2;
        or_ln603_2_reg_545 <= or_ln603_2_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_437 <= i_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln571_reg_478 <= icmp_ln571_fu_222_p2;
        icmp_ln581_reg_484 <= icmp_ln581_fu_233_p2;
        icmp_ln582_reg_497 <= icmp_ln582_fu_259_p2;
        select_ln570_reg_473 <= select_ln570_fu_215_p3;
        select_ln581_reg_490 <= select_ln581_fu_251_p3;
        tmp_297_reg_509 <= {{select_ln581_fu_251_p3[11:4]}};
        trunc_ln583_reg_503 <= trunc_ln583_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_0_load_A == 1'b1)) begin
        in_data_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_0_load_B == 1'b1)) begin
        in_data_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_data_tmp_reg_442 <= in_data_0_data_out;
        or_ln28_reg_448 <= or_ln28_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_A == 1'b1)) begin
        in_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_B == 1'b1)) begin
        in_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Result_i_i_reg_463 <= {{bitcast_ln696_fu_165_p1[62:52]}};
        tmp_reg_458 <= bitcast_ln696_fu_165_p1[32'd63];
        trunc_ln557_reg_453 <= trunc_ln557_fu_169_p1;
        trunc_ln565_reg_468 <= trunc_ln565_fu_191_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln603_2_reg_545 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        select_ln603_2_reg_550 <= select_ln603_2_fu_421_p3;
    end
end

always @ (*) begin
    if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_135_ce = 1'b1;
    end else begin
        grp_fu_135_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_data_0_ack_out = 1'b1;
    end else begin
        in_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_0_sel == 1'b1)) begin
        in_data_0_data_out = in_data_0_payload_B;
    end else begin
        in_data_0_data_out = in_data_0_payload_A;
    end
end

always @ (*) begin
    if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_last_V_0_ack_out = 1'b1;
    end else begin
        in_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_last_V_0_sel == 1'b1)) begin
        in_last_V_0_data_out = in_last_V_0_payload_B;
    end else begin
        in_last_V_0_data_out = in_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        in_local_V_data_0_V_blk_n = in_local_V_data_0_V_full_n;
    end else begin
        in_local_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (in_local_V_data_0_V_full_n == 1'b1))) begin
        in_local_V_data_0_V_write = 1'b1;
    end else begin
        in_local_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TDATA_blk_n = in_data_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        is_last_0_i_out_out_blk_n = is_last_0_i_out_out_full_n;
    end else begin
        is_last_0_i_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        is_last_0_i_out_out_write = 1'b1;
    end else begin
        is_last_0_i_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0))) & (icmp_ln23_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (in_local_V_data_0_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln581_fu_239_p2 = ($signed(12'd4086) + $signed(sub_ln575_fu_227_p2));

assign and_ln581_fu_330_p2 = (xor_ln582_fu_324_p2 & icmp_ln581_reg_484);

assign and_ln582_fu_388_p2 = (xor_ln571_fu_383_p2 & icmp_ln582_reg_497);

assign and_ln585_1_fu_347_p2 = (icmp_ln585_fu_282_p2 & and_ln581_fu_330_p2);

assign and_ln585_fu_341_p2 = (xor_ln585_fu_335_p2 & and_ln581_fu_330_p2);

assign and_ln603_fu_364_p2 = (xor_ln581_fu_358_p2 & icmp_ln603_fu_287_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((icmp_ln23_fu_138_p2 == 1'd1) & (is_last_0_i_out_out_full_n == 1'b0)) | ((icmp_ln23_fu_138_p2 == 1'd0) & (in_data_0_vld_out == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign bitcast_ln696_1_fu_301_p1 = in_data_tmp_reg_442;

assign bitcast_ln696_fu_165_p1 = grp_fu_135_p1;

assign grp_fu_296_p1 = $unsigned(sext_ln581_fu_279_p1);

assign i_fu_144_p2 = (i_0_i3_i_reg_124 + 14'd1);

assign icmp_ln23_fu_138_p2 = ((i_0_i3_i_reg_124 == 14'd8192) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_222_p2 = ((trunc_ln557_reg_453 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_233_p2 = (($signed(sub_ln575_fu_227_p2) > $signed(12'd10)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_259_p2 = ((sub_ln575_fu_227_p2 == 12'd10) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_282_p2 = ((select_ln581_reg_490 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_287_p2 = ((tmp_297_reg_509 == 8'd0) ? 1'b1 : 1'b0);

assign in_data_0_ack_in = in_data_0_state[1'd1];

assign in_data_0_load_A = (in_data_0_state_cmp_full & ~in_data_0_sel_wr);

assign in_data_0_load_B = (in_data_0_state_cmp_full & in_data_0_sel_wr);

assign in_data_0_sel = in_data_0_sel_rd;

assign in_data_0_state_cmp_full = ((in_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_0_vld_in = in_r_TVALID;

assign in_data_0_vld_out = in_data_0_state[1'd0];

assign in_last_V_0_ack_in = in_last_V_0_state[1'd1];

assign in_last_V_0_load_A = (in_last_V_0_state_cmp_full & ~in_last_V_0_sel_wr);

assign in_last_V_0_load_B = (in_last_V_0_state_cmp_full & in_last_V_0_sel_wr);

assign in_last_V_0_sel = in_last_V_0_sel_rd;

assign in_last_V_0_state_cmp_full = ((in_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_last_V_0_vld_in = in_r_TVALID;

assign in_last_V_0_vld_out = in_last_V_0_state[1'd0];

assign in_local_V_data_0_V_din = ((or_ln603_2_reg_545[0:0] === 1'b1) ? select_ln603_2_reg_550 : 16'd0);

assign in_r_TREADY = in_data_0_state[1'd1];

assign is_last_0_i_out_out_din = is_last_0_i_out_dc_0_reg_112;

assign or_ln28_fu_159_p2 = (is_last_0_i_out_dc_0_reg_112 | in_last_V_0_data_out);

assign or_ln581_fu_353_p2 = (or_ln582_fu_320_p2 | icmp_ln581_reg_484);

assign or_ln582_fu_320_p2 = (icmp_ln582_reg_497 | icmp_ln571_reg_478);

assign or_ln603_1_fu_393_p2 = (and_ln585_reg_519 | and_ln582_fu_388_p2);

assign or_ln603_2_fu_398_p2 = (or_ln603_reg_529 | or_ln603_1_fu_393_p2);

assign or_ln603_fu_370_p2 = (and_ln603_fu_364_p2 | and_ln585_1_fu_347_p2);

assign select_ln570_fu_215_p3 = ((tmp_reg_458[0:0] === 1'b1) ? sub_ln461_fu_209_p2 : zext_ln569_fu_205_p1);

assign select_ln581_fu_251_p3 = ((icmp_ln581_fu_233_p2[0:0] === 1'b1) ? add_ln581_fu_239_p2 : sub_ln581_fu_245_p2);

assign select_ln588_fu_312_p3 = ((tmp_298_fu_304_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_1_fu_376_p3 = ((and_ln585_fu_341_p2[0:0] === 1'b1) ? select_ln588_fu_312_p3 : trunc_ln583_reg_503);

assign select_ln603_2_fu_421_p3 = ((or_ln603_reg_529[0:0] === 1'b1) ? select_ln603_fu_414_p3 : select_ln603_1_reg_535);

assign select_ln603_fu_414_p3 = ((and_ln603_reg_524[0:0] === 1'b1) ? shl_ln604_fu_409_p2 : trunc_ln586_fu_406_p1);

assign sext_ln581_1_fu_403_p1 = select_ln581_reg_490;

assign sext_ln581_fu_279_p1 = select_ln581_reg_490;

assign shl_ln604_fu_409_p2 = trunc_ln583_reg_503 << sext_ln581_1_fu_403_p1;

assign start_out = real_start;

assign sub_ln461_fu_209_p2 = (54'd0 - zext_ln569_fu_205_p1);

assign sub_ln575_fu_227_p2 = (12'd1075 - zext_ln461_fu_195_p1);

assign sub_ln581_fu_245_p2 = (12'd10 - sub_ln575_fu_227_p2);

assign tmp_298_fu_304_p3 = bitcast_ln696_1_fu_301_p1[32'd31];

assign tmp_i_fu_198_p3 = {{1'd1}, {trunc_ln565_reg_468}};

assign trunc_ln557_fu_169_p1 = bitcast_ln696_fu_165_p1[62:0];

assign trunc_ln565_fu_191_p1 = bitcast_ln696_fu_165_p1[51:0];

assign trunc_ln583_fu_265_p1 = select_ln570_fu_215_p3[15:0];

assign trunc_ln586_fu_406_p1 = ashr_ln586_reg_540[15:0];

assign xor_ln571_fu_383_p2 = (icmp_ln571_reg_478 ^ 1'd1);

assign xor_ln581_fu_358_p2 = (or_ln581_fu_353_p2 ^ 1'd1);

assign xor_ln582_fu_324_p2 = (or_ln582_fu_320_p2 ^ 1'd1);

assign xor_ln585_fu_335_p2 = (icmp_ln585_fu_282_p2 ^ 1'd1);

assign zext_ln461_fu_195_p1 = p_Result_i_i_reg_463;

assign zext_ln569_fu_205_p1 = tmp_i_fu_198_p3;

endmodule //Loop_1_proc714
