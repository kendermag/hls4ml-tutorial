// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_fixed_8u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [13:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [13:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [13:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [13:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [13:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [13:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [13:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [13:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [5:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [5:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [5:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [5:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln60_reg_1355;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln60_reg_1355_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [13:0] i_0_reg_148;
wire   [0:0] icmp_ln60_fu_159_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op29;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op217;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln60_reg_1355_pp0_iter1_reg;
wire   [13:0] i_fu_165_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [13:0] tmp_data_V_38_0_reg_1364;
reg   [13:0] tmp_data_V_38_1_reg_1370;
reg   [13:0] tmp_data_V_38_2_reg_1376;
reg   [13:0] tmp_data_V_38_3_reg_1382;
reg   [13:0] tmp_data_V_38_4_reg_1388;
reg   [13:0] tmp_data_V_38_5_reg_1394;
reg   [13:0] tmp_data_V_38_6_reg_1400;
reg   [13:0] tmp_data_V_38_7_reg_1406;
reg   [5:0] trunc_ln_reg_1412;
reg   [0:0] tmp_6_reg_1417;
reg   [4:0] trunc_ln415_8_reg_1423;
wire   [0:0] icmp_ln879_fu_241_p2;
reg   [0:0] icmp_ln879_reg_1428;
wire   [0:0] icmp_ln768_fu_247_p2;
reg   [0:0] icmp_ln768_reg_1433;
reg   [5:0] trunc_ln708_s_reg_1438;
reg   [0:0] tmp_10_reg_1443;
reg   [4:0] trunc_ln415_9_reg_1449;
wire   [0:0] icmp_ln879_1_fu_291_p2;
reg   [0:0] icmp_ln879_1_reg_1454;
wire   [0:0] icmp_ln768_1_fu_297_p2;
reg   [0:0] icmp_ln768_1_reg_1459;
reg   [5:0] trunc_ln708_11_reg_1464;
reg   [0:0] tmp_14_reg_1469;
reg   [4:0] trunc_ln415_s_reg_1475;
wire   [0:0] icmp_ln879_2_fu_341_p2;
reg   [0:0] icmp_ln879_2_reg_1480;
wire   [0:0] icmp_ln768_2_fu_347_p2;
reg   [0:0] icmp_ln768_2_reg_1485;
reg   [5:0] trunc_ln708_12_reg_1490;
reg   [0:0] tmp_18_reg_1495;
reg   [4:0] trunc_ln415_1_reg_1501;
wire   [0:0] icmp_ln879_3_fu_391_p2;
reg   [0:0] icmp_ln879_3_reg_1506;
wire   [0:0] icmp_ln768_3_fu_397_p2;
reg   [0:0] icmp_ln768_3_reg_1511;
reg   [5:0] trunc_ln708_13_reg_1516;
reg   [0:0] tmp_22_reg_1521;
reg   [4:0] trunc_ln415_2_reg_1527;
wire   [0:0] icmp_ln879_4_fu_441_p2;
reg   [0:0] icmp_ln879_4_reg_1532;
wire   [0:0] icmp_ln768_4_fu_447_p2;
reg   [0:0] icmp_ln768_4_reg_1537;
reg   [5:0] trunc_ln708_14_reg_1542;
reg   [0:0] tmp_26_reg_1547;
reg   [4:0] trunc_ln415_3_reg_1553;
wire   [0:0] icmp_ln879_5_fu_491_p2;
reg   [0:0] icmp_ln879_5_reg_1558;
wire   [0:0] icmp_ln768_5_fu_497_p2;
reg   [0:0] icmp_ln768_5_reg_1563;
reg   [5:0] trunc_ln708_15_reg_1568;
reg   [0:0] tmp_30_reg_1573;
reg   [4:0] trunc_ln415_4_reg_1579;
wire   [0:0] icmp_ln879_6_fu_541_p2;
reg   [0:0] icmp_ln879_6_reg_1584;
wire   [0:0] icmp_ln768_6_fu_547_p2;
reg   [0:0] icmp_ln768_6_reg_1589;
reg   [5:0] trunc_ln708_16_reg_1594;
reg   [0:0] tmp_34_reg_1599;
reg   [4:0] trunc_ln415_5_reg_1605;
wire   [0:0] icmp_ln879_7_fu_591_p2;
reg   [0:0] icmp_ln879_7_reg_1610;
wire   [0:0] icmp_ln768_7_fu_597_p2;
reg   [0:0] icmp_ln768_7_reg_1615;
wire   [4:0] tmp_data_0_V_fu_685_p3;
reg   [4:0] tmp_data_0_V_reg_1620;
wire   [4:0] tmp_data_1_V_fu_775_p3;
reg   [4:0] tmp_data_1_V_reg_1625;
wire   [4:0] tmp_data_2_V_fu_865_p3;
reg   [4:0] tmp_data_2_V_reg_1630;
wire   [4:0] tmp_data_3_V_fu_955_p3;
reg   [4:0] tmp_data_3_V_reg_1635;
wire   [4:0] tmp_data_4_V_fu_1045_p3;
reg   [4:0] tmp_data_4_V_reg_1640;
wire   [4:0] tmp_data_5_V_fu_1135_p3;
reg   [4:0] tmp_data_5_V_reg_1645;
wire   [4:0] tmp_data_6_V_fu_1225_p3;
reg   [4:0] tmp_data_6_V_reg_1650;
wire   [4:0] tmp_data_7_V_fu_1315_p3;
reg   [4:0] tmp_data_7_V_reg_1655;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] p_Result_7_fu_231_p4;
wire   [4:0] p_Result_7_1_fu_281_p4;
wire   [4:0] p_Result_7_2_fu_331_p4;
wire   [4:0] p_Result_7_3_fu_381_p4;
wire   [4:0] p_Result_7_4_fu_431_p4;
wire   [4:0] p_Result_7_5_fu_481_p4;
wire   [4:0] p_Result_7_6_fu_531_p4;
wire   [4:0] p_Result_7_7_fu_581_p4;
wire   [5:0] zext_ln415_fu_615_p1;
wire   [4:0] zext_ln415_8_fu_618_p1;
wire   [5:0] add_ln415_fu_621_p2;
wire   [0:0] tmp_7_fu_631_p3;
wire   [0:0] tmp_5_fu_608_p3;
wire   [0:0] xor_ln416_fu_639_p2;
wire   [0:0] and_ln416_fu_645_p2;
wire   [0:0] select_ln777_fu_659_p3;
wire   [0:0] tmp_8_fu_651_p3;
wire   [0:0] xor_ln785_fu_665_p2;
wire   [0:0] or_ln340_fu_671_p2;
wire   [4:0] add_ln416_fu_626_p2;
wire   [0:0] icmp_ln1494_fu_603_p2;
wire   [4:0] select_ln340_fu_677_p3;
wire   [5:0] zext_ln415_1_fu_705_p1;
wire   [4:0] zext_ln415_9_fu_708_p1;
wire   [5:0] add_ln415_1_fu_711_p2;
wire   [0:0] tmp_11_fu_721_p3;
wire   [0:0] tmp_9_fu_698_p3;
wire   [0:0] xor_ln416_1_fu_729_p2;
wire   [0:0] and_ln416_1_fu_735_p2;
wire   [0:0] select_ln777_1_fu_749_p3;
wire   [0:0] tmp_12_fu_741_p3;
wire   [0:0] xor_ln785_1_fu_755_p2;
wire   [0:0] or_ln340_1_fu_761_p2;
wire   [4:0] add_ln416_1_fu_716_p2;
wire   [0:0] icmp_ln1494_1_fu_693_p2;
wire   [4:0] select_ln340_1_fu_767_p3;
wire   [5:0] zext_ln415_2_fu_795_p1;
wire   [4:0] zext_ln415_10_fu_798_p1;
wire   [5:0] add_ln415_2_fu_801_p2;
wire   [0:0] tmp_15_fu_811_p3;
wire   [0:0] tmp_13_fu_788_p3;
wire   [0:0] xor_ln416_2_fu_819_p2;
wire   [0:0] and_ln416_2_fu_825_p2;
wire   [0:0] select_ln777_2_fu_839_p3;
wire   [0:0] tmp_16_fu_831_p3;
wire   [0:0] xor_ln785_2_fu_845_p2;
wire   [0:0] or_ln340_2_fu_851_p2;
wire   [4:0] add_ln416_2_fu_806_p2;
wire   [0:0] icmp_ln1494_2_fu_783_p2;
wire   [4:0] select_ln340_2_fu_857_p3;
wire   [5:0] zext_ln415_3_fu_885_p1;
wire   [4:0] zext_ln415_11_fu_888_p1;
wire   [5:0] add_ln415_3_fu_891_p2;
wire   [0:0] tmp_19_fu_901_p3;
wire   [0:0] tmp_17_fu_878_p3;
wire   [0:0] xor_ln416_3_fu_909_p2;
wire   [0:0] and_ln416_3_fu_915_p2;
wire   [0:0] select_ln777_3_fu_929_p3;
wire   [0:0] tmp_20_fu_921_p3;
wire   [0:0] xor_ln785_3_fu_935_p2;
wire   [0:0] or_ln340_3_fu_941_p2;
wire   [4:0] add_ln416_3_fu_896_p2;
wire   [0:0] icmp_ln1494_3_fu_873_p2;
wire   [4:0] select_ln340_3_fu_947_p3;
wire   [5:0] zext_ln415_4_fu_975_p1;
wire   [4:0] zext_ln415_12_fu_978_p1;
wire   [5:0] add_ln415_4_fu_981_p2;
wire   [0:0] tmp_23_fu_991_p3;
wire   [0:0] tmp_21_fu_968_p3;
wire   [0:0] xor_ln416_4_fu_999_p2;
wire   [0:0] and_ln416_4_fu_1005_p2;
wire   [0:0] select_ln777_4_fu_1019_p3;
wire   [0:0] tmp_24_fu_1011_p3;
wire   [0:0] xor_ln785_4_fu_1025_p2;
wire   [0:0] or_ln340_4_fu_1031_p2;
wire   [4:0] add_ln416_4_fu_986_p2;
wire   [0:0] icmp_ln1494_4_fu_963_p2;
wire   [4:0] select_ln340_4_fu_1037_p3;
wire   [5:0] zext_ln415_5_fu_1065_p1;
wire   [4:0] zext_ln415_13_fu_1068_p1;
wire   [5:0] add_ln415_5_fu_1071_p2;
wire   [0:0] tmp_27_fu_1081_p3;
wire   [0:0] tmp_25_fu_1058_p3;
wire   [0:0] xor_ln416_5_fu_1089_p2;
wire   [0:0] and_ln416_5_fu_1095_p2;
wire   [0:0] select_ln777_5_fu_1109_p3;
wire   [0:0] tmp_28_fu_1101_p3;
wire   [0:0] xor_ln785_5_fu_1115_p2;
wire   [0:0] or_ln340_5_fu_1121_p2;
wire   [4:0] add_ln416_5_fu_1076_p2;
wire   [0:0] icmp_ln1494_5_fu_1053_p2;
wire   [4:0] select_ln340_5_fu_1127_p3;
wire   [5:0] zext_ln415_6_fu_1155_p1;
wire   [4:0] zext_ln415_14_fu_1158_p1;
wire   [5:0] add_ln415_6_fu_1161_p2;
wire   [0:0] tmp_31_fu_1171_p3;
wire   [0:0] tmp_29_fu_1148_p3;
wire   [0:0] xor_ln416_6_fu_1179_p2;
wire   [0:0] and_ln416_6_fu_1185_p2;
wire   [0:0] select_ln777_6_fu_1199_p3;
wire   [0:0] tmp_32_fu_1191_p3;
wire   [0:0] xor_ln785_6_fu_1205_p2;
wire   [0:0] or_ln340_6_fu_1211_p2;
wire   [4:0] add_ln416_6_fu_1166_p2;
wire   [0:0] icmp_ln1494_6_fu_1143_p2;
wire   [4:0] select_ln340_6_fu_1217_p3;
wire   [5:0] zext_ln415_7_fu_1245_p1;
wire   [4:0] zext_ln415_15_fu_1248_p1;
wire   [5:0] add_ln415_7_fu_1251_p2;
wire   [0:0] tmp_35_fu_1261_p3;
wire   [0:0] tmp_33_fu_1238_p3;
wire   [0:0] xor_ln416_7_fu_1269_p2;
wire   [0:0] and_ln416_7_fu_1275_p2;
wire   [0:0] select_ln777_7_fu_1289_p3;
wire   [0:0] tmp_36_fu_1281_p3;
wire   [0:0] xor_ln785_7_fu_1295_p2;
wire   [0:0] or_ln340_7_fu_1301_p2;
wire   [4:0] add_ln416_7_fu_1256_p2;
wire   [0:0] icmp_ln1494_7_fu_1233_p2;
wire   [4:0] select_ln340_7_fu_1307_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_fu_159_p2 == 1'd0))) begin
        i_0_reg_148 <= i_fu_165_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_148 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln60_reg_1355 <= icmp_ln60_fu_159_p2;
        icmp_ln60_reg_1355_pp0_iter1_reg <= icmp_ln60_reg_1355;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln60_reg_1355_pp0_iter2_reg <= icmp_ln60_reg_1355_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        icmp_ln768_1_reg_1459 <= icmp_ln768_1_fu_297_p2;
        icmp_ln768_2_reg_1485 <= icmp_ln768_2_fu_347_p2;
        icmp_ln768_3_reg_1511 <= icmp_ln768_3_fu_397_p2;
        icmp_ln768_4_reg_1537 <= icmp_ln768_4_fu_447_p2;
        icmp_ln768_5_reg_1563 <= icmp_ln768_5_fu_497_p2;
        icmp_ln768_6_reg_1589 <= icmp_ln768_6_fu_547_p2;
        icmp_ln768_7_reg_1615 <= icmp_ln768_7_fu_597_p2;
        icmp_ln768_reg_1433 <= icmp_ln768_fu_247_p2;
        icmp_ln879_1_reg_1454 <= icmp_ln879_1_fu_291_p2;
        icmp_ln879_2_reg_1480 <= icmp_ln879_2_fu_341_p2;
        icmp_ln879_3_reg_1506 <= icmp_ln879_3_fu_391_p2;
        icmp_ln879_4_reg_1532 <= icmp_ln879_4_fu_441_p2;
        icmp_ln879_5_reg_1558 <= icmp_ln879_5_fu_491_p2;
        icmp_ln879_6_reg_1584 <= icmp_ln879_6_fu_541_p2;
        icmp_ln879_7_reg_1610 <= icmp_ln879_7_fu_591_p2;
        icmp_ln879_reg_1428 <= icmp_ln879_fu_241_p2;
        tmp_10_reg_1443 <= data_V_data_1_V_dout[32'd2];
        tmp_14_reg_1469 <= data_V_data_2_V_dout[32'd2];
        tmp_18_reg_1495 <= data_V_data_3_V_dout[32'd2];
        tmp_22_reg_1521 <= data_V_data_4_V_dout[32'd2];
        tmp_26_reg_1547 <= data_V_data_5_V_dout[32'd2];
        tmp_30_reg_1573 <= data_V_data_6_V_dout[32'd2];
        tmp_34_reg_1599 <= data_V_data_7_V_dout[32'd2];
        tmp_6_reg_1417 <= data_V_data_0_V_dout[32'd2];
        tmp_data_V_38_0_reg_1364 <= data_V_data_0_V_dout;
        tmp_data_V_38_1_reg_1370 <= data_V_data_1_V_dout;
        tmp_data_V_38_2_reg_1376 <= data_V_data_2_V_dout;
        tmp_data_V_38_3_reg_1382 <= data_V_data_3_V_dout;
        tmp_data_V_38_4_reg_1388 <= data_V_data_4_V_dout;
        tmp_data_V_38_5_reg_1394 <= data_V_data_5_V_dout;
        tmp_data_V_38_6_reg_1400 <= data_V_data_6_V_dout;
        tmp_data_V_38_7_reg_1406 <= data_V_data_7_V_dout;
        trunc_ln415_1_reg_1501 <= {{data_V_data_3_V_dout[7:3]}};
        trunc_ln415_2_reg_1527 <= {{data_V_data_4_V_dout[7:3]}};
        trunc_ln415_3_reg_1553 <= {{data_V_data_5_V_dout[7:3]}};
        trunc_ln415_4_reg_1579 <= {{data_V_data_6_V_dout[7:3]}};
        trunc_ln415_5_reg_1605 <= {{data_V_data_7_V_dout[7:3]}};
        trunc_ln415_8_reg_1423 <= {{data_V_data_0_V_dout[7:3]}};
        trunc_ln415_9_reg_1449 <= {{data_V_data_1_V_dout[7:3]}};
        trunc_ln415_s_reg_1475 <= {{data_V_data_2_V_dout[7:3]}};
        trunc_ln708_11_reg_1464 <= {{data_V_data_2_V_dout[8:3]}};
        trunc_ln708_12_reg_1490 <= {{data_V_data_3_V_dout[8:3]}};
        trunc_ln708_13_reg_1516 <= {{data_V_data_4_V_dout[8:3]}};
        trunc_ln708_14_reg_1542 <= {{data_V_data_5_V_dout[8:3]}};
        trunc_ln708_15_reg_1568 <= {{data_V_data_6_V_dout[8:3]}};
        trunc_ln708_16_reg_1594 <= {{data_V_data_7_V_dout[8:3]}};
        trunc_ln708_s_reg_1438 <= {{data_V_data_1_V_dout[8:3]}};
        trunc_ln_reg_1412 <= {{data_V_data_0_V_dout[8:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter1_reg == 1'd0))) begin
        tmp_data_0_V_reg_1620 <= tmp_data_0_V_fu_685_p3;
        tmp_data_1_V_reg_1625 <= tmp_data_1_V_fu_775_p3;
        tmp_data_2_V_reg_1630 <= tmp_data_2_V_fu_865_p3;
        tmp_data_3_V_reg_1635 <= tmp_data_3_V_fu_955_p3;
        tmp_data_4_V_reg_1640 <= tmp_data_4_V_fu_1045_p3;
        tmp_data_5_V_reg_1645 <= tmp_data_5_V_fu_1135_p3;
        tmp_data_6_V_reg_1650 <= tmp_data_6_V_fu_1225_p3;
        tmp_data_7_V_reg_1655 <= tmp_data_7_V_fu_1315_p3;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_159_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1355 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_159_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_159_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_1_fu_711_p2 = (trunc_ln708_s_reg_1438 + zext_ln415_1_fu_705_p1);

assign add_ln415_2_fu_801_p2 = (trunc_ln708_11_reg_1464 + zext_ln415_2_fu_795_p1);

assign add_ln415_3_fu_891_p2 = (trunc_ln708_12_reg_1490 + zext_ln415_3_fu_885_p1);

assign add_ln415_4_fu_981_p2 = (trunc_ln708_13_reg_1516 + zext_ln415_4_fu_975_p1);

assign add_ln415_5_fu_1071_p2 = (trunc_ln708_14_reg_1542 + zext_ln415_5_fu_1065_p1);

assign add_ln415_6_fu_1161_p2 = (trunc_ln708_15_reg_1568 + zext_ln415_6_fu_1155_p1);

assign add_ln415_7_fu_1251_p2 = (trunc_ln708_16_reg_1594 + zext_ln415_7_fu_1245_p1);

assign add_ln415_fu_621_p2 = (trunc_ln_reg_1412 + zext_ln415_fu_615_p1);

assign add_ln416_1_fu_716_p2 = (trunc_ln415_9_reg_1449 + zext_ln415_9_fu_708_p1);

assign add_ln416_2_fu_806_p2 = (trunc_ln415_s_reg_1475 + zext_ln415_10_fu_798_p1);

assign add_ln416_3_fu_896_p2 = (trunc_ln415_1_reg_1501 + zext_ln415_11_fu_888_p1);

assign add_ln416_4_fu_986_p2 = (trunc_ln415_2_reg_1527 + zext_ln415_12_fu_978_p1);

assign add_ln416_5_fu_1076_p2 = (trunc_ln415_3_reg_1553 + zext_ln415_13_fu_1068_p1);

assign add_ln416_6_fu_1166_p2 = (trunc_ln415_4_reg_1579 + zext_ln415_14_fu_1158_p1);

assign add_ln416_7_fu_1256_p2 = (trunc_ln415_5_reg_1605 + zext_ln415_15_fu_1248_p1);

assign add_ln416_fu_626_p2 = (trunc_ln415_8_reg_1423 + zext_ln415_8_fu_618_p1);

assign and_ln416_1_fu_735_p2 = (xor_ln416_1_fu_729_p2 & tmp_9_fu_698_p3);

assign and_ln416_2_fu_825_p2 = (xor_ln416_2_fu_819_p2 & tmp_13_fu_788_p3);

assign and_ln416_3_fu_915_p2 = (xor_ln416_3_fu_909_p2 & tmp_17_fu_878_p3);

assign and_ln416_4_fu_1005_p2 = (xor_ln416_4_fu_999_p2 & tmp_21_fu_968_p3);

assign and_ln416_5_fu_1095_p2 = (xor_ln416_5_fu_1089_p2 & tmp_25_fu_1058_p3);

assign and_ln416_6_fu_1185_p2 = (xor_ln416_6_fu_1179_p2 & tmp_29_fu_1148_p3);

assign and_ln416_7_fu_1275_p2 = (xor_ln416_7_fu_1269_p2 & tmp_33_fu_1238_p3);

assign and_ln416_fu_645_p2 = (xor_ln416_fu_639_p2 & tmp_5_fu_608_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op217 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1355 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op217 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1355 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op217 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1355 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op29 == 1'b0) & (icmp_ln60_reg_1355 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op217 == 1'b0) & (icmp_ln60_reg_1355_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_165_p2 = (i_0_reg_148 + 14'd1);

assign icmp_ln1494_1_fu_693_p2 = (($signed(tmp_data_V_38_1_reg_1370) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_783_p2 = (($signed(tmp_data_V_38_2_reg_1376) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_873_p2 = (($signed(tmp_data_V_38_3_reg_1382) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_963_p2 = (($signed(tmp_data_V_38_4_reg_1388) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1053_p2 = (($signed(tmp_data_V_38_5_reg_1394) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1143_p2 = (($signed(tmp_data_V_38_6_reg_1400) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1233_p2 = (($signed(tmp_data_V_38_7_reg_1406) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_603_p2 = (($signed(tmp_data_V_38_0_reg_1364) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_159_p2 = ((i_0_reg_148 == 14'd8192) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_297_p2 = ((p_Result_7_1_fu_281_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_347_p2 = ((p_Result_7_2_fu_331_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_397_p2 = ((p_Result_7_3_fu_381_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_4_fu_447_p2 = ((p_Result_7_4_fu_431_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_5_fu_497_p2 = ((p_Result_7_5_fu_481_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_6_fu_547_p2 = ((p_Result_7_6_fu_531_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_7_fu_597_p2 = ((p_Result_7_7_fu_581_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_247_p2 = ((p_Result_7_fu_231_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_291_p2 = ((p_Result_7_1_fu_281_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_341_p2 = ((p_Result_7_2_fu_331_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_391_p2 = ((p_Result_7_3_fu_381_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_441_p2 = ((p_Result_7_4_fu_431_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_491_p2 = ((p_Result_7_5_fu_481_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_541_p2 = ((p_Result_7_6_fu_531_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_591_p2 = ((p_Result_7_7_fu_581_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_241_p2 = ((p_Result_7_fu_231_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op217 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op29 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_1_fu_761_p2 = (xor_ln785_1_fu_755_p2 | tmp_12_fu_741_p3);

assign or_ln340_2_fu_851_p2 = (xor_ln785_2_fu_845_p2 | tmp_16_fu_831_p3);

assign or_ln340_3_fu_941_p2 = (xor_ln785_3_fu_935_p2 | tmp_20_fu_921_p3);

assign or_ln340_4_fu_1031_p2 = (xor_ln785_4_fu_1025_p2 | tmp_24_fu_1011_p3);

assign or_ln340_5_fu_1121_p2 = (xor_ln785_5_fu_1115_p2 | tmp_28_fu_1101_p3);

assign or_ln340_6_fu_1211_p2 = (xor_ln785_6_fu_1205_p2 | tmp_32_fu_1191_p3);

assign or_ln340_7_fu_1301_p2 = (xor_ln785_7_fu_1295_p2 | tmp_36_fu_1281_p3);

assign or_ln340_fu_671_p2 = (xor_ln785_fu_665_p2 | tmp_8_fu_651_p3);

assign p_Result_7_1_fu_281_p4 = {{data_V_data_1_V_dout[13:9]}};

assign p_Result_7_2_fu_331_p4 = {{data_V_data_2_V_dout[13:9]}};

assign p_Result_7_3_fu_381_p4 = {{data_V_data_3_V_dout[13:9]}};

assign p_Result_7_4_fu_431_p4 = {{data_V_data_4_V_dout[13:9]}};

assign p_Result_7_5_fu_481_p4 = {{data_V_data_5_V_dout[13:9]}};

assign p_Result_7_6_fu_531_p4 = {{data_V_data_6_V_dout[13:9]}};

assign p_Result_7_7_fu_581_p4 = {{data_V_data_7_V_dout[13:9]}};

assign p_Result_7_fu_231_p4 = {{data_V_data_0_V_dout[13:9]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_1620;

assign res_V_data_1_V_din = tmp_data_1_V_reg_1625;

assign res_V_data_2_V_din = tmp_data_2_V_reg_1630;

assign res_V_data_3_V_din = tmp_data_3_V_reg_1635;

assign res_V_data_4_V_din = tmp_data_4_V_reg_1640;

assign res_V_data_5_V_din = tmp_data_5_V_reg_1645;

assign res_V_data_6_V_din = tmp_data_6_V_reg_1650;

assign res_V_data_7_V_din = tmp_data_7_V_reg_1655;

assign select_ln340_1_fu_767_p3 = ((or_ln340_1_fu_761_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_1_fu_716_p2);

assign select_ln340_2_fu_857_p3 = ((or_ln340_2_fu_851_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_2_fu_806_p2);

assign select_ln340_3_fu_947_p3 = ((or_ln340_3_fu_941_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_3_fu_896_p2);

assign select_ln340_4_fu_1037_p3 = ((or_ln340_4_fu_1031_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_4_fu_986_p2);

assign select_ln340_5_fu_1127_p3 = ((or_ln340_5_fu_1121_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_5_fu_1076_p2);

assign select_ln340_6_fu_1217_p3 = ((or_ln340_6_fu_1211_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_6_fu_1166_p2);

assign select_ln340_7_fu_1307_p3 = ((or_ln340_7_fu_1301_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_7_fu_1256_p2);

assign select_ln340_fu_677_p3 = ((or_ln340_fu_671_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_fu_626_p2);

assign select_ln777_1_fu_749_p3 = ((and_ln416_1_fu_735_p2[0:0] === 1'b1) ? icmp_ln879_1_reg_1454 : icmp_ln768_1_reg_1459);

assign select_ln777_2_fu_839_p3 = ((and_ln416_2_fu_825_p2[0:0] === 1'b1) ? icmp_ln879_2_reg_1480 : icmp_ln768_2_reg_1485);

assign select_ln777_3_fu_929_p3 = ((and_ln416_3_fu_915_p2[0:0] === 1'b1) ? icmp_ln879_3_reg_1506 : icmp_ln768_3_reg_1511);

assign select_ln777_4_fu_1019_p3 = ((and_ln416_4_fu_1005_p2[0:0] === 1'b1) ? icmp_ln879_4_reg_1532 : icmp_ln768_4_reg_1537);

assign select_ln777_5_fu_1109_p3 = ((and_ln416_5_fu_1095_p2[0:0] === 1'b1) ? icmp_ln879_5_reg_1558 : icmp_ln768_5_reg_1563);

assign select_ln777_6_fu_1199_p3 = ((and_ln416_6_fu_1185_p2[0:0] === 1'b1) ? icmp_ln879_6_reg_1584 : icmp_ln768_6_reg_1589);

assign select_ln777_7_fu_1289_p3 = ((and_ln416_7_fu_1275_p2[0:0] === 1'b1) ? icmp_ln879_7_reg_1610 : icmp_ln768_7_reg_1615);

assign select_ln777_fu_659_p3 = ((and_ln416_fu_645_p2[0:0] === 1'b1) ? icmp_ln879_reg_1428 : icmp_ln768_reg_1433);

assign start_out = real_start;

assign tmp_11_fu_721_p3 = add_ln415_1_fu_711_p2[32'd5];

assign tmp_12_fu_741_p3 = add_ln415_1_fu_711_p2[32'd5];

assign tmp_13_fu_788_p3 = tmp_data_V_38_2_reg_1376[32'd8];

assign tmp_15_fu_811_p3 = add_ln415_2_fu_801_p2[32'd5];

assign tmp_16_fu_831_p3 = add_ln415_2_fu_801_p2[32'd5];

assign tmp_17_fu_878_p3 = tmp_data_V_38_3_reg_1382[32'd8];

assign tmp_19_fu_901_p3 = add_ln415_3_fu_891_p2[32'd5];

assign tmp_20_fu_921_p3 = add_ln415_3_fu_891_p2[32'd5];

assign tmp_21_fu_968_p3 = tmp_data_V_38_4_reg_1388[32'd8];

assign tmp_23_fu_991_p3 = add_ln415_4_fu_981_p2[32'd5];

assign tmp_24_fu_1011_p3 = add_ln415_4_fu_981_p2[32'd5];

assign tmp_25_fu_1058_p3 = tmp_data_V_38_5_reg_1394[32'd8];

assign tmp_27_fu_1081_p3 = add_ln415_5_fu_1071_p2[32'd5];

assign tmp_28_fu_1101_p3 = add_ln415_5_fu_1071_p2[32'd5];

assign tmp_29_fu_1148_p3 = tmp_data_V_38_6_reg_1400[32'd8];

assign tmp_31_fu_1171_p3 = add_ln415_6_fu_1161_p2[32'd5];

assign tmp_32_fu_1191_p3 = add_ln415_6_fu_1161_p2[32'd5];

assign tmp_33_fu_1238_p3 = tmp_data_V_38_7_reg_1406[32'd8];

assign tmp_35_fu_1261_p3 = add_ln415_7_fu_1251_p2[32'd5];

assign tmp_36_fu_1281_p3 = add_ln415_7_fu_1251_p2[32'd5];

assign tmp_5_fu_608_p3 = tmp_data_V_38_0_reg_1364[32'd8];

assign tmp_7_fu_631_p3 = add_ln415_fu_621_p2[32'd5];

assign tmp_8_fu_651_p3 = add_ln415_fu_621_p2[32'd5];

assign tmp_9_fu_698_p3 = tmp_data_V_38_1_reg_1370[32'd8];

assign tmp_data_0_V_fu_685_p3 = ((icmp_ln1494_fu_603_p2[0:0] === 1'b1) ? select_ln340_fu_677_p3 : 5'd0);

assign tmp_data_1_V_fu_775_p3 = ((icmp_ln1494_1_fu_693_p2[0:0] === 1'b1) ? select_ln340_1_fu_767_p3 : 5'd0);

assign tmp_data_2_V_fu_865_p3 = ((icmp_ln1494_2_fu_783_p2[0:0] === 1'b1) ? select_ln340_2_fu_857_p3 : 5'd0);

assign tmp_data_3_V_fu_955_p3 = ((icmp_ln1494_3_fu_873_p2[0:0] === 1'b1) ? select_ln340_3_fu_947_p3 : 5'd0);

assign tmp_data_4_V_fu_1045_p3 = ((icmp_ln1494_4_fu_963_p2[0:0] === 1'b1) ? select_ln340_4_fu_1037_p3 : 5'd0);

assign tmp_data_5_V_fu_1135_p3 = ((icmp_ln1494_5_fu_1053_p2[0:0] === 1'b1) ? select_ln340_5_fu_1127_p3 : 5'd0);

assign tmp_data_6_V_fu_1225_p3 = ((icmp_ln1494_6_fu_1143_p2[0:0] === 1'b1) ? select_ln340_6_fu_1217_p3 : 5'd0);

assign tmp_data_7_V_fu_1315_p3 = ((icmp_ln1494_7_fu_1233_p2[0:0] === 1'b1) ? select_ln340_7_fu_1307_p3 : 5'd0);

assign xor_ln416_1_fu_729_p2 = (tmp_11_fu_721_p3 ^ 1'd1);

assign xor_ln416_2_fu_819_p2 = (tmp_15_fu_811_p3 ^ 1'd1);

assign xor_ln416_3_fu_909_p2 = (tmp_19_fu_901_p3 ^ 1'd1);

assign xor_ln416_4_fu_999_p2 = (tmp_23_fu_991_p3 ^ 1'd1);

assign xor_ln416_5_fu_1089_p2 = (tmp_27_fu_1081_p3 ^ 1'd1);

assign xor_ln416_6_fu_1179_p2 = (tmp_31_fu_1171_p3 ^ 1'd1);

assign xor_ln416_7_fu_1269_p2 = (tmp_35_fu_1261_p3 ^ 1'd1);

assign xor_ln416_fu_639_p2 = (tmp_7_fu_631_p3 ^ 1'd1);

assign xor_ln785_1_fu_755_p2 = (select_ln777_1_fu_749_p3 ^ 1'd1);

assign xor_ln785_2_fu_845_p2 = (select_ln777_2_fu_839_p3 ^ 1'd1);

assign xor_ln785_3_fu_935_p2 = (select_ln777_3_fu_929_p3 ^ 1'd1);

assign xor_ln785_4_fu_1025_p2 = (select_ln777_4_fu_1019_p3 ^ 1'd1);

assign xor_ln785_5_fu_1115_p2 = (select_ln777_5_fu_1109_p3 ^ 1'd1);

assign xor_ln785_6_fu_1205_p2 = (select_ln777_6_fu_1199_p3 ^ 1'd1);

assign xor_ln785_7_fu_1295_p2 = (select_ln777_7_fu_1289_p3 ^ 1'd1);

assign xor_ln785_fu_665_p2 = (select_ln777_fu_659_p3 ^ 1'd1);

assign zext_ln415_10_fu_798_p1 = tmp_14_reg_1469;

assign zext_ln415_11_fu_888_p1 = tmp_18_reg_1495;

assign zext_ln415_12_fu_978_p1 = tmp_22_reg_1521;

assign zext_ln415_13_fu_1068_p1 = tmp_26_reg_1547;

assign zext_ln415_14_fu_1158_p1 = tmp_30_reg_1573;

assign zext_ln415_15_fu_1248_p1 = tmp_34_reg_1599;

assign zext_ln415_1_fu_705_p1 = tmp_10_reg_1443;

assign zext_ln415_2_fu_795_p1 = tmp_14_reg_1469;

assign zext_ln415_3_fu_885_p1 = tmp_18_reg_1495;

assign zext_ln415_4_fu_975_p1 = tmp_22_reg_1521;

assign zext_ln415_5_fu_1065_p1 = tmp_26_reg_1547;

assign zext_ln415_6_fu_1155_p1 = tmp_30_reg_1573;

assign zext_ln415_7_fu_1245_p1 = tmp_34_reg_1599;

assign zext_ln415_8_fu_618_p1 = tmp_6_reg_1417;

assign zext_ln415_9_fu_708_p1 = tmp_10_reg_1443;

assign zext_ln415_fu_615_p1 = tmp_6_reg_1417;

endmodule //relu_array_array_ap_fixed_8u_relu_config4_s
