// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_myproject_axi_exit38_proc715.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_myproject_axi_exit38_proc715::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_myproject_axi_exit38_proc715::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Block_myproject_axi_exit38_proc715::ap_ST_fsm_state1 = "1";
const sc_lv<3> Block_myproject_axi_exit38_proc715::ap_ST_fsm_state2 = "10";
const sc_lv<3> Block_myproject_axi_exit38_proc715::ap_ST_fsm_state3 = "100";
const sc_lv<32> Block_myproject_axi_exit38_proc715::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Block_myproject_axi_exit38_proc715::ap_const_lv32_1 = "1";
const sc_lv<32> Block_myproject_axi_exit38_proc715::ap_const_lv32_2 = "10";
const bool Block_myproject_axi_exit38_proc715::ap_const_boolean_1 = true;

Block_myproject_axi_exit38_proc715::Block_myproject_axi_exit38_proc715(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( io_acc_block_signal_op4 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_io_acc_block_signal_op4);
    sensitive << ( out_local_V_data_0_V_empty_n );
    sensitive << ( out_local_V_data_1_V_empty_n );
    sensitive << ( out_local_V_data_2_V_empty_n );

    SC_METHOD(thread_out_local_V_data_0_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_0_V_empty_n );

    SC_METHOD(thread_out_local_V_data_0_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( io_acc_block_signal_op4 );

    SC_METHOD(thread_out_local_V_data_1_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_1_V_empty_n );

    SC_METHOD(thread_out_local_V_data_1_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( io_acc_block_signal_op4 );

    SC_METHOD(thread_out_local_V_data_2_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_2_V_empty_n );

    SC_METHOD(thread_out_local_V_data_2_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( io_acc_block_signal_op4 );

    SC_METHOD(thread_tmp_data_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_data_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_local_V_data_0_V_dout );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_data_V_74_12_reg_54 );
    sensitive << ( io_acc_block_signal_op4 );
    sensitive << ( tmp_data_V_74_23_reg_59 );

    SC_METHOD(thread_tmp_data_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( io_acc_block_signal_op4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_data_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( io_acc_block_signal_op4 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_myproject_axi_exit38_proc715_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_local_V_data_0_V_dout, "(port)out_local_V_data_0_V_dout");
    sc_trace(mVcdFile, out_local_V_data_0_V_empty_n, "(port)out_local_V_data_0_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_0_V_read, "(port)out_local_V_data_0_V_read");
    sc_trace(mVcdFile, out_local_V_data_1_V_dout, "(port)out_local_V_data_1_V_dout");
    sc_trace(mVcdFile, out_local_V_data_1_V_empty_n, "(port)out_local_V_data_1_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_1_V_read, "(port)out_local_V_data_1_V_read");
    sc_trace(mVcdFile, out_local_V_data_2_V_dout, "(port)out_local_V_data_2_V_dout");
    sc_trace(mVcdFile, out_local_V_data_2_V_empty_n, "(port)out_local_V_data_2_V_empty_n");
    sc_trace(mVcdFile, out_local_V_data_2_V_read, "(port)out_local_V_data_2_V_read");
    sc_trace(mVcdFile, tmp_data_V_din, "(port)tmp_data_V_din");
    sc_trace(mVcdFile, tmp_data_V_full_n, "(port)tmp_data_V_full_n");
    sc_trace(mVcdFile, tmp_data_V_write, "(port)tmp_data_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_local_V_data_0_V_blk_n, "out_local_V_data_0_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_1_V_blk_n, "out_local_V_data_1_V_blk_n");
    sc_trace(mVcdFile, out_local_V_data_2_V_blk_n, "out_local_V_data_2_V_blk_n");
    sc_trace(mVcdFile, tmp_data_V_blk_n, "tmp_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_data_V_74_12_reg_54, "tmp_data_V_74_12_reg_54");
    sc_trace(mVcdFile, io_acc_block_signal_op4, "io_acc_block_signal_op4");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_data_V_74_23_reg_59, "tmp_data_V_74_23_reg_59");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_myproject_axi_exit38_proc715::~Block_myproject_axi_exit38_proc715() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_myproject_axi_exit38_proc715::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read())))) {
        tmp_data_V_74_12_reg_54 = out_local_V_data_1_V_dout.read();
        tmp_data_V_74_23_reg_59 = out_local_V_data_2_V_dout.read();
    }
}

void Block_myproject_axi_exit38_proc715::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_myproject_axi_exit38_proc715::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_myproject_axi_exit38_proc715::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Block_myproject_axi_exit38_proc715::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read()));
}

void Block_myproject_axi_exit38_proc715::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_myproject_axi_exit38_proc715::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit38_proc715::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit38_proc715::thread_io_acc_block_signal_op4() {
    io_acc_block_signal_op4 = (out_local_V_data_0_V_empty_n.read() & out_local_V_data_1_V_empty_n.read() & out_local_V_data_2_V_empty_n.read());
}

void Block_myproject_axi_exit38_proc715::thread_out_local_V_data_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_0_V_blk_n = out_local_V_data_0_V_empty_n.read();
    } else {
        out_local_V_data_0_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit38_proc715::thread_out_local_V_data_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read())))) {
        out_local_V_data_0_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_0_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit38_proc715::thread_out_local_V_data_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_1_V_blk_n = out_local_V_data_1_V_empty_n.read();
    } else {
        out_local_V_data_1_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit38_proc715::thread_out_local_V_data_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read())))) {
        out_local_V_data_1_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_1_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit38_proc715::thread_out_local_V_data_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_local_V_data_2_V_blk_n = out_local_V_data_2_V_empty_n.read();
    } else {
        out_local_V_data_2_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit38_proc715::thread_out_local_V_data_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read())))) {
        out_local_V_data_2_V_read = ap_const_logic_1;
    } else {
        out_local_V_data_2_V_read = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit38_proc715::thread_tmp_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_data_V_blk_n = tmp_data_V_full_n.read();
    } else {
        tmp_data_V_blk_n = ap_const_logic_1;
    }
}

void Block_myproject_axi_exit38_proc715::thread_tmp_data_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1))) {
        tmp_data_V_din = tmp_data_V_74_23_reg_59.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1))) {
        tmp_data_V_din = tmp_data_V_74_12_reg_54.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read())))) {
        tmp_data_V_din = out_local_V_data_0_V_dout.read();
    } else {
        tmp_data_V_din = "XXXXXXXXXXXXXXXX";
    }
}

void Block_myproject_axi_exit38_proc715::thread_tmp_data_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1)))) {
        tmp_data_V_write = ap_const_logic_1;
    } else {
        tmp_data_V_write = ap_const_logic_0;
    }
}

void Block_myproject_axi_exit38_proc715::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op4.read()) || esl_seteq<1,1,1>(ap_const_logic_0, tmp_data_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_data_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

