-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_array_array_ap_fixed_5u_relu_config21_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of relu_array_array_ap_fixed_5u_relu_config21_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal io_acc_block_signal_op4 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op133 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal data_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal tmp_data_V_40_0_reg_853 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_V_40_1_reg_859 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_V_40_2_reg_865 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_V_40_3_reg_871 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_V_40_4_reg_877 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_reg_883 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_s_reg_894 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln879_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_reg_904 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_s_reg_909 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_6_reg_920 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln879_8_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_8_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_8_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_8_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_17_reg_935 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_reg_940 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_7_reg_946 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln879_9_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_9_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_9_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_9_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_18_reg_961 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_8_reg_972 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln879_10_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_10_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_10_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_10_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_19_reg_987 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_9_reg_998 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln879_11_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_11_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_11_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_11_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_fu_793_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_0_V_reg_1013 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_1_V_fu_801_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_1_V_reg_1018 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_2_V_fu_809_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_2_V_reg_1023 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_3_V_fu_817_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_3_V_reg_1028 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_4_V_fu_825_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_4_V_reg_1033 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Result_s_fu_161_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_11_1_fu_211_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_11_2_fu_261_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_11_3_fu_311_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_11_4_fu_361_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln415_fu_395_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln415_16_fu_398_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln415_fu_401_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_388_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln416_fu_406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln415_8_fu_477_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln415_17_fu_480_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln415_8_fu_483_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_8_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_8_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_8_fu_521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_513_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln416_8_fu_488_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln415_9_fu_559_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln415_18_fu_562_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln415_9_fu_565_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_9_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_9_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_9_fu_603_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln416_9_fu_570_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln415_10_fu_641_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln415_19_fu_644_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln415_10_fu_647_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_fu_657_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_10_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_10_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_10_fu_685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_677_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_3_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln416_10_fu_652_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln415_11_fu_723_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln415_20_fu_726_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln415_11_fu_729_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_739_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_716_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_11_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_11_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_11_fu_767_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_759_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_4_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln416_11_fu_734_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1494_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_457_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1494_1_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_539_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1494_2_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_621_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1494_3_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_703_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1494_4_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_785_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln768_10_reg_982 <= icmp_ln768_10_fu_327_p2;
                icmp_ln768_11_reg_1008 <= icmp_ln768_11_fu_377_p2;
                icmp_ln768_8_reg_930 <= icmp_ln768_8_fu_227_p2;
                icmp_ln768_9_reg_956 <= icmp_ln768_9_fu_277_p2;
                icmp_ln768_reg_904 <= icmp_ln768_fu_177_p2;
                icmp_ln879_10_reg_977 <= icmp_ln879_10_fu_321_p2;
                icmp_ln879_11_reg_1003 <= icmp_ln879_11_fu_371_p2;
                icmp_ln879_8_reg_925 <= icmp_ln879_8_fu_221_p2;
                icmp_ln879_9_reg_951 <= icmp_ln879_9_fu_271_p2;
                icmp_ln879_reg_899 <= icmp_ln879_fu_171_p2;
                tmp_38_reg_888 <= data_V_data_0_V_dout(2 downto 2);
                tmp_42_reg_914 <= data_V_data_1_V_dout(2 downto 2);
                tmp_46_reg_940 <= data_V_data_2_V_dout(2 downto 2);
                tmp_50_reg_966 <= data_V_data_3_V_dout(2 downto 2);
                tmp_54_reg_992 <= data_V_data_4_V_dout(2 downto 2);
                tmp_data_0_V_reg_1013 <= tmp_data_0_V_fu_793_p3;
                tmp_data_1_V_reg_1018 <= tmp_data_1_V_fu_801_p3;
                tmp_data_2_V_reg_1023 <= tmp_data_2_V_fu_809_p3;
                tmp_data_3_V_reg_1028 <= tmp_data_3_V_fu_817_p3;
                tmp_data_4_V_reg_1033 <= tmp_data_4_V_fu_825_p3;
                tmp_data_V_40_0_reg_853 <= data_V_data_0_V_dout;
                tmp_data_V_40_1_reg_859 <= data_V_data_1_V_dout;
                tmp_data_V_40_2_reg_865 <= data_V_data_2_V_dout;
                tmp_data_V_40_3_reg_871 <= data_V_data_3_V_dout;
                tmp_data_V_40_4_reg_877 <= data_V_data_4_V_dout;
                trunc_ln415_6_reg_920 <= data_V_data_1_V_dout(7 downto 3);
                trunc_ln415_7_reg_946 <= data_V_data_2_V_dout(7 downto 3);
                trunc_ln415_8_reg_972 <= data_V_data_3_V_dout(7 downto 3);
                trunc_ln415_9_reg_998 <= data_V_data_4_V_dout(7 downto 3);
                trunc_ln415_s_reg_894 <= data_V_data_0_V_dout(7 downto 3);
                trunc_ln708_17_reg_935 <= data_V_data_2_V_dout(8 downto 3);
                trunc_ln708_18_reg_961 <= data_V_data_3_V_dout(8 downto 3);
                trunc_ln708_19_reg_987 <= data_V_data_4_V_dout(8 downto 3);
                trunc_ln708_s_reg_909 <= data_V_data_1_V_dout(8 downto 3);
                trunc_ln_reg_883 <= data_V_data_0_V_dout(8 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln415_10_fu_647_p2 <= std_logic_vector(unsigned(trunc_ln708_18_reg_961) + unsigned(zext_ln415_10_fu_641_p1));
    add_ln415_11_fu_729_p2 <= std_logic_vector(unsigned(trunc_ln708_19_reg_987) + unsigned(zext_ln415_11_fu_723_p1));
    add_ln415_8_fu_483_p2 <= std_logic_vector(unsigned(trunc_ln708_s_reg_909) + unsigned(zext_ln415_8_fu_477_p1));
    add_ln415_9_fu_565_p2 <= std_logic_vector(unsigned(trunc_ln708_17_reg_935) + unsigned(zext_ln415_9_fu_559_p1));
    add_ln415_fu_401_p2 <= std_logic_vector(unsigned(trunc_ln_reg_883) + unsigned(zext_ln415_fu_395_p1));
    add_ln416_10_fu_652_p2 <= std_logic_vector(unsigned(trunc_ln415_8_reg_972) + unsigned(zext_ln415_19_fu_644_p1));
    add_ln416_11_fu_734_p2 <= std_logic_vector(unsigned(trunc_ln415_9_reg_998) + unsigned(zext_ln415_20_fu_726_p1));
    add_ln416_8_fu_488_p2 <= std_logic_vector(unsigned(trunc_ln415_6_reg_920) + unsigned(zext_ln415_17_fu_480_p1));
    add_ln416_9_fu_570_p2 <= std_logic_vector(unsigned(trunc_ln415_7_reg_946) + unsigned(zext_ln415_18_fu_562_p1));
    add_ln416_fu_406_p2 <= std_logic_vector(unsigned(trunc_ln415_s_reg_894) + unsigned(zext_ln415_16_fu_398_p1));
    and_ln416_10_fu_671_p2 <= (xor_ln416_10_fu_665_p2 and tmp_49_fu_634_p3);
    and_ln416_11_fu_753_p2 <= (xor_ln416_11_fu_747_p2 and tmp_53_fu_716_p3);
    and_ln416_8_fu_507_p2 <= (xor_ln416_8_fu_501_p2 and tmp_41_fu_470_p3);
    and_ln416_9_fu_589_p2 <= (xor_ln416_9_fu_583_p2 and tmp_45_fu_552_p3);
    and_ln416_fu_425_p2 <= (xor_ln416_fu_419_p2 and tmp_37_fu_388_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter2, io_acc_block_signal_op4, io_acc_block_signal_op133)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((io_acc_block_signal_op133 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (io_acc_block_signal_op4 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter2, io_acc_block_signal_op4, io_acc_block_signal_op133)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((io_acc_block_signal_op133 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (io_acc_block_signal_op4 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter2, io_acc_block_signal_op4, io_acc_block_signal_op133)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((io_acc_block_signal_op133 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (io_acc_block_signal_op4 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(real_start, ap_done_reg, io_acc_block_signal_op4)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((real_start = ap_const_logic_0) or (io_acc_block_signal_op4 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(io_acc_block_signal_op133)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (io_acc_block_signal_op133 = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_pp0_stage0, data_V_data_0_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_pp0_stage0, data_V_data_1_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_pp0_stage0, data_V_data_2_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_pp0_stage0, data_V_data_3_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_pp0_stage0, data_V_data_4_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_1_fu_465_p2 <= "1" when (signed(tmp_data_V_40_1_reg_859) > signed(ap_const_lv14_0)) else "0";
    icmp_ln1494_2_fu_547_p2 <= "1" when (signed(tmp_data_V_40_2_reg_865) > signed(ap_const_lv14_0)) else "0";
    icmp_ln1494_3_fu_629_p2 <= "1" when (signed(tmp_data_V_40_3_reg_871) > signed(ap_const_lv14_0)) else "0";
    icmp_ln1494_4_fu_711_p2 <= "1" when (signed(tmp_data_V_40_4_reg_877) > signed(ap_const_lv14_0)) else "0";
    icmp_ln1494_fu_383_p2 <= "1" when (signed(tmp_data_V_40_0_reg_853) > signed(ap_const_lv14_0)) else "0";
    icmp_ln768_10_fu_327_p2 <= "1" when (p_Result_11_3_fu_311_p4 = ap_const_lv5_0) else "0";
    icmp_ln768_11_fu_377_p2 <= "1" when (p_Result_11_4_fu_361_p4 = ap_const_lv5_0) else "0";
    icmp_ln768_8_fu_227_p2 <= "1" when (p_Result_11_1_fu_211_p4 = ap_const_lv5_0) else "0";
    icmp_ln768_9_fu_277_p2 <= "1" when (p_Result_11_2_fu_261_p4 = ap_const_lv5_0) else "0";
    icmp_ln768_fu_177_p2 <= "1" when (p_Result_s_fu_161_p4 = ap_const_lv5_0) else "0";
    icmp_ln879_10_fu_321_p2 <= "1" when (p_Result_11_3_fu_311_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_11_fu_371_p2 <= "1" when (p_Result_11_4_fu_361_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_8_fu_221_p2 <= "1" when (p_Result_11_1_fu_211_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_9_fu_271_p2 <= "1" when (p_Result_11_2_fu_261_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_fu_171_p2 <= "1" when (p_Result_s_fu_161_p4 = ap_const_lv5_1F) else "0";

    internal_ap_ready_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op133 <= (res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op4 <= (data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    or_ln340_1_fu_533_p2 <= (xor_ln785_1_fu_527_p2 or tmp_44_fu_513_p3);
    or_ln340_2_fu_615_p2 <= (xor_ln785_2_fu_609_p2 or tmp_48_fu_595_p3);
    or_ln340_3_fu_697_p2 <= (xor_ln785_3_fu_691_p2 or tmp_52_fu_677_p3);
    or_ln340_4_fu_779_p2 <= (xor_ln785_4_fu_773_p2 or tmp_56_fu_759_p3);
    or_ln340_fu_451_p2 <= (xor_ln785_fu_445_p2 or tmp_40_fu_431_p3);
    p_Result_11_1_fu_211_p4 <= data_V_data_1_V_dout(13 downto 9);
    p_Result_11_2_fu_261_p4 <= data_V_data_2_V_dout(13 downto 9);
    p_Result_11_3_fu_311_p4 <= data_V_data_3_V_dout(13 downto 9);
    p_Result_11_4_fu_361_p4 <= data_V_data_4_V_dout(13 downto 9);
    p_Result_s_fu_161_p4 <= data_V_data_0_V_dout(13 downto 9);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_0_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_0_V_reg_1013),6));

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_1_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_1_V_reg_1018),6));

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_2_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_2_V_reg_1023),6));

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_3_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_3_V_reg_1028),6));

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_4_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_4_V_reg_1033),6));

    res_V_data_4_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_1_fu_539_p3 <= 
        ap_const_lv5_1F when (or_ln340_1_fu_533_p2(0) = '1') else 
        add_ln416_8_fu_488_p2;
    select_ln340_2_fu_621_p3 <= 
        ap_const_lv5_1F when (or_ln340_2_fu_615_p2(0) = '1') else 
        add_ln416_9_fu_570_p2;
    select_ln340_3_fu_703_p3 <= 
        ap_const_lv5_1F when (or_ln340_3_fu_697_p2(0) = '1') else 
        add_ln416_10_fu_652_p2;
    select_ln340_4_fu_785_p3 <= 
        ap_const_lv5_1F when (or_ln340_4_fu_779_p2(0) = '1') else 
        add_ln416_11_fu_734_p2;
    select_ln340_fu_457_p3 <= 
        ap_const_lv5_1F when (or_ln340_fu_451_p2(0) = '1') else 
        add_ln416_fu_406_p2;
    select_ln777_10_fu_685_p3 <= 
        icmp_ln879_10_reg_977 when (and_ln416_10_fu_671_p2(0) = '1') else 
        icmp_ln768_10_reg_982;
    select_ln777_11_fu_767_p3 <= 
        icmp_ln879_11_reg_1003 when (and_ln416_11_fu_753_p2(0) = '1') else 
        icmp_ln768_11_reg_1008;
    select_ln777_8_fu_521_p3 <= 
        icmp_ln879_8_reg_925 when (and_ln416_8_fu_507_p2(0) = '1') else 
        icmp_ln768_8_reg_930;
    select_ln777_9_fu_603_p3 <= 
        icmp_ln879_9_reg_951 when (and_ln416_9_fu_589_p2(0) = '1') else 
        icmp_ln768_9_reg_956;
    select_ln777_fu_439_p3 <= 
        icmp_ln879_reg_899 when (and_ln416_fu_425_p2(0) = '1') else 
        icmp_ln768_reg_904;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_37_fu_388_p3 <= tmp_data_V_40_0_reg_853(8 downto 8);
    tmp_39_fu_411_p3 <= add_ln415_fu_401_p2(5 downto 5);
    tmp_40_fu_431_p3 <= add_ln415_fu_401_p2(5 downto 5);
    tmp_41_fu_470_p3 <= tmp_data_V_40_1_reg_859(8 downto 8);
    tmp_43_fu_493_p3 <= add_ln415_8_fu_483_p2(5 downto 5);
    tmp_44_fu_513_p3 <= add_ln415_8_fu_483_p2(5 downto 5);
    tmp_45_fu_552_p3 <= tmp_data_V_40_2_reg_865(8 downto 8);
    tmp_47_fu_575_p3 <= add_ln415_9_fu_565_p2(5 downto 5);
    tmp_48_fu_595_p3 <= add_ln415_9_fu_565_p2(5 downto 5);
    tmp_49_fu_634_p3 <= tmp_data_V_40_3_reg_871(8 downto 8);
    tmp_51_fu_657_p3 <= add_ln415_10_fu_647_p2(5 downto 5);
    tmp_52_fu_677_p3 <= add_ln415_10_fu_647_p2(5 downto 5);
    tmp_53_fu_716_p3 <= tmp_data_V_40_4_reg_877(8 downto 8);
    tmp_55_fu_739_p3 <= add_ln415_11_fu_729_p2(5 downto 5);
    tmp_56_fu_759_p3 <= add_ln415_11_fu_729_p2(5 downto 5);
    tmp_data_0_V_fu_793_p3 <= 
        select_ln340_fu_457_p3 when (icmp_ln1494_fu_383_p2(0) = '1') else 
        ap_const_lv5_0;
    tmp_data_1_V_fu_801_p3 <= 
        select_ln340_1_fu_539_p3 when (icmp_ln1494_1_fu_465_p2(0) = '1') else 
        ap_const_lv5_0;
    tmp_data_2_V_fu_809_p3 <= 
        select_ln340_2_fu_621_p3 when (icmp_ln1494_2_fu_547_p2(0) = '1') else 
        ap_const_lv5_0;
    tmp_data_3_V_fu_817_p3 <= 
        select_ln340_3_fu_703_p3 when (icmp_ln1494_3_fu_629_p2(0) = '1') else 
        ap_const_lv5_0;
    tmp_data_4_V_fu_825_p3 <= 
        select_ln340_4_fu_785_p3 when (icmp_ln1494_4_fu_711_p2(0) = '1') else 
        ap_const_lv5_0;
    xor_ln416_10_fu_665_p2 <= (tmp_51_fu_657_p3 xor ap_const_lv1_1);
    xor_ln416_11_fu_747_p2 <= (tmp_55_fu_739_p3 xor ap_const_lv1_1);
    xor_ln416_8_fu_501_p2 <= (tmp_43_fu_493_p3 xor ap_const_lv1_1);
    xor_ln416_9_fu_583_p2 <= (tmp_47_fu_575_p3 xor ap_const_lv1_1);
    xor_ln416_fu_419_p2 <= (tmp_39_fu_411_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_527_p2 <= (select_ln777_8_fu_521_p3 xor ap_const_lv1_1);
    xor_ln785_2_fu_609_p2 <= (select_ln777_9_fu_603_p3 xor ap_const_lv1_1);
    xor_ln785_3_fu_691_p2 <= (select_ln777_10_fu_685_p3 xor ap_const_lv1_1);
    xor_ln785_4_fu_773_p2 <= (select_ln777_11_fu_767_p3 xor ap_const_lv1_1);
    xor_ln785_fu_445_p2 <= (select_ln777_fu_439_p3 xor ap_const_lv1_1);
    zext_ln415_10_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_966),6));
    zext_ln415_11_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_reg_992),6));
    zext_ln415_16_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_reg_888),5));
    zext_ln415_17_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_reg_914),5));
    zext_ln415_18_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_940),5));
    zext_ln415_19_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_966),5));
    zext_ln415_20_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_reg_992),5));
    zext_ln415_8_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_reg_914),6));
    zext_ln415_9_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_940),6));
    zext_ln415_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_reg_888),6));
end behav;
