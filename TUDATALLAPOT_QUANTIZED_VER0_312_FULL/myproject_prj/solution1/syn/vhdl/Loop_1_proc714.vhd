-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc714 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_local_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_local_V_data_0_V_full_n : IN STD_LOGIC;
    in_local_V_data_0_V_write : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    is_last_0_i_out_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    is_last_0_i_out_out_full_n : IN STD_LOGIC;
    is_last_0_i_out_out_write : OUT STD_LOGIC );
end;


architecture behav of Loop_1_proc714 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_FF6 : STD_LOGIC_VECTOR (11 downto 0) := "111111110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_vld_in : STD_LOGIC;
    signal in_last_V_0_vld_out : STD_LOGIC;
    signal in_last_V_0_ack_in : STD_LOGIC;
    signal in_last_V_0_ack_out : STD_LOGIC;
    signal in_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_last_V_0_sel : STD_LOGIC;
    signal in_last_V_0_load_A : STD_LOGIC;
    signal in_last_V_0_load_B : STD_LOGIC;
    signal in_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_last_V_0_state_cmp_full : STD_LOGIC;
    signal in_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_0_vld_in : STD_LOGIC;
    signal in_data_0_vld_out : STD_LOGIC;
    signal in_data_0_ack_in : STD_LOGIC;
    signal in_data_0_ack_out : STD_LOGIC;
    signal in_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_0_sel_rd : STD_LOGIC := '0';
    signal in_data_0_sel_wr : STD_LOGIC := '0';
    signal in_data_0_sel : STD_LOGIC;
    signal in_data_0_load_A : STD_LOGIC;
    signal in_data_0_load_B : STD_LOGIC;
    signal in_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_0_state_cmp_full : STD_LOGIC;
    signal in_local_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln23_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_0_i_out_out_blk_n : STD_LOGIC;
    signal i_fu_144_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_437 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal in_data_tmp_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln28_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln557_fu_169_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln557_reg_453 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_i_reg_463 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_191_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_468 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln570_fu_215_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln570_reg_473 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln571_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln581_fu_251_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln581_reg_490 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_503 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_297_reg_509 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal and_ln585_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_reg_535 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_reg_540 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_ln603_2_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_421_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_2_reg_550 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal is_last_0_i_out_dc_0_reg_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_0_i3_i_reg_124 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln696_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_198_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_205_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln461_fu_209_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln461_fu_195_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln575_fu_227_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_239_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_245_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_1_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_298_fu_304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_312_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln571_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_1_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln604_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_fu_414_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_135_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component myproject_axi_fpext_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component myproject_axi_ashr_54ns_32ns_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (53 downto 0);
        din1 : IN STD_LOGIC_VECTOR (53 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;



begin
    myproject_axi_fpext_32ns_64_3_1_U1 : component myproject_axi_fpext_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_data_0_data_out,
        ce => grp_fu_135_ce,
        dout => grp_fu_135_p1);

    myproject_axi_ashr_54ns_32ns_54_2_1_U2 : component myproject_axi_ashr_54ns_32ns_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 2,
        din0_WIDTH => 54,
        din1_WIDTH => 32,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln570_reg_473,
        din1 => grp_fu_296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    in_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_0_ack_out = ap_const_logic_1) and (in_data_0_vld_out = ap_const_logic_1))) then 
                                        in_data_0_sel_rd <= not(in_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_0_ack_in = ap_const_logic_1) and (in_data_0_vld_in = ap_const_logic_1))) then 
                                        in_data_0_sel_wr <= not(in_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_data_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_0_state = ap_const_lv2_2) and (in_data_0_vld_in = ap_const_logic_0)) or ((in_data_0_state = ap_const_lv2_3) and (in_data_0_vld_in = ap_const_logic_0) and (in_data_0_ack_out = ap_const_logic_1)))) then 
                    in_data_0_state <= ap_const_lv2_2;
                elsif ((((in_data_0_state = ap_const_lv2_1) and (in_data_0_ack_out = ap_const_logic_0)) or ((in_data_0_state = ap_const_lv2_3) and (in_data_0_ack_out = ap_const_logic_0) and (in_data_0_vld_in = ap_const_logic_1)))) then 
                    in_data_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_0_vld_in = ap_const_logic_0) and (in_data_0_ack_out = ap_const_logic_1))) and not(((in_data_0_ack_out = ap_const_logic_0) and (in_data_0_vld_in = ap_const_logic_1))) and (in_data_0_state = ap_const_lv2_3)) or ((in_data_0_state = ap_const_lv2_1) and (in_data_0_ack_out = ap_const_logic_1)) or ((in_data_0_state = ap_const_lv2_2) and (in_data_0_vld_in = ap_const_logic_1)))) then 
                    in_data_0_state <= ap_const_lv2_3;
                else 
                    in_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_out = ap_const_logic_1) and (in_last_V_0_vld_out = ap_const_logic_1))) then 
                                        in_last_V_0_sel_rd <= not(in_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_last_V_0_ack_in = ap_const_logic_1) and (in_last_V_0_vld_in = ap_const_logic_1))) then 
                                        in_last_V_0_sel_wr <= not(in_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_0)) or ((in_last_V_0_state = ap_const_lv2_3) and (in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_last_V_0_vld_in = ap_const_logic_0) and (in_last_V_0_ack_out = ap_const_logic_1))) and not(((in_last_V_0_ack_out = ap_const_logic_0) and (in_last_V_0_vld_in = ap_const_logic_1))) and (in_last_V_0_state = ap_const_lv2_3)) or ((in_last_V_0_state = ap_const_lv2_1) and (in_last_V_0_ack_out = ap_const_logic_1)) or ((in_last_V_0_state = ap_const_lv2_2) and (in_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i3_i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_local_V_data_0_V_full_n = ap_const_logic_1))) then 
                i_0_i3_i_reg_124 <= i_reg_437;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i3_i_reg_124 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    is_last_0_i_out_dc_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_local_V_data_0_V_full_n = ap_const_logic_1))) then 
                is_last_0_i_out_dc_0_reg_112 <= or_ln28_reg_448;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                is_last_0_i_out_dc_0_reg_112 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                and_ln585_reg_519 <= and_ln585_fu_341_p2;
                and_ln603_reg_524 <= and_ln603_fu_364_p2;
                or_ln603_reg_529 <= or_ln603_fu_370_p2;
                select_ln603_1_reg_535 <= select_ln603_1_fu_376_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ashr_ln586_reg_540 <= grp_fu_296_p2;
                or_ln603_2_reg_545 <= or_ln603_2_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_437 <= i_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln571_reg_478 <= icmp_ln571_fu_222_p2;
                icmp_ln581_reg_484 <= icmp_ln581_fu_233_p2;
                icmp_ln582_reg_497 <= icmp_ln582_fu_259_p2;
                select_ln570_reg_473 <= select_ln570_fu_215_p3;
                select_ln581_reg_490 <= select_ln581_fu_251_p3;
                tmp_297_reg_509 <= select_ln581_fu_251_p3(11 downto 4);
                trunc_ln583_reg_503 <= trunc_ln583_fu_265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_0_load_A = ap_const_logic_1)) then
                in_data_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_0_load_B = ap_const_logic_1)) then
                in_data_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                in_data_tmp_reg_442 <= in_data_0_data_out;
                or_ln28_reg_448 <= or_ln28_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_A = ap_const_logic_1)) then
                in_last_V_0_payload_A <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_last_V_0_load_B = ap_const_logic_1)) then
                in_last_V_0_payload_B <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Result_i_i_reg_463 <= bitcast_ln696_fu_165_p1(62 downto 52);
                tmp_reg_458 <= bitcast_ln696_fu_165_p1(63 downto 63);
                trunc_ln557_reg_453 <= trunc_ln557_fu_169_p1;
                trunc_ln565_reg_468 <= trunc_ln565_fu_191_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln603_2_reg_545 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                select_ln603_2_reg_550 <= select_ln603_2_fu_421_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_local_V_data_0_V_full_n, in_data_0_vld_out, is_last_0_i_out_out_full_n, ap_CS_fsm_state9, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_local_V_data_0_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln581_fu_239_p2 <= std_logic_vector(signed(ap_const_lv12_FF6) + signed(sub_ln575_fu_227_p2));
    and_ln581_fu_330_p2 <= (xor_ln582_fu_324_p2 and icmp_ln581_reg_484);
    and_ln582_fu_388_p2 <= (xor_ln571_fu_383_p2 and icmp_ln582_reg_497);
    and_ln585_1_fu_347_p2 <= (icmp_ln585_fu_282_p2 and and_ln581_fu_330_p2);
    and_ln585_fu_341_p2 <= (xor_ln585_fu_335_p2 and and_ln581_fu_330_p2);
    and_ln603_fu_364_p2 <= (xor_ln581_fu_358_p2 and icmp_ln603_fu_287_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(in_data_0_vld_out, is_last_0_i_out_out_full_n, icmp_ln23_fu_138_p2)
    begin
                ap_block_state2 <= (((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_data_0_vld_out, is_last_0_i_out_out_full_n, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bitcast_ln696_1_fu_301_p1 <= in_data_tmp_reg_442;
    bitcast_ln696_fu_165_p1 <= grp_fu_135_p1;

    grp_fu_135_ce_assign_proc : process(in_data_0_vld_out, is_last_0_i_out_out_full_n, ap_CS_fsm_state2, icmp_ln23_fu_138_p2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_135_ce <= ap_const_logic_1;
        else 
            grp_fu_135_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_279_p1),54));
    i_fu_144_p2 <= std_logic_vector(unsigned(i_0_i3_i_reg_124) + unsigned(ap_const_lv14_1));
    icmp_ln23_fu_138_p2 <= "1" when (i_0_i3_i_reg_124 = ap_const_lv14_2000) else "0";
    icmp_ln571_fu_222_p2 <= "1" when (trunc_ln557_reg_453 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_233_p2 <= "1" when (signed(sub_ln575_fu_227_p2) > signed(ap_const_lv12_A)) else "0";
    icmp_ln582_fu_259_p2 <= "1" when (sub_ln575_fu_227_p2 = ap_const_lv12_A) else "0";
    icmp_ln585_fu_282_p2 <= "1" when (unsigned(select_ln581_reg_490) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_287_p2 <= "1" when (tmp_297_reg_509 = ap_const_lv8_0) else "0";
    in_data_0_ack_in <= in_data_0_state(1);

    in_data_0_ack_out_assign_proc : process(in_data_0_vld_out, is_last_0_i_out_out_full_n, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_data_0_ack_out <= ap_const_logic_1;
        else 
            in_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_0_data_out_assign_proc : process(in_data_0_payload_A, in_data_0_payload_B, in_data_0_sel)
    begin
        if ((in_data_0_sel = ap_const_logic_1)) then 
            in_data_0_data_out <= in_data_0_payload_B;
        else 
            in_data_0_data_out <= in_data_0_payload_A;
        end if; 
    end process;

    in_data_0_load_A <= (in_data_0_state_cmp_full and not(in_data_0_sel_wr));
    in_data_0_load_B <= (in_data_0_state_cmp_full and in_data_0_sel_wr);
    in_data_0_sel <= in_data_0_sel_rd;
    in_data_0_state_cmp_full <= '0' when (in_data_0_state = ap_const_lv2_1) else '1';
    in_data_0_vld_in <= in_r_TVALID;
    in_data_0_vld_out <= in_data_0_state(0);
    in_last_V_0_ack_in <= in_last_V_0_state(1);

    in_last_V_0_ack_out_assign_proc : process(in_data_0_vld_out, is_last_0_i_out_out_full_n, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_last_V_0_data_out_assign_proc : process(in_last_V_0_payload_A, in_last_V_0_payload_B, in_last_V_0_sel)
    begin
        if ((in_last_V_0_sel = ap_const_logic_1)) then 
            in_last_V_0_data_out <= in_last_V_0_payload_B;
        else 
            in_last_V_0_data_out <= in_last_V_0_payload_A;
        end if; 
    end process;

    in_last_V_0_load_A <= (in_last_V_0_state_cmp_full and not(in_last_V_0_sel_wr));
    in_last_V_0_load_B <= (in_last_V_0_state_cmp_full and in_last_V_0_sel_wr);
    in_last_V_0_sel <= in_last_V_0_sel_rd;
    in_last_V_0_state_cmp_full <= '0' when (in_last_V_0_state = ap_const_lv2_1) else '1';
    in_last_V_0_vld_in <= in_r_TVALID;
    in_last_V_0_vld_out <= in_last_V_0_state(0);

    in_local_V_data_0_V_blk_n_assign_proc : process(in_local_V_data_0_V_full_n, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            in_local_V_data_0_V_blk_n <= in_local_V_data_0_V_full_n;
        else 
            in_local_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_local_V_data_0_V_din <= 
        select_ln603_2_reg_550 when (or_ln603_2_reg_545(0) = '1') else 
        ap_const_lv16_0;

    in_local_V_data_0_V_write_assign_proc : process(in_local_V_data_0_V_full_n, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_local_V_data_0_V_full_n = ap_const_logic_1))) then 
            in_local_V_data_0_V_write <= ap_const_logic_1;
        else 
            in_local_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TDATA_blk_n_assign_proc : process(in_data_0_state, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        if (((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TDATA_blk_n <= in_data_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_data_0_state(1);

    internal_ap_ready_assign_proc : process(in_data_0_vld_out, is_last_0_i_out_out_full_n, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    is_last_0_i_out_out_blk_n_assign_proc : process(is_last_0_i_out_out_full_n, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        if (((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            is_last_0_i_out_out_blk_n <= is_last_0_i_out_out_full_n;
        else 
            is_last_0_i_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    is_last_0_i_out_out_din <= is_last_0_i_out_dc_0_reg_112;

    is_last_0_i_out_out_write_assign_proc : process(in_data_0_vld_out, is_last_0_i_out_out_full_n, ap_CS_fsm_state2, icmp_ln23_fu_138_p2)
    begin
        if ((not((((icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (is_last_0_i_out_out_full_n = ap_const_logic_0)) or ((icmp_ln23_fu_138_p2 = ap_const_lv1_0) and (in_data_0_vld_out = ap_const_logic_0)))) and (icmp_ln23_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            is_last_0_i_out_out_write <= ap_const_logic_1;
        else 
            is_last_0_i_out_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_fu_159_p2 <= (is_last_0_i_out_dc_0_reg_112 or in_last_V_0_data_out);
    or_ln581_fu_353_p2 <= (or_ln582_fu_320_p2 or icmp_ln581_reg_484);
    or_ln582_fu_320_p2 <= (icmp_ln582_reg_497 or icmp_ln571_reg_478);
    or_ln603_1_fu_393_p2 <= (and_ln585_reg_519 or and_ln582_fu_388_p2);
    or_ln603_2_fu_398_p2 <= (or_ln603_reg_529 or or_ln603_1_fu_393_p2);
    or_ln603_fu_370_p2 <= (and_ln603_fu_364_p2 or and_ln585_1_fu_347_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln570_fu_215_p3 <= 
        sub_ln461_fu_209_p2 when (tmp_reg_458(0) = '1') else 
        zext_ln569_fu_205_p1;
    select_ln581_fu_251_p3 <= 
        add_ln581_fu_239_p2 when (icmp_ln581_fu_233_p2(0) = '1') else 
        sub_ln581_fu_245_p2;
    select_ln588_fu_312_p3 <= 
        ap_const_lv16_FFFF when (tmp_298_fu_304_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_1_fu_376_p3 <= 
        select_ln588_fu_312_p3 when (and_ln585_fu_341_p2(0) = '1') else 
        trunc_ln583_reg_503;
    select_ln603_2_fu_421_p3 <= 
        select_ln603_fu_414_p3 when (or_ln603_reg_529(0) = '1') else 
        select_ln603_1_reg_535;
    select_ln603_fu_414_p3 <= 
        shl_ln604_fu_409_p2 when (and_ln603_reg_524(0) = '1') else 
        trunc_ln586_fu_406_p1;
        sext_ln581_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln581_reg_490),16));

        sext_ln581_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln581_reg_490),32));

    shl_ln604_fu_409_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_503),to_integer(unsigned('0' & sext_ln581_1_fu_403_p1(16-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln461_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_205_p1));
    sub_ln575_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_195_p1));
    sub_ln581_fu_245_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) - unsigned(sub_ln575_fu_227_p2));
    tmp_298_fu_304_p3 <= bitcast_ln696_1_fu_301_p1(31 downto 31);
    tmp_i_fu_198_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_468);
    trunc_ln557_fu_169_p1 <= bitcast_ln696_fu_165_p1(63 - 1 downto 0);
    trunc_ln565_fu_191_p1 <= bitcast_ln696_fu_165_p1(52 - 1 downto 0);
    trunc_ln583_fu_265_p1 <= select_ln570_fu_215_p3(16 - 1 downto 0);
    trunc_ln586_fu_406_p1 <= ashr_ln586_reg_540(16 - 1 downto 0);
    xor_ln571_fu_383_p2 <= (icmp_ln571_reg_478 xor ap_const_lv1_1);
    xor_ln581_fu_358_p2 <= (or_ln581_fu_353_p2 xor ap_const_lv1_1);
    xor_ln582_fu_324_p2 <= (or_ln582_fu_320_p2 xor ap_const_lv1_1);
    xor_ln585_fu_335_p2 <= (icmp_ln585_fu_282_p2 xor ap_const_lv1_1);
    zext_ln461_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_reg_463),12));
    zext_ln569_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_198_p3),54));
end behav;
