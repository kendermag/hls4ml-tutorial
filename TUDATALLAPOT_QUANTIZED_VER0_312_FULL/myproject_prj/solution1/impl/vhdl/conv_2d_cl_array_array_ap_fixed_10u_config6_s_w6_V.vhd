-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_array_ap_fixed_10u_config6_s_w6_V_rom is 
    generic(
             DWIDTH     : integer := 239; 
             AWIDTH     : integer := 5; 
             MEM_SIZE    : integer := 18
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_array_ap_fixed_10u_config6_s_w6_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00010000000001011000000101110000000000000111011111101001101001001110110000000000000000000000010000000111101001001000000000000101111000100000000001010000000111100000010000000000010000000010010000000111110000000000000001010100010000000111000", 
    1 => "00000000000000100000000000000110010000000000000000000001101000000000000110111000000000000000010000000010000000000000000111110000000000000000000111011000000000000000000111100000000011000000000111001111010000110000000000000010011000000000000", 
    2 => "00000101010000000000011000100000111010100000100000000110110111101111010110001111000000000000011000000111111000111000000000000010011011011000000111101110111000000000000001000100000110101011111000000000000000000000011000000000000110011110010", 
    3 => "11010000000000000111001000000101111000000000110001000000000000000000000000100000000000000111000001101000000111111000000011010111100000000000000000000110110000000000000000000000000001011000000000000000000000000000110011011111110101010101101", 
    4 => "00000000000000000001100000000000000111011000000000110000011000000111101111010000000000000001000111011000000111100000000000000000001000000000010000101000000000000001100001000000000000000000000000000000000000000111100000000000110000000100000", 
    5 => "00000010000000000000000000000000000110011101110000000110100000101111101000000001010000000000011001101000010111110111100000000000000000000000000000000001001000000000000000110000000000011000000000111111000111110111100001100100000000000000000", 
    6 => "00000001010001011000000011000000000000000000000000000000000000000111110111001000011000000000000000000000000000000110110000000101110111000000000111111000000000011000000000000010110000000111011001001111101110101111010101011011010000000111111", 
    7 => "00000000000000000110010000000111110000000101111001101110011111111001011111011000000000000000000000000001000000000111011111010000100000000000000000000100111000101000000001010110101000000000000001001000000000001111100111010110001000000000000", 
    8 => "00000000000001100000000000000010101101110000000000000000000000000000011000000111010000000101010000000000010000000111011000000001101000000100000101110000000111010001100000000000000111101000000111011111110111011000011000000000000110001111011", 
    9 => "00000001000000000000000001000011111000000000000000000111000001000111011010101000000000000000000000000001001000010111110000000000000000000000000000000110110000000000000000000100010100011001011111100000000000110110101111001111011000000000000", 
    10 => "00000000000000000101111001011111101101110000000000000000100000000111011000000000000000000111010000000111110000000000000000010001011101110001000001101000001000000001100000000001011000000001010111100000100000000000000010001000000100110000000", 
    11 => "11110000000000000000000000100000000010000000000000000111101000000000000000000000000000000001110010000000000000000111011000000000000000000000101000000000000000111000000000000000000000000000000110011111010000000000000101101100110000000000000", 
    12 => "01000000000000000101111000000000110101100001000000000000111000000001010000101111101000011000000111110110110000000000000001100000000000000111001000111001101000000111111000000001110000000000010000000111111111100000000000000000000000000000000", 
    13 => "11111100000000110000000000000000000110110000000111011000000000001000000111100000000111111000001000000000000000000000010000001001111000100000000000000000000001100000000000000001001001011000000000000111000111011000000000000000000000000000000", 
    14 => "00000010111000000000011000000111101000000010011111001000111000000000001000010000000110110000000000000111000000011000000000111000000000000000000000000000000111110000010001001111111100101000001000000110110000000000010000000000000000000000000", 
    15 => "11110000000000000000000000000000000111001001110111101001001110110000011000001000000000000000000001101000000000000000000000000000000000000110110000000010000111001000000110011001110000000000000000000111110101110000001000000001010000000001101", 
    16 => "11110000000001101000000000000001110000000001111000000000000000110111110000000000000000000000000001000000000001010000000000100110010000000000000000000110110000000000000000000001111110010000000000000000000000011000000000000111010111000000000", 
    17 => "01101111010000000000000010011000000010110000000110101000000000110110010111010001000000000111100000000111110000000000000000000101110000000000101000000001111000110111101011000000101110001010011000000111101110111111101000000000000000000001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_array_ap_fixed_10u_config6_s_w6_V is
    generic (
        DataWidth : INTEGER := 239;
        AddressRange : INTEGER := 18;
        AddressWidth : INTEGER := 5);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_array_ap_fixed_10u_config6_s_w6_V is
    component conv_2d_cl_array_array_ap_fixed_10u_config6_s_w6_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_array_ap_fixed_10u_config6_s_w6_V_rom_U :  component conv_2d_cl_array_array_ap_fixed_10u_config6_s_w6_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


