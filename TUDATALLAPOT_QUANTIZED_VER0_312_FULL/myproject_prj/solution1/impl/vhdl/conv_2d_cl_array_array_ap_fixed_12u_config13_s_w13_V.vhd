-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_array_ap_fixed_12u_config13_s_w13_V_rom is 
    generic(
             DWIDTH     : integer := 432; 
             AWIDTH     : integer := 4; 
             MEM_SIZE    : integer := 15
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_array_ap_fixed_12u_config13_s_w13_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "010000000000110110000000101100111011001011000000000000000000000111000010111100000000000100000000111110000000000000000000001110000000000000000000000000000000000000000000000000000000111110111101000000000000000111000000111110000000000000000000000100000000111101111010000000111101111010000000110111110101000000110101000000000000000000000000001100000000000000000000000000111101000000000011000001111110000000000000000000000000000000000010", 
    1 => "001011000000000000000000111101001000001001000000111100111110000000000000111110000000000000000000001011000000000000111101001100000000000000000000000000000000000000000000000000000000000000111111111001000000111111000000000000001000000000000000000000001011001010111011000111000100000011000000000000000000111011000000000000000000110101001001000000000000000000000011101101111011000000000000000000111110000000000000000000111110000000000000", 
    2 => "110101000000000000111100111110000000000011111111111100000000000000000010000000000000001000000001110100000001000000101111110101000001000110110100000000000000000000000000000000000000111110111111000000000010000111111000000010000000000000000000000000000110000011000000001010000000000000000000010010000000001000000000111011111111001001000000111001000000111011111100000000000001000000000000000000000000000000001101000000001001111000000000", 
    3 => "001101000000000000001011000011000000000101000000111110000000000000000000000000000000111001111010111101000000011111011101010111000000000000011001000000000000000000000000000000000000001000000101111011001100000000111111111101000000000000111110000000000000000000000000000000111101000000111100000000000000000000111111001000000000000000010000000000000000000111111010000000000000000000000000000000101001000000000000000101110010000000000000", 
    4 => "000000000000000000101100010000010011000000000000001001111010000000000000111110110101111010111011000000111101000010010000111000000000110010001011000000000000000000000000000000000000000000000000000100111111000000000000000000111011111100000000000000000000001000111100110110000000000000000000111111110010000001000000111101111010001000000000000000000000110101000000000000011100000000001100000010110100000111000000000000110111000000000000", 
    5 => "000000000000000000000000110101000000111001000100000000000001000010000000000110111110000000000000000000000000000100000000000000000000000000111111000000000000000000000000000000000000111111111011111011000000000000000000000000000101000000000000111111000000000011000000000000000100000000111110000111000000111111000000000000000001110011000111000110000000110100000100000000110000000000000011111101000000000000111101111010001101000000000011", 
    6 => "000000001011101110000000000000000010111100000000000000000000000000001000000000000000000011000000000000000001000000000011000000000101000111000000000000000000000000000000000000000000001001000000111101000000000000000000000000000000000000000000000000000000010110001001001001000000000000000000000100111001110100000000000110000000000000000000000000000000000000000000000000101111110111110100000000000000000000000000000000000000000000000110", 
    7 => "000000001101000000000000000000000000111001000010000000000000000000000000111111111110000000000000000000111100000000000000001001110000101111000100000000000000000000000000000000000000000000000000111110000100111001111010001000001000000111000000000110000000000000000000000000000000111010000000000000001100000010111111000001111010110101000000110011000000110111000000000000000000111111001110110101000000000010000000000000000000000001101101", 
    8 => "000000000111000000111101110111111011000000000000111101000000000000000000000111111101111100110110000000000000000100000000001100000000010110111110000000000000000000000000000000000000000000111111000100000110000001000000000000000000000000000000000000000000000000000000000000110111001011000000010000000000001000111101000000111011000000111010110110000110000000000000101111000000111111000000000100000000110100000000000000000000000000111001", 
    9 => "000010000101000000000000000000000000000010111101000010000000000000000000000000111101000000111101111000000000000000001001010100111011011000000000000000000000000000000000000000000000000000110101000000000010000011000000000000000000111010000000111100000000000000000100000000110111000000111000000000000010101111000000001100000110111101000101111001000011110101000000000000000101000001111010111101000000111101000000110111000000000000000000", 
    10 => "000100000000000000000101000000000000000000000000111011000000000000111111000000111101000000000000000000000000000000000000111110001110100011001100000000000000000000000000000000000000111100000010111001000011001100000000111101111110000000000000000110000000000110000000000000111000000000000000101011111011111100000000001010000111000000000000000000000111000100000011111101000000000001000000000000000000111110111011000000000101000000000000", 
    11 => "000000000000000110000110111101000000000101000000000011000000111101000010000000000000000110000000000110000000000000000100000000000111000000000000000000000000000000000000000000000000111100001000111000000000000000111100111110111110111010111001111100111100001010000000000000000010000000000000110010111010000000000000000000000000000010000111111000000101110111000011000000000000110100001001001101000000111110000000111100000000111011000000", 
    12 => "000000000000000000000000001101000000000001000100000010000010000000000000000000000000000100000000111100000000110110000000010000000101111011000101000000000000000000000000000000000000000000000100000001111110000000000000111101000111000010000000000000000000110010000000000100000100000000111100000000000000000000111100000000000000000000000000000000000000000100000011110111000100110000111101000000111001000000111100111100111011000000001000", 
    13 => "000000110111000000000000000000001110111100000000000000000000111101111110000000000000000000000000000000111111011001001101011100011000000000010111000000000000000000000000000000000000000000000101000001000000111000111010000000111011000010000000000000000000110001111111111000111111111011111100111101000101000000001100000011000000110111111110001000000000000111111110110011010110000000000000111111000000111101111100000010000000000000000000", 
    14 => "000000000000110110000000000011000011111001000000111011000000000000111010000000111010000000000000000000000011000000000000110101000000111101000000000000000000000000000000000000000000111010000110000000000000111010111010000000000000000000111100111101000000000000110010000000111001001111000000000000111111111110001010110001000000111011000000110110000000110101111001110111001000000000010000000000000000000000111000111010110100000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_array_ap_fixed_12u_config13_s_w13_V is
    generic (
        DataWidth : INTEGER := 432;
        AddressRange : INTEGER := 15;
        AddressWidth : INTEGER := 4);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_array_ap_fixed_12u_config13_s_w13_V is
    component conv_2d_cl_array_array_ap_fixed_12u_config13_s_w13_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_array_ap_fixed_12u_config13_s_w13_V_rom_U :  component conv_2d_cl_array_array_ap_fixed_12u_config13_s_w13_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


