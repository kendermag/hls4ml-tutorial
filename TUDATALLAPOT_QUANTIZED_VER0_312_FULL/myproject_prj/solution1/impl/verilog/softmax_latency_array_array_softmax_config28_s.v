// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency_array_array_softmax_config28_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op11;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    io_acc_block_signal_op85;
reg    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table4_address0;
reg    exp_table4_ce0;
wire   [16:0] exp_table4_q0;
wire   [9:0] exp_table4_address1;
reg    exp_table4_ce1;
wire   [16:0] exp_table4_q1;
wire   [9:0] exp_table4_address2;
reg    exp_table4_ce2;
wire   [16:0] exp_table4_q2;
wire   [9:0] invert_table5_address0;
reg    invert_table5_ce0;
wire   [17:0] invert_table5_q0;
reg   [9:0] y_V_reg_428;
reg   [9:0] y_V_1_reg_433;
reg   [9:0] y_V_2_reg_438;
reg   [9:0] y_V_2_reg_438_pp0_iter1_reg;
reg   [16:0] exp_res_0_V_reg_453;
reg   [16:0] exp_res_0_V_reg_453_pp0_iter3_reg;
reg   [16:0] exp_res_0_V_reg_453_pp0_iter4_reg;
reg   [16:0] exp_res_0_V_reg_453_pp0_iter5_reg;
reg   [16:0] exp_res_0_V_reg_453_pp0_iter6_reg;
reg   [16:0] exp_res_1_V_reg_459;
reg   [16:0] exp_res_1_V_reg_459_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_reg_459_pp0_iter4_reg;
reg   [16:0] exp_res_1_V_reg_459_pp0_iter5_reg;
reg   [16:0] exp_res_1_V_reg_459_pp0_iter6_reg;
reg   [16:0] exp_res_2_V_reg_470;
reg   [16:0] exp_res_2_V_reg_470_pp0_iter4_reg;
reg   [16:0] exp_res_2_V_reg_470_pp0_iter5_reg;
reg   [16:0] exp_res_2_V_reg_470_pp0_iter6_reg;
wire  signed [17:0] ret_V_fu_270_p2;
reg  signed [17:0] ret_V_reg_477;
wire   [9:0] y_V_3_fu_368_p3;
reg   [9:0] y_V_3_reg_483;
reg   [17:0] inv_exp_sum_V_reg_493;
wire  signed [25:0] sext_ln167_fu_380_p1;
reg   [15:0] tmp_data_0_V_reg_520;
reg   [15:0] tmp_data_1_V_reg_525;
reg   [15:0] tmp_data_2_V_reg_530;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln157_fu_252_p1;
wire   [63:0] zext_ln157_1_fu_256_p1;
wire   [63:0] zext_ln157_2_fu_260_p1;
wire   [63:0] zext_ln166_fu_376_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [17:0] grp_fu_161_p0;
wire   [16:0] grp_fu_161_p1;
wire  signed [17:0] grp_fu_162_p0;
wire   [16:0] grp_fu_162_p1;
wire  signed [17:0] grp_fu_163_p0;
wire   [16:0] grp_fu_163_p1;
wire   [17:0] zext_ln45_1_fu_264_p1;
wire   [17:0] zext_ln45_2_fu_267_p1;
wire  signed [18:0] lhs_V_fu_279_p1;
wire   [18:0] rhs_V_fu_282_p1;
wire   [18:0] ret_V_1_fu_285_p2;
wire   [17:0] zext_ln45_fu_276_p1;
wire   [17:0] p_Val2_11_fu_299_p2;
wire   [0:0] p_Result_7_fu_304_p3;
wire   [0:0] p_Result_s_fu_291_p3;
wire   [0:0] xor_ln786_fu_312_p2;
wire   [0:0] xor_ln340_1_fu_330_p2;
wire   [0:0] xor_ln340_fu_324_p2;
wire   [9:0] tmp_fu_342_p4;
wire   [0:0] underflow_fu_318_p2;
wire   [0:0] or_ln340_fu_336_p2;
wire   [9:0] select_ln340_fu_352_p3;
wire   [9:0] select_ln388_fu_360_p3;
wire   [25:0] grp_fu_162_p2;
wire   [25:0] grp_fu_161_p2;
wire   [25:0] grp_fu_163_p2;
reg    grp_fu_161_ce;
reg    grp_fu_162_ce;
reg    grp_fu_163_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to8;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] grp_fu_161_p10;
wire   [25:0] grp_fu_162_p10;
wire   [25:0] grp_fu_163_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

softmax_latency_array_array_softmax_config28_s_exp_table4 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table4_address0),
    .ce0(exp_table4_ce0),
    .q0(exp_table4_q0),
    .address1(exp_table4_address1),
    .ce1(exp_table4_ce1),
    .q1(exp_table4_q1),
    .address2(exp_table4_address2),
    .ce2(exp_table4_ce2),
    .q2(exp_table4_q2)
);

softmax_latency_array_array_softmax_config28_s_invert_tabb1s #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table5_address0),
    .ce0(invert_table5_ce0),
    .q0(invert_table5_q0)
);

myproject_axi_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_18s_17ns_26_2_1_U2307(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_161_p0),
    .din1(grp_fu_161_p1),
    .ce(grp_fu_161_ce),
    .dout(grp_fu_161_p2)
);

myproject_axi_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_18s_17ns_26_2_1_U2308(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_162_p0),
    .din1(grp_fu_162_p1),
    .ce(grp_fu_162_ce),
    .dout(grp_fu_162_p2)
);

myproject_axi_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_18s_17ns_26_2_1_U2309(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_163_p0),
    .din1(grp_fu_163_p1),
    .ce(grp_fu_163_ce),
    .dout(grp_fu_163_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_reg_453 <= exp_table4_q0;
        exp_res_1_V_reg_459 <= exp_table4_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_0_V_reg_453_pp0_iter3_reg <= exp_res_0_V_reg_453;
        exp_res_0_V_reg_453_pp0_iter4_reg <= exp_res_0_V_reg_453_pp0_iter3_reg;
        exp_res_0_V_reg_453_pp0_iter5_reg <= exp_res_0_V_reg_453_pp0_iter4_reg;
        exp_res_0_V_reg_453_pp0_iter6_reg <= exp_res_0_V_reg_453_pp0_iter5_reg;
        exp_res_1_V_reg_459_pp0_iter3_reg <= exp_res_1_V_reg_459;
        exp_res_1_V_reg_459_pp0_iter4_reg <= exp_res_1_V_reg_459_pp0_iter3_reg;
        exp_res_1_V_reg_459_pp0_iter5_reg <= exp_res_1_V_reg_459_pp0_iter4_reg;
        exp_res_1_V_reg_459_pp0_iter6_reg <= exp_res_1_V_reg_459_pp0_iter5_reg;
        exp_res_2_V_reg_470_pp0_iter4_reg <= exp_res_2_V_reg_470;
        exp_res_2_V_reg_470_pp0_iter5_reg <= exp_res_2_V_reg_470_pp0_iter4_reg;
        exp_res_2_V_reg_470_pp0_iter6_reg <= exp_res_2_V_reg_470_pp0_iter5_reg;
        inv_exp_sum_V_reg_493 <= invert_table5_q0;
        ret_V_reg_477 <= ret_V_fu_270_p2;
        tmp_data_0_V_reg_520 <= {{grp_fu_162_p2[25:10]}};
        tmp_data_1_V_reg_525 <= {{grp_fu_161_p2[25:10]}};
        tmp_data_2_V_reg_530 <= {{grp_fu_163_p2[25:10]}};
        y_V_3_reg_483 <= y_V_3_fu_368_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_2_V_reg_470 <= exp_table4_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_V_1_reg_433 <= {{data_V_data_1_V_dout[15:6]}};
        y_V_2_reg_438 <= {{data_V_data_2_V_dout[15:6]}};
        y_V_2_reg_438_pp0_iter1_reg <= y_V_2_reg_438;
        y_V_reg_428 <= {{data_V_data_0_V_dout[15:6]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to8 = 1'b1;
    end else begin
        ap_idle_pp0_0to8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to8 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table4_ce0 = 1'b1;
    end else begin
        exp_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table4_ce1 = 1'b1;
    end else begin
        exp_table4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table4_ce2 = 1'b1;
    end else begin
        exp_table4_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_161_ce = 1'b1;
    end else begin
        grp_fu_161_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_162_ce = 1'b1;
    end else begin
        grp_fu_162_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_163_ce = 1'b1;
    end else begin
        grp_fu_163_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        invert_table5_ce0 = 1'b1;
    end else begin
        invert_table5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b1) & ((io_acc_block_signal_op11 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op85 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((io_acc_block_signal_op11 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op85 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((io_acc_block_signal_op11 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op85 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (io_acc_block_signal_op85 == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op11 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table4_address0 = zext_ln157_fu_252_p1;

assign exp_table4_address1 = zext_ln157_1_fu_256_p1;

assign exp_table4_address2 = zext_ln157_2_fu_260_p1;

assign grp_fu_161_p0 = sext_ln167_fu_380_p1;

assign grp_fu_161_p1 = grp_fu_161_p10;

assign grp_fu_161_p10 = exp_res_1_V_reg_459_pp0_iter6_reg;

assign grp_fu_162_p0 = sext_ln167_fu_380_p1;

assign grp_fu_162_p1 = grp_fu_162_p10;

assign grp_fu_162_p10 = exp_res_0_V_reg_453_pp0_iter6_reg;

assign grp_fu_163_p0 = sext_ln167_fu_380_p1;

assign grp_fu_163_p1 = grp_fu_163_p10;

assign grp_fu_163_p10 = exp_res_2_V_reg_470_pp0_iter6_reg;

assign invert_table5_address0 = zext_ln166_fu_376_p1;

assign io_acc_block_signal_op11 = (data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op85 = (res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign lhs_V_fu_279_p1 = ret_V_reg_477;

assign or_ln340_fu_336_p2 = (xor_ln340_1_fu_330_p2 | p_Result_7_fu_304_p3);

assign p_Result_7_fu_304_p3 = p_Val2_11_fu_299_p2[32'd17];

assign p_Result_s_fu_291_p3 = ret_V_1_fu_285_p2[32'd18];

assign p_Val2_11_fu_299_p2 = ($signed(ret_V_reg_477) + $signed(zext_ln45_fu_276_p1));

assign res_V_data_0_V_din = tmp_data_0_V_reg_520;

assign res_V_data_1_V_din = tmp_data_1_V_reg_525;

assign res_V_data_2_V_din = tmp_data_2_V_reg_530;

assign ret_V_1_fu_285_p2 = ($signed(lhs_V_fu_279_p1) + $signed(rhs_V_fu_282_p1));

assign ret_V_fu_270_p2 = (zext_ln45_1_fu_264_p1 + zext_ln45_2_fu_267_p1);

assign rhs_V_fu_282_p1 = exp_res_2_V_reg_470;

assign select_ln340_fu_352_p3 = ((xor_ln340_fu_324_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_342_p4);

assign select_ln388_fu_360_p3 = ((underflow_fu_318_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_342_p4);

assign sext_ln167_fu_380_p1 = $signed(inv_exp_sum_V_reg_493);

assign tmp_fu_342_p4 = {{p_Val2_11_fu_299_p2[17:8]}};

assign underflow_fu_318_p2 = (xor_ln786_fu_312_p2 & p_Result_s_fu_291_p3);

assign xor_ln340_1_fu_330_p2 = (p_Result_s_fu_291_p3 ^ 1'd1);

assign xor_ln340_fu_324_p2 = (p_Result_s_fu_291_p3 ^ p_Result_7_fu_304_p3);

assign xor_ln786_fu_312_p2 = (p_Result_7_fu_304_p3 ^ 1'd1);

assign y_V_3_fu_368_p3 = ((or_ln340_fu_336_p2[0:0] === 1'b1) ? select_ln340_fu_352_p3 : select_ln388_fu_360_p3);

assign zext_ln157_1_fu_256_p1 = y_V_1_reg_433;

assign zext_ln157_2_fu_260_p1 = y_V_2_reg_438_pp0_iter1_reg;

assign zext_ln157_fu_252_p1 = y_V_reg_428;

assign zext_ln166_fu_376_p1 = y_V_3_reg_483;

assign zext_ln45_1_fu_264_p1 = exp_res_1_V_reg_459;

assign zext_ln45_2_fu_267_p1 = exp_res_0_V_reg_453;

assign zext_ln45_fu_276_p1 = exp_res_2_V_reg_470;

endmodule //softmax_latency_array_array_softmax_config28_s
