// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_array_ap_fixed_14_6_5_3_0_16u_config22_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [5:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [5:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [5:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [5:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
output  [13:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [13:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [13:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [13:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [13:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [13:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [13:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [13:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [13:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [13:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [13:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [13:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [13:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [13:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [13:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [13:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state3;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg   [5:0] data_0_V_reg_238;
wire    io_acc_block_signal_op4;
reg    ap_block_state1;
reg   [5:0] data_1_V_reg_243;
reg   [5:0] data_2_V_reg_248;
reg   [5:0] data_3_V_reg_253;
reg   [5:0] data_4_V_reg_258;
reg   [13:0] tmp_data_0_V_reg_263;
wire    ap_CS_fsm_state2;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_ready;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_done;
reg   [13:0] tmp_data_1_V_reg_268;
reg   [13:0] tmp_data_2_V_reg_273;
reg   [13:0] tmp_data_3_V_reg_278;
reg   [13:0] tmp_data_4_V_reg_283;
reg   [13:0] tmp_data_5_V_reg_288;
reg   [13:0] tmp_data_6_V_reg_293;
reg   [13:0] tmp_data_7_V_reg_298;
reg   [13:0] tmp_data_8_V_reg_303;
reg   [13:0] tmp_data_9_V_reg_308;
reg   [13:0] tmp_data_10_V_reg_313;
reg   [13:0] tmp_data_11_V_reg_318;
reg   [13:0] tmp_data_12_V_reg_323;
reg   [13:0] tmp_data_13_V_reg_328;
reg   [13:0] tmp_data_14_V_reg_333;
reg   [13:0] tmp_data_15_V_reg_338;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_idle;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_0;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_1;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_2;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_3;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_4;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_5;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_6;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_7;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_8;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_9;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_10;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_11;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_12;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_13;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_14;
wire   [13:0] grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_15;
reg    grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start_reg;
reg    ap_block_state1_ignore_call28;
wire    io_acc_block_signal_op51;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start_reg = 1'b0;
end

dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start),
    .ap_done(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_done),
    .ap_idle(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_ready),
    .data_0_V_read(data_0_V_reg_238),
    .data_1_V_read(data_1_V_reg_243),
    .data_2_V_read(data_2_V_reg_248),
    .data_3_V_read(data_3_V_reg_253),
    .data_4_V_read(data_4_V_reg_258),
    .ap_return_0(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_0_V_reg_238 <= data_stream_V_data_0_V_dout;
        data_1_V_reg_243 <= data_stream_V_data_1_V_dout;
        data_2_V_reg_248 <= data_stream_V_data_2_V_dout;
        data_3_V_reg_253 <= data_stream_V_data_3_V_dout;
        data_4_V_reg_258 <= data_stream_V_data_4_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_done == 1'b1))) begin
        tmp_data_0_V_reg_263 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_0;
        tmp_data_10_V_reg_313 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_10;
        tmp_data_11_V_reg_318 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_11;
        tmp_data_12_V_reg_323 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_12;
        tmp_data_13_V_reg_328 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_13;
        tmp_data_14_V_reg_333 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_14;
        tmp_data_15_V_reg_338 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_15;
        tmp_data_1_V_reg_268 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_1;
        tmp_data_2_V_reg_273 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_2;
        tmp_data_3_V_reg_278 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_3;
        tmp_data_4_V_reg_283 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_4;
        tmp_data_5_V_reg_288 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_5;
        tmp_data_6_V_reg_293 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_6;
        tmp_data_7_V_reg_298 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_7;
        tmp_data_8_V_reg_303 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_8;
        tmp_data_9_V_reg_308 <= grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_return_9;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((io_acc_block_signal_op51 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call28 = ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start = grp_dense_wrapper_ap_fixed_ap_fixed_14_6_5_3_0_config22_s_fu_136_ap_start_reg;

assign io_acc_block_signal_op4 = (data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op51 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V_reg_263;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_313;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_318;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_323;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_328;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_333;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_338;

assign res_stream_V_data_1_V_din = tmp_data_1_V_reg_268;

assign res_stream_V_data_2_V_din = tmp_data_2_V_reg_273;

assign res_stream_V_data_3_V_din = tmp_data_3_V_reg_278;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_283;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_288;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_293;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_298;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_303;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_308;

assign start_out = real_start;

endmodule //dense_array_array_ap_fixed_14_6_5_3_0_16u_config22_s
