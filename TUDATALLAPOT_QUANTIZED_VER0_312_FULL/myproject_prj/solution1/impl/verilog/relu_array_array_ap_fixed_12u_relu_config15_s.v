// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_fixed_12u_relu_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [13:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [13:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [13:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [13:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [13:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [13:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [13:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [13:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [13:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [13:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [13:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [13:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [5:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [5:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [5:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [5:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [5:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [5:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [5:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [5:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln60_reg_1985;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln60_reg_1985_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg   [9:0] i_0_reg_186;
wire   [0:0] icmp_ln60_fu_197_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op37;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op317;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln60_reg_1985_pp0_iter1_reg;
wire   [9:0] i_fu_203_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [13:0] tmp_data_V_44_0_reg_1994;
reg   [13:0] tmp_data_V_44_1_reg_2000;
reg   [13:0] tmp_data_V_44_2_reg_2006;
reg   [13:0] tmp_data_V_44_3_reg_2012;
reg   [13:0] tmp_data_V_44_4_reg_2018;
reg   [13:0] tmp_data_V_44_5_reg_2024;
reg   [13:0] tmp_data_V_44_6_reg_2030;
reg   [13:0] tmp_data_V_44_7_reg_2036;
reg   [13:0] tmp_data_V_44_8_reg_2042;
reg   [13:0] tmp_data_V_44_9_reg_2048;
reg   [13:0] tmp_data_V_44_10_reg_2054;
reg   [13:0] tmp_data_V_44_11_reg_2060;
reg   [5:0] trunc_ln_reg_2066;
reg   [0:0] tmp_122_reg_2071;
reg   [4:0] trunc_ln415_s_reg_2077;
wire   [0:0] icmp_ln879_fu_295_p2;
reg   [0:0] icmp_ln879_reg_2082;
wire   [0:0] icmp_ln768_fu_301_p2;
reg   [0:0] icmp_ln768_reg_2087;
reg   [5:0] trunc_ln708_s_reg_2092;
reg   [0:0] tmp_126_reg_2097;
reg   [4:0] trunc_ln415_25_reg_2103;
wire   [0:0] icmp_ln879_27_fu_345_p2;
reg   [0:0] icmp_ln879_27_reg_2108;
wire   [0:0] icmp_ln768_27_fu_351_p2;
reg   [0:0] icmp_ln768_27_reg_2113;
reg   [5:0] trunc_ln708_34_reg_2118;
reg   [0:0] tmp_130_reg_2123;
reg   [4:0] trunc_ln415_26_reg_2129;
wire   [0:0] icmp_ln879_28_fu_395_p2;
reg   [0:0] icmp_ln879_28_reg_2134;
wire   [0:0] icmp_ln768_28_fu_401_p2;
reg   [0:0] icmp_ln768_28_reg_2139;
reg   [5:0] trunc_ln708_35_reg_2144;
reg   [0:0] tmp_134_reg_2149;
reg   [4:0] trunc_ln415_27_reg_2155;
wire   [0:0] icmp_ln879_29_fu_445_p2;
reg   [0:0] icmp_ln879_29_reg_2160;
wire   [0:0] icmp_ln768_29_fu_451_p2;
reg   [0:0] icmp_ln768_29_reg_2165;
reg   [5:0] trunc_ln708_36_reg_2170;
reg   [0:0] tmp_138_reg_2175;
reg   [4:0] trunc_ln415_28_reg_2181;
wire   [0:0] icmp_ln879_30_fu_495_p2;
reg   [0:0] icmp_ln879_30_reg_2186;
wire   [0:0] icmp_ln768_30_fu_501_p2;
reg   [0:0] icmp_ln768_30_reg_2191;
reg   [5:0] trunc_ln708_37_reg_2196;
reg   [0:0] tmp_142_reg_2201;
reg   [4:0] trunc_ln415_29_reg_2207;
wire   [0:0] icmp_ln879_31_fu_545_p2;
reg   [0:0] icmp_ln879_31_reg_2212;
wire   [0:0] icmp_ln768_31_fu_551_p2;
reg   [0:0] icmp_ln768_31_reg_2217;
reg   [5:0] trunc_ln708_38_reg_2222;
reg   [0:0] tmp_146_reg_2227;
reg   [4:0] trunc_ln415_30_reg_2233;
wire   [0:0] icmp_ln879_32_fu_595_p2;
reg   [0:0] icmp_ln879_32_reg_2238;
wire   [0:0] icmp_ln768_32_fu_601_p2;
reg   [0:0] icmp_ln768_32_reg_2243;
reg   [5:0] trunc_ln708_39_reg_2248;
reg   [0:0] tmp_150_reg_2253;
reg   [4:0] trunc_ln415_31_reg_2259;
wire   [0:0] icmp_ln879_33_fu_645_p2;
reg   [0:0] icmp_ln879_33_reg_2264;
wire   [0:0] icmp_ln768_33_fu_651_p2;
reg   [0:0] icmp_ln768_33_reg_2269;
reg   [5:0] trunc_ln708_40_reg_2274;
reg   [0:0] tmp_154_reg_2279;
reg   [4:0] trunc_ln415_32_reg_2285;
wire   [0:0] icmp_ln879_34_fu_695_p2;
reg   [0:0] icmp_ln879_34_reg_2290;
wire   [0:0] icmp_ln768_34_fu_701_p2;
reg   [0:0] icmp_ln768_34_reg_2295;
reg   [5:0] trunc_ln708_41_reg_2300;
reg   [0:0] tmp_158_reg_2305;
reg   [4:0] trunc_ln415_33_reg_2311;
wire   [0:0] icmp_ln879_35_fu_745_p2;
reg   [0:0] icmp_ln879_35_reg_2316;
wire   [0:0] icmp_ln768_35_fu_751_p2;
reg   [0:0] icmp_ln768_35_reg_2321;
reg   [5:0] trunc_ln708_42_reg_2326;
reg   [0:0] tmp_162_reg_2331;
reg   [4:0] trunc_ln415_34_reg_2337;
wire   [0:0] icmp_ln879_36_fu_795_p2;
reg   [0:0] icmp_ln879_36_reg_2342;
wire   [0:0] icmp_ln768_36_fu_801_p2;
reg   [0:0] icmp_ln768_36_reg_2347;
reg   [5:0] trunc_ln708_43_reg_2352;
reg   [0:0] tmp_166_reg_2357;
reg   [4:0] trunc_ln415_35_reg_2363;
wire   [0:0] icmp_ln879_37_fu_845_p2;
reg   [0:0] icmp_ln879_37_reg_2368;
wire   [0:0] icmp_ln768_37_fu_851_p2;
reg   [0:0] icmp_ln768_37_reg_2373;
wire   [4:0] tmp_data_0_V_fu_939_p3;
reg   [4:0] tmp_data_0_V_reg_2378;
wire   [4:0] tmp_data_1_V_fu_1029_p3;
reg   [4:0] tmp_data_1_V_reg_2383;
wire   [4:0] tmp_data_2_V_fu_1119_p3;
reg   [4:0] tmp_data_2_V_reg_2388;
wire   [4:0] tmp_data_3_V_fu_1209_p3;
reg   [4:0] tmp_data_3_V_reg_2393;
wire   [4:0] tmp_data_4_V_fu_1299_p3;
reg   [4:0] tmp_data_4_V_reg_2398;
wire   [4:0] tmp_data_5_V_fu_1389_p3;
reg   [4:0] tmp_data_5_V_reg_2403;
wire   [4:0] tmp_data_6_V_fu_1479_p3;
reg   [4:0] tmp_data_6_V_reg_2408;
wire   [4:0] tmp_data_7_V_fu_1569_p3;
reg   [4:0] tmp_data_7_V_reg_2413;
wire   [4:0] tmp_data_8_V_fu_1659_p3;
reg   [4:0] tmp_data_8_V_reg_2418;
wire   [4:0] tmp_data_9_V_fu_1749_p3;
reg   [4:0] tmp_data_9_V_reg_2423;
wire   [4:0] tmp_data_10_V_fu_1839_p3;
reg   [4:0] tmp_data_10_V_reg_2428;
wire   [4:0] tmp_data_11_V_fu_1929_p3;
reg   [4:0] tmp_data_11_V_reg_2433;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] p_Result_s_fu_285_p4;
wire   [4:0] p_Result_19_1_fu_335_p4;
wire   [4:0] p_Result_19_2_fu_385_p4;
wire   [4:0] p_Result_19_3_fu_435_p4;
wire   [4:0] p_Result_19_4_fu_485_p4;
wire   [4:0] p_Result_19_5_fu_535_p4;
wire   [4:0] p_Result_19_6_fu_585_p4;
wire   [4:0] p_Result_19_7_fu_635_p4;
wire   [4:0] p_Result_19_8_fu_685_p4;
wire   [4:0] p_Result_19_9_fu_735_p4;
wire   [4:0] p_Result_19_s_fu_785_p4;
wire   [4:0] p_Result_19_10_fu_835_p4;
wire   [5:0] zext_ln415_fu_869_p1;
wire   [4:0] zext_ln415_43_fu_872_p1;
wire   [5:0] add_ln415_fu_875_p2;
wire   [0:0] tmp_123_fu_885_p3;
wire   [0:0] tmp_121_fu_862_p3;
wire   [0:0] xor_ln416_fu_893_p2;
wire   [0:0] and_ln416_fu_899_p2;
wire   [0:0] select_ln777_fu_913_p3;
wire   [0:0] tmp_124_fu_905_p3;
wire   [0:0] xor_ln785_fu_919_p2;
wire   [0:0] or_ln340_fu_925_p2;
wire   [4:0] add_ln416_fu_880_p2;
wire   [0:0] icmp_ln1494_fu_857_p2;
wire   [4:0] select_ln340_fu_931_p3;
wire   [5:0] zext_ln415_27_fu_959_p1;
wire   [4:0] zext_ln415_44_fu_962_p1;
wire   [5:0] add_ln415_27_fu_965_p2;
wire   [0:0] tmp_127_fu_975_p3;
wire   [0:0] tmp_125_fu_952_p3;
wire   [0:0] xor_ln416_27_fu_983_p2;
wire   [0:0] and_ln416_27_fu_989_p2;
wire   [0:0] select_ln777_27_fu_1003_p3;
wire   [0:0] tmp_128_fu_995_p3;
wire   [0:0] xor_ln785_1_fu_1009_p2;
wire   [0:0] or_ln340_1_fu_1015_p2;
wire   [4:0] add_ln416_27_fu_970_p2;
wire   [0:0] icmp_ln1494_1_fu_947_p2;
wire   [4:0] select_ln340_1_fu_1021_p3;
wire   [5:0] zext_ln415_28_fu_1049_p1;
wire   [4:0] zext_ln415_45_fu_1052_p1;
wire   [5:0] add_ln415_28_fu_1055_p2;
wire   [0:0] tmp_131_fu_1065_p3;
wire   [0:0] tmp_129_fu_1042_p3;
wire   [0:0] xor_ln416_28_fu_1073_p2;
wire   [0:0] and_ln416_28_fu_1079_p2;
wire   [0:0] select_ln777_28_fu_1093_p3;
wire   [0:0] tmp_132_fu_1085_p3;
wire   [0:0] xor_ln785_2_fu_1099_p2;
wire   [0:0] or_ln340_2_fu_1105_p2;
wire   [4:0] add_ln416_28_fu_1060_p2;
wire   [0:0] icmp_ln1494_2_fu_1037_p2;
wire   [4:0] select_ln340_2_fu_1111_p3;
wire   [5:0] zext_ln415_29_fu_1139_p1;
wire   [4:0] zext_ln415_46_fu_1142_p1;
wire   [5:0] add_ln415_29_fu_1145_p2;
wire   [0:0] tmp_135_fu_1155_p3;
wire   [0:0] tmp_133_fu_1132_p3;
wire   [0:0] xor_ln416_29_fu_1163_p2;
wire   [0:0] and_ln416_29_fu_1169_p2;
wire   [0:0] select_ln777_29_fu_1183_p3;
wire   [0:0] tmp_136_fu_1175_p3;
wire   [0:0] xor_ln785_3_fu_1189_p2;
wire   [0:0] or_ln340_3_fu_1195_p2;
wire   [4:0] add_ln416_29_fu_1150_p2;
wire   [0:0] icmp_ln1494_3_fu_1127_p2;
wire   [4:0] select_ln340_3_fu_1201_p3;
wire   [5:0] zext_ln415_30_fu_1229_p1;
wire   [4:0] zext_ln415_47_fu_1232_p1;
wire   [5:0] add_ln415_30_fu_1235_p2;
wire   [0:0] tmp_139_fu_1245_p3;
wire   [0:0] tmp_137_fu_1222_p3;
wire   [0:0] xor_ln416_30_fu_1253_p2;
wire   [0:0] and_ln416_30_fu_1259_p2;
wire   [0:0] select_ln777_30_fu_1273_p3;
wire   [0:0] tmp_140_fu_1265_p3;
wire   [0:0] xor_ln785_4_fu_1279_p2;
wire   [0:0] or_ln340_4_fu_1285_p2;
wire   [4:0] add_ln416_30_fu_1240_p2;
wire   [0:0] icmp_ln1494_4_fu_1217_p2;
wire   [4:0] select_ln340_4_fu_1291_p3;
wire   [5:0] zext_ln415_31_fu_1319_p1;
wire   [4:0] zext_ln415_48_fu_1322_p1;
wire   [5:0] add_ln415_31_fu_1325_p2;
wire   [0:0] tmp_143_fu_1335_p3;
wire   [0:0] tmp_141_fu_1312_p3;
wire   [0:0] xor_ln416_31_fu_1343_p2;
wire   [0:0] and_ln416_31_fu_1349_p2;
wire   [0:0] select_ln777_31_fu_1363_p3;
wire   [0:0] tmp_144_fu_1355_p3;
wire   [0:0] xor_ln785_5_fu_1369_p2;
wire   [0:0] or_ln340_5_fu_1375_p2;
wire   [4:0] add_ln416_31_fu_1330_p2;
wire   [0:0] icmp_ln1494_5_fu_1307_p2;
wire   [4:0] select_ln340_5_fu_1381_p3;
wire   [5:0] zext_ln415_32_fu_1409_p1;
wire   [4:0] zext_ln415_49_fu_1412_p1;
wire   [5:0] add_ln415_32_fu_1415_p2;
wire   [0:0] tmp_147_fu_1425_p3;
wire   [0:0] tmp_145_fu_1402_p3;
wire   [0:0] xor_ln416_32_fu_1433_p2;
wire   [0:0] and_ln416_32_fu_1439_p2;
wire   [0:0] select_ln777_32_fu_1453_p3;
wire   [0:0] tmp_148_fu_1445_p3;
wire   [0:0] xor_ln785_6_fu_1459_p2;
wire   [0:0] or_ln340_6_fu_1465_p2;
wire   [4:0] add_ln416_32_fu_1420_p2;
wire   [0:0] icmp_ln1494_6_fu_1397_p2;
wire   [4:0] select_ln340_6_fu_1471_p3;
wire   [5:0] zext_ln415_33_fu_1499_p1;
wire   [4:0] zext_ln415_50_fu_1502_p1;
wire   [5:0] add_ln415_33_fu_1505_p2;
wire   [0:0] tmp_151_fu_1515_p3;
wire   [0:0] tmp_149_fu_1492_p3;
wire   [0:0] xor_ln416_33_fu_1523_p2;
wire   [0:0] and_ln416_33_fu_1529_p2;
wire   [0:0] select_ln777_33_fu_1543_p3;
wire   [0:0] tmp_152_fu_1535_p3;
wire   [0:0] xor_ln785_7_fu_1549_p2;
wire   [0:0] or_ln340_7_fu_1555_p2;
wire   [4:0] add_ln416_33_fu_1510_p2;
wire   [0:0] icmp_ln1494_7_fu_1487_p2;
wire   [4:0] select_ln340_7_fu_1561_p3;
wire   [5:0] zext_ln415_34_fu_1589_p1;
wire   [4:0] zext_ln415_51_fu_1592_p1;
wire   [5:0] add_ln415_34_fu_1595_p2;
wire   [0:0] tmp_155_fu_1605_p3;
wire   [0:0] tmp_153_fu_1582_p3;
wire   [0:0] xor_ln416_34_fu_1613_p2;
wire   [0:0] and_ln416_34_fu_1619_p2;
wire   [0:0] select_ln777_34_fu_1633_p3;
wire   [0:0] tmp_156_fu_1625_p3;
wire   [0:0] xor_ln785_8_fu_1639_p2;
wire   [0:0] or_ln340_8_fu_1645_p2;
wire   [4:0] add_ln416_34_fu_1600_p2;
wire   [0:0] icmp_ln1494_8_fu_1577_p2;
wire   [4:0] select_ln340_8_fu_1651_p3;
wire   [5:0] zext_ln415_35_fu_1679_p1;
wire   [4:0] zext_ln415_52_fu_1682_p1;
wire   [5:0] add_ln415_35_fu_1685_p2;
wire   [0:0] tmp_159_fu_1695_p3;
wire   [0:0] tmp_157_fu_1672_p3;
wire   [0:0] xor_ln416_35_fu_1703_p2;
wire   [0:0] and_ln416_35_fu_1709_p2;
wire   [0:0] select_ln777_35_fu_1723_p3;
wire   [0:0] tmp_160_fu_1715_p3;
wire   [0:0] xor_ln785_9_fu_1729_p2;
wire   [0:0] or_ln340_9_fu_1735_p2;
wire   [4:0] add_ln416_35_fu_1690_p2;
wire   [0:0] icmp_ln1494_9_fu_1667_p2;
wire   [4:0] select_ln340_9_fu_1741_p3;
wire   [5:0] zext_ln415_36_fu_1769_p1;
wire   [4:0] zext_ln415_53_fu_1772_p1;
wire   [5:0] add_ln415_36_fu_1775_p2;
wire   [0:0] tmp_163_fu_1785_p3;
wire   [0:0] tmp_161_fu_1762_p3;
wire   [0:0] xor_ln416_36_fu_1793_p2;
wire   [0:0] and_ln416_36_fu_1799_p2;
wire   [0:0] select_ln777_36_fu_1813_p3;
wire   [0:0] tmp_164_fu_1805_p3;
wire   [0:0] xor_ln785_10_fu_1819_p2;
wire   [0:0] or_ln340_10_fu_1825_p2;
wire   [4:0] add_ln416_36_fu_1780_p2;
wire   [0:0] icmp_ln1494_10_fu_1757_p2;
wire   [4:0] select_ln340_10_fu_1831_p3;
wire   [5:0] zext_ln415_37_fu_1859_p1;
wire   [4:0] zext_ln415_54_fu_1862_p1;
wire   [5:0] add_ln415_37_fu_1865_p2;
wire   [0:0] tmp_167_fu_1875_p3;
wire   [0:0] tmp_165_fu_1852_p3;
wire   [0:0] xor_ln416_37_fu_1883_p2;
wire   [0:0] and_ln416_37_fu_1889_p2;
wire   [0:0] select_ln777_37_fu_1903_p3;
wire   [0:0] tmp_168_fu_1895_p3;
wire   [0:0] xor_ln785_11_fu_1909_p2;
wire   [0:0] or_ln340_11_fu_1915_p2;
wire   [4:0] add_ln416_37_fu_1870_p2;
wire   [0:0] icmp_ln1494_11_fu_1847_p2;
wire   [4:0] select_ln340_11_fu_1921_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_fu_197_p2 == 1'd0))) begin
        i_0_reg_186 <= i_fu_203_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_186 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln60_reg_1985 <= icmp_ln60_fu_197_p2;
        icmp_ln60_reg_1985_pp0_iter1_reg <= icmp_ln60_reg_1985;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln60_reg_1985_pp0_iter2_reg <= icmp_ln60_reg_1985_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        icmp_ln768_27_reg_2113 <= icmp_ln768_27_fu_351_p2;
        icmp_ln768_28_reg_2139 <= icmp_ln768_28_fu_401_p2;
        icmp_ln768_29_reg_2165 <= icmp_ln768_29_fu_451_p2;
        icmp_ln768_30_reg_2191 <= icmp_ln768_30_fu_501_p2;
        icmp_ln768_31_reg_2217 <= icmp_ln768_31_fu_551_p2;
        icmp_ln768_32_reg_2243 <= icmp_ln768_32_fu_601_p2;
        icmp_ln768_33_reg_2269 <= icmp_ln768_33_fu_651_p2;
        icmp_ln768_34_reg_2295 <= icmp_ln768_34_fu_701_p2;
        icmp_ln768_35_reg_2321 <= icmp_ln768_35_fu_751_p2;
        icmp_ln768_36_reg_2347 <= icmp_ln768_36_fu_801_p2;
        icmp_ln768_37_reg_2373 <= icmp_ln768_37_fu_851_p2;
        icmp_ln768_reg_2087 <= icmp_ln768_fu_301_p2;
        icmp_ln879_27_reg_2108 <= icmp_ln879_27_fu_345_p2;
        icmp_ln879_28_reg_2134 <= icmp_ln879_28_fu_395_p2;
        icmp_ln879_29_reg_2160 <= icmp_ln879_29_fu_445_p2;
        icmp_ln879_30_reg_2186 <= icmp_ln879_30_fu_495_p2;
        icmp_ln879_31_reg_2212 <= icmp_ln879_31_fu_545_p2;
        icmp_ln879_32_reg_2238 <= icmp_ln879_32_fu_595_p2;
        icmp_ln879_33_reg_2264 <= icmp_ln879_33_fu_645_p2;
        icmp_ln879_34_reg_2290 <= icmp_ln879_34_fu_695_p2;
        icmp_ln879_35_reg_2316 <= icmp_ln879_35_fu_745_p2;
        icmp_ln879_36_reg_2342 <= icmp_ln879_36_fu_795_p2;
        icmp_ln879_37_reg_2368 <= icmp_ln879_37_fu_845_p2;
        icmp_ln879_reg_2082 <= icmp_ln879_fu_295_p2;
        tmp_122_reg_2071 <= data_V_data_0_V_dout[32'd2];
        tmp_126_reg_2097 <= data_V_data_1_V_dout[32'd2];
        tmp_130_reg_2123 <= data_V_data_2_V_dout[32'd2];
        tmp_134_reg_2149 <= data_V_data_3_V_dout[32'd2];
        tmp_138_reg_2175 <= data_V_data_4_V_dout[32'd2];
        tmp_142_reg_2201 <= data_V_data_5_V_dout[32'd2];
        tmp_146_reg_2227 <= data_V_data_6_V_dout[32'd2];
        tmp_150_reg_2253 <= data_V_data_7_V_dout[32'd2];
        tmp_154_reg_2279 <= data_V_data_8_V_dout[32'd2];
        tmp_158_reg_2305 <= data_V_data_9_V_dout[32'd2];
        tmp_162_reg_2331 <= data_V_data_10_V_dout[32'd2];
        tmp_166_reg_2357 <= data_V_data_11_V_dout[32'd2];
        tmp_data_V_44_0_reg_1994 <= data_V_data_0_V_dout;
        tmp_data_V_44_10_reg_2054 <= data_V_data_10_V_dout;
        tmp_data_V_44_11_reg_2060 <= data_V_data_11_V_dout;
        tmp_data_V_44_1_reg_2000 <= data_V_data_1_V_dout;
        tmp_data_V_44_2_reg_2006 <= data_V_data_2_V_dout;
        tmp_data_V_44_3_reg_2012 <= data_V_data_3_V_dout;
        tmp_data_V_44_4_reg_2018 <= data_V_data_4_V_dout;
        tmp_data_V_44_5_reg_2024 <= data_V_data_5_V_dout;
        tmp_data_V_44_6_reg_2030 <= data_V_data_6_V_dout;
        tmp_data_V_44_7_reg_2036 <= data_V_data_7_V_dout;
        tmp_data_V_44_8_reg_2042 <= data_V_data_8_V_dout;
        tmp_data_V_44_9_reg_2048 <= data_V_data_9_V_dout;
        trunc_ln415_25_reg_2103 <= {{data_V_data_1_V_dout[7:3]}};
        trunc_ln415_26_reg_2129 <= {{data_V_data_2_V_dout[7:3]}};
        trunc_ln415_27_reg_2155 <= {{data_V_data_3_V_dout[7:3]}};
        trunc_ln415_28_reg_2181 <= {{data_V_data_4_V_dout[7:3]}};
        trunc_ln415_29_reg_2207 <= {{data_V_data_5_V_dout[7:3]}};
        trunc_ln415_30_reg_2233 <= {{data_V_data_6_V_dout[7:3]}};
        trunc_ln415_31_reg_2259 <= {{data_V_data_7_V_dout[7:3]}};
        trunc_ln415_32_reg_2285 <= {{data_V_data_8_V_dout[7:3]}};
        trunc_ln415_33_reg_2311 <= {{data_V_data_9_V_dout[7:3]}};
        trunc_ln415_34_reg_2337 <= {{data_V_data_10_V_dout[7:3]}};
        trunc_ln415_35_reg_2363 <= {{data_V_data_11_V_dout[7:3]}};
        trunc_ln415_s_reg_2077 <= {{data_V_data_0_V_dout[7:3]}};
        trunc_ln708_34_reg_2118 <= {{data_V_data_2_V_dout[8:3]}};
        trunc_ln708_35_reg_2144 <= {{data_V_data_3_V_dout[8:3]}};
        trunc_ln708_36_reg_2170 <= {{data_V_data_4_V_dout[8:3]}};
        trunc_ln708_37_reg_2196 <= {{data_V_data_5_V_dout[8:3]}};
        trunc_ln708_38_reg_2222 <= {{data_V_data_6_V_dout[8:3]}};
        trunc_ln708_39_reg_2248 <= {{data_V_data_7_V_dout[8:3]}};
        trunc_ln708_40_reg_2274 <= {{data_V_data_8_V_dout[8:3]}};
        trunc_ln708_41_reg_2300 <= {{data_V_data_9_V_dout[8:3]}};
        trunc_ln708_42_reg_2326 <= {{data_V_data_10_V_dout[8:3]}};
        trunc_ln708_43_reg_2352 <= {{data_V_data_11_V_dout[8:3]}};
        trunc_ln708_s_reg_2092 <= {{data_V_data_1_V_dout[8:3]}};
        trunc_ln_reg_2066 <= {{data_V_data_0_V_dout[8:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1985_pp0_iter1_reg == 1'd0))) begin
        tmp_data_0_V_reg_2378 <= tmp_data_0_V_fu_939_p3;
        tmp_data_10_V_reg_2428 <= tmp_data_10_V_fu_1839_p3;
        tmp_data_11_V_reg_2433 <= tmp_data_11_V_fu_1929_p3;
        tmp_data_1_V_reg_2383 <= tmp_data_1_V_fu_1029_p3;
        tmp_data_2_V_reg_2388 <= tmp_data_2_V_fu_1119_p3;
        tmp_data_3_V_reg_2393 <= tmp_data_3_V_fu_1209_p3;
        tmp_data_4_V_reg_2398 <= tmp_data_4_V_fu_1299_p3;
        tmp_data_5_V_reg_2403 <= tmp_data_5_V_fu_1389_p3;
        tmp_data_6_V_reg_2408 <= tmp_data_6_V_fu_1479_p3;
        tmp_data_7_V_reg_2413 <= tmp_data_7_V_fu_1569_p3;
        tmp_data_8_V_reg_2418 <= tmp_data_8_V_fu_1659_p3;
        tmp_data_9_V_reg_2423 <= tmp_data_9_V_fu_1749_p3;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_197_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1985 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_197_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_197_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_27_fu_965_p2 = (trunc_ln708_s_reg_2092 + zext_ln415_27_fu_959_p1);

assign add_ln415_28_fu_1055_p2 = (trunc_ln708_34_reg_2118 + zext_ln415_28_fu_1049_p1);

assign add_ln415_29_fu_1145_p2 = (trunc_ln708_35_reg_2144 + zext_ln415_29_fu_1139_p1);

assign add_ln415_30_fu_1235_p2 = (trunc_ln708_36_reg_2170 + zext_ln415_30_fu_1229_p1);

assign add_ln415_31_fu_1325_p2 = (trunc_ln708_37_reg_2196 + zext_ln415_31_fu_1319_p1);

assign add_ln415_32_fu_1415_p2 = (trunc_ln708_38_reg_2222 + zext_ln415_32_fu_1409_p1);

assign add_ln415_33_fu_1505_p2 = (trunc_ln708_39_reg_2248 + zext_ln415_33_fu_1499_p1);

assign add_ln415_34_fu_1595_p2 = (trunc_ln708_40_reg_2274 + zext_ln415_34_fu_1589_p1);

assign add_ln415_35_fu_1685_p2 = (trunc_ln708_41_reg_2300 + zext_ln415_35_fu_1679_p1);

assign add_ln415_36_fu_1775_p2 = (trunc_ln708_42_reg_2326 + zext_ln415_36_fu_1769_p1);

assign add_ln415_37_fu_1865_p2 = (trunc_ln708_43_reg_2352 + zext_ln415_37_fu_1859_p1);

assign add_ln415_fu_875_p2 = (trunc_ln_reg_2066 + zext_ln415_fu_869_p1);

assign add_ln416_27_fu_970_p2 = (trunc_ln415_25_reg_2103 + zext_ln415_44_fu_962_p1);

assign add_ln416_28_fu_1060_p2 = (trunc_ln415_26_reg_2129 + zext_ln415_45_fu_1052_p1);

assign add_ln416_29_fu_1150_p2 = (trunc_ln415_27_reg_2155 + zext_ln415_46_fu_1142_p1);

assign add_ln416_30_fu_1240_p2 = (trunc_ln415_28_reg_2181 + zext_ln415_47_fu_1232_p1);

assign add_ln416_31_fu_1330_p2 = (trunc_ln415_29_reg_2207 + zext_ln415_48_fu_1322_p1);

assign add_ln416_32_fu_1420_p2 = (trunc_ln415_30_reg_2233 + zext_ln415_49_fu_1412_p1);

assign add_ln416_33_fu_1510_p2 = (trunc_ln415_31_reg_2259 + zext_ln415_50_fu_1502_p1);

assign add_ln416_34_fu_1600_p2 = (trunc_ln415_32_reg_2285 + zext_ln415_51_fu_1592_p1);

assign add_ln416_35_fu_1690_p2 = (trunc_ln415_33_reg_2311 + zext_ln415_52_fu_1682_p1);

assign add_ln416_36_fu_1780_p2 = (trunc_ln415_34_reg_2337 + zext_ln415_53_fu_1772_p1);

assign add_ln416_37_fu_1870_p2 = (trunc_ln415_35_reg_2363 + zext_ln415_54_fu_1862_p1);

assign add_ln416_fu_880_p2 = (trunc_ln415_s_reg_2077 + zext_ln415_43_fu_872_p1);

assign and_ln416_27_fu_989_p2 = (xor_ln416_27_fu_983_p2 & tmp_125_fu_952_p3);

assign and_ln416_28_fu_1079_p2 = (xor_ln416_28_fu_1073_p2 & tmp_129_fu_1042_p3);

assign and_ln416_29_fu_1169_p2 = (xor_ln416_29_fu_1163_p2 & tmp_133_fu_1132_p3);

assign and_ln416_30_fu_1259_p2 = (xor_ln416_30_fu_1253_p2 & tmp_137_fu_1222_p3);

assign and_ln416_31_fu_1349_p2 = (xor_ln416_31_fu_1343_p2 & tmp_141_fu_1312_p3);

assign and_ln416_32_fu_1439_p2 = (xor_ln416_32_fu_1433_p2 & tmp_145_fu_1402_p3);

assign and_ln416_33_fu_1529_p2 = (xor_ln416_33_fu_1523_p2 & tmp_149_fu_1492_p3);

assign and_ln416_34_fu_1619_p2 = (xor_ln416_34_fu_1613_p2 & tmp_153_fu_1582_p3);

assign and_ln416_35_fu_1709_p2 = (xor_ln416_35_fu_1703_p2 & tmp_157_fu_1672_p3);

assign and_ln416_36_fu_1799_p2 = (xor_ln416_36_fu_1793_p2 & tmp_161_fu_1762_p3);

assign and_ln416_37_fu_1889_p2 = (xor_ln416_37_fu_1883_p2 & tmp_165_fu_1852_p3);

assign and_ln416_fu_899_p2 = (xor_ln416_fu_893_p2 & tmp_121_fu_862_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op317 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op37 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1985 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op317 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op37 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1985 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op317 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op37 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln60_reg_1985 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op37 == 1'b0) & (icmp_ln60_reg_1985 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op317 == 1'b0) & (icmp_ln60_reg_1985_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_203_p2 = (i_0_reg_186 + 10'd1);

assign icmp_ln1494_10_fu_1757_p2 = (($signed(tmp_data_V_44_10_reg_2054) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_1847_p2 = (($signed(tmp_data_V_44_11_reg_2060) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_947_p2 = (($signed(tmp_data_V_44_1_reg_2000) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_1037_p2 = (($signed(tmp_data_V_44_2_reg_2006) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1127_p2 = (($signed(tmp_data_V_44_3_reg_2012) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1217_p2 = (($signed(tmp_data_V_44_4_reg_2018) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1307_p2 = (($signed(tmp_data_V_44_5_reg_2024) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1397_p2 = (($signed(tmp_data_V_44_6_reg_2030) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1487_p2 = (($signed(tmp_data_V_44_7_reg_2036) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_1577_p2 = (($signed(tmp_data_V_44_8_reg_2042) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1667_p2 = (($signed(tmp_data_V_44_9_reg_2048) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_857_p2 = (($signed(tmp_data_V_44_0_reg_1994) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_197_p2 = ((i_0_reg_186 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln768_27_fu_351_p2 = ((p_Result_19_1_fu_335_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_28_fu_401_p2 = ((p_Result_19_2_fu_385_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_29_fu_451_p2 = ((p_Result_19_3_fu_435_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_30_fu_501_p2 = ((p_Result_19_4_fu_485_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_31_fu_551_p2 = ((p_Result_19_5_fu_535_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_32_fu_601_p2 = ((p_Result_19_6_fu_585_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_33_fu_651_p2 = ((p_Result_19_7_fu_635_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_34_fu_701_p2 = ((p_Result_19_8_fu_685_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_35_fu_751_p2 = ((p_Result_19_9_fu_735_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_36_fu_801_p2 = ((p_Result_19_s_fu_785_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_37_fu_851_p2 = ((p_Result_19_10_fu_835_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_301_p2 = ((p_Result_s_fu_285_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_27_fu_345_p2 = ((p_Result_19_1_fu_335_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_28_fu_395_p2 = ((p_Result_19_2_fu_385_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_29_fu_445_p2 = ((p_Result_19_3_fu_435_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_30_fu_495_p2 = ((p_Result_19_4_fu_485_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_31_fu_545_p2 = ((p_Result_19_5_fu_535_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_32_fu_595_p2 = ((p_Result_19_6_fu_585_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_33_fu_645_p2 = ((p_Result_19_7_fu_635_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_34_fu_695_p2 = ((p_Result_19_8_fu_685_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_35_fu_745_p2 = ((p_Result_19_9_fu_735_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_36_fu_795_p2 = ((p_Result_19_s_fu_785_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_37_fu_845_p2 = ((p_Result_19_10_fu_835_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_295_p2 = ((p_Result_s_fu_285_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op317 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op37 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_10_fu_1825_p2 = (xor_ln785_10_fu_1819_p2 | tmp_164_fu_1805_p3);

assign or_ln340_11_fu_1915_p2 = (xor_ln785_11_fu_1909_p2 | tmp_168_fu_1895_p3);

assign or_ln340_1_fu_1015_p2 = (xor_ln785_1_fu_1009_p2 | tmp_128_fu_995_p3);

assign or_ln340_2_fu_1105_p2 = (xor_ln785_2_fu_1099_p2 | tmp_132_fu_1085_p3);

assign or_ln340_3_fu_1195_p2 = (xor_ln785_3_fu_1189_p2 | tmp_136_fu_1175_p3);

assign or_ln340_4_fu_1285_p2 = (xor_ln785_4_fu_1279_p2 | tmp_140_fu_1265_p3);

assign or_ln340_5_fu_1375_p2 = (xor_ln785_5_fu_1369_p2 | tmp_144_fu_1355_p3);

assign or_ln340_6_fu_1465_p2 = (xor_ln785_6_fu_1459_p2 | tmp_148_fu_1445_p3);

assign or_ln340_7_fu_1555_p2 = (xor_ln785_7_fu_1549_p2 | tmp_152_fu_1535_p3);

assign or_ln340_8_fu_1645_p2 = (xor_ln785_8_fu_1639_p2 | tmp_156_fu_1625_p3);

assign or_ln340_9_fu_1735_p2 = (xor_ln785_9_fu_1729_p2 | tmp_160_fu_1715_p3);

assign or_ln340_fu_925_p2 = (xor_ln785_fu_919_p2 | tmp_124_fu_905_p3);

assign p_Result_19_10_fu_835_p4 = {{data_V_data_11_V_dout[13:9]}};

assign p_Result_19_1_fu_335_p4 = {{data_V_data_1_V_dout[13:9]}};

assign p_Result_19_2_fu_385_p4 = {{data_V_data_2_V_dout[13:9]}};

assign p_Result_19_3_fu_435_p4 = {{data_V_data_3_V_dout[13:9]}};

assign p_Result_19_4_fu_485_p4 = {{data_V_data_4_V_dout[13:9]}};

assign p_Result_19_5_fu_535_p4 = {{data_V_data_5_V_dout[13:9]}};

assign p_Result_19_6_fu_585_p4 = {{data_V_data_6_V_dout[13:9]}};

assign p_Result_19_7_fu_635_p4 = {{data_V_data_7_V_dout[13:9]}};

assign p_Result_19_8_fu_685_p4 = {{data_V_data_8_V_dout[13:9]}};

assign p_Result_19_9_fu_735_p4 = {{data_V_data_9_V_dout[13:9]}};

assign p_Result_19_s_fu_785_p4 = {{data_V_data_10_V_dout[13:9]}};

assign p_Result_s_fu_285_p4 = {{data_V_data_0_V_dout[13:9]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_2378;

assign res_V_data_10_V_din = tmp_data_10_V_reg_2428;

assign res_V_data_11_V_din = tmp_data_11_V_reg_2433;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2383;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2388;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2393;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2398;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2403;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2408;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2413;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2418;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2423;

assign select_ln340_10_fu_1831_p3 = ((or_ln340_10_fu_1825_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_36_fu_1780_p2);

assign select_ln340_11_fu_1921_p3 = ((or_ln340_11_fu_1915_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_37_fu_1870_p2);

assign select_ln340_1_fu_1021_p3 = ((or_ln340_1_fu_1015_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_27_fu_970_p2);

assign select_ln340_2_fu_1111_p3 = ((or_ln340_2_fu_1105_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_28_fu_1060_p2);

assign select_ln340_3_fu_1201_p3 = ((or_ln340_3_fu_1195_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_29_fu_1150_p2);

assign select_ln340_4_fu_1291_p3 = ((or_ln340_4_fu_1285_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_30_fu_1240_p2);

assign select_ln340_5_fu_1381_p3 = ((or_ln340_5_fu_1375_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_31_fu_1330_p2);

assign select_ln340_6_fu_1471_p3 = ((or_ln340_6_fu_1465_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_32_fu_1420_p2);

assign select_ln340_7_fu_1561_p3 = ((or_ln340_7_fu_1555_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_33_fu_1510_p2);

assign select_ln340_8_fu_1651_p3 = ((or_ln340_8_fu_1645_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_34_fu_1600_p2);

assign select_ln340_9_fu_1741_p3 = ((or_ln340_9_fu_1735_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_35_fu_1690_p2);

assign select_ln340_fu_931_p3 = ((or_ln340_fu_925_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_fu_880_p2);

assign select_ln777_27_fu_1003_p3 = ((and_ln416_27_fu_989_p2[0:0] === 1'b1) ? icmp_ln879_27_reg_2108 : icmp_ln768_27_reg_2113);

assign select_ln777_28_fu_1093_p3 = ((and_ln416_28_fu_1079_p2[0:0] === 1'b1) ? icmp_ln879_28_reg_2134 : icmp_ln768_28_reg_2139);

assign select_ln777_29_fu_1183_p3 = ((and_ln416_29_fu_1169_p2[0:0] === 1'b1) ? icmp_ln879_29_reg_2160 : icmp_ln768_29_reg_2165);

assign select_ln777_30_fu_1273_p3 = ((and_ln416_30_fu_1259_p2[0:0] === 1'b1) ? icmp_ln879_30_reg_2186 : icmp_ln768_30_reg_2191);

assign select_ln777_31_fu_1363_p3 = ((and_ln416_31_fu_1349_p2[0:0] === 1'b1) ? icmp_ln879_31_reg_2212 : icmp_ln768_31_reg_2217);

assign select_ln777_32_fu_1453_p3 = ((and_ln416_32_fu_1439_p2[0:0] === 1'b1) ? icmp_ln879_32_reg_2238 : icmp_ln768_32_reg_2243);

assign select_ln777_33_fu_1543_p3 = ((and_ln416_33_fu_1529_p2[0:0] === 1'b1) ? icmp_ln879_33_reg_2264 : icmp_ln768_33_reg_2269);

assign select_ln777_34_fu_1633_p3 = ((and_ln416_34_fu_1619_p2[0:0] === 1'b1) ? icmp_ln879_34_reg_2290 : icmp_ln768_34_reg_2295);

assign select_ln777_35_fu_1723_p3 = ((and_ln416_35_fu_1709_p2[0:0] === 1'b1) ? icmp_ln879_35_reg_2316 : icmp_ln768_35_reg_2321);

assign select_ln777_36_fu_1813_p3 = ((and_ln416_36_fu_1799_p2[0:0] === 1'b1) ? icmp_ln879_36_reg_2342 : icmp_ln768_36_reg_2347);

assign select_ln777_37_fu_1903_p3 = ((and_ln416_37_fu_1889_p2[0:0] === 1'b1) ? icmp_ln879_37_reg_2368 : icmp_ln768_37_reg_2373);

assign select_ln777_fu_913_p3 = ((and_ln416_fu_899_p2[0:0] === 1'b1) ? icmp_ln879_reg_2082 : icmp_ln768_reg_2087);

assign start_out = real_start;

assign tmp_121_fu_862_p3 = tmp_data_V_44_0_reg_1994[32'd8];

assign tmp_123_fu_885_p3 = add_ln415_fu_875_p2[32'd5];

assign tmp_124_fu_905_p3 = add_ln415_fu_875_p2[32'd5];

assign tmp_125_fu_952_p3 = tmp_data_V_44_1_reg_2000[32'd8];

assign tmp_127_fu_975_p3 = add_ln415_27_fu_965_p2[32'd5];

assign tmp_128_fu_995_p3 = add_ln415_27_fu_965_p2[32'd5];

assign tmp_129_fu_1042_p3 = tmp_data_V_44_2_reg_2006[32'd8];

assign tmp_131_fu_1065_p3 = add_ln415_28_fu_1055_p2[32'd5];

assign tmp_132_fu_1085_p3 = add_ln415_28_fu_1055_p2[32'd5];

assign tmp_133_fu_1132_p3 = tmp_data_V_44_3_reg_2012[32'd8];

assign tmp_135_fu_1155_p3 = add_ln415_29_fu_1145_p2[32'd5];

assign tmp_136_fu_1175_p3 = add_ln415_29_fu_1145_p2[32'd5];

assign tmp_137_fu_1222_p3 = tmp_data_V_44_4_reg_2018[32'd8];

assign tmp_139_fu_1245_p3 = add_ln415_30_fu_1235_p2[32'd5];

assign tmp_140_fu_1265_p3 = add_ln415_30_fu_1235_p2[32'd5];

assign tmp_141_fu_1312_p3 = tmp_data_V_44_5_reg_2024[32'd8];

assign tmp_143_fu_1335_p3 = add_ln415_31_fu_1325_p2[32'd5];

assign tmp_144_fu_1355_p3 = add_ln415_31_fu_1325_p2[32'd5];

assign tmp_145_fu_1402_p3 = tmp_data_V_44_6_reg_2030[32'd8];

assign tmp_147_fu_1425_p3 = add_ln415_32_fu_1415_p2[32'd5];

assign tmp_148_fu_1445_p3 = add_ln415_32_fu_1415_p2[32'd5];

assign tmp_149_fu_1492_p3 = tmp_data_V_44_7_reg_2036[32'd8];

assign tmp_151_fu_1515_p3 = add_ln415_33_fu_1505_p2[32'd5];

assign tmp_152_fu_1535_p3 = add_ln415_33_fu_1505_p2[32'd5];

assign tmp_153_fu_1582_p3 = tmp_data_V_44_8_reg_2042[32'd8];

assign tmp_155_fu_1605_p3 = add_ln415_34_fu_1595_p2[32'd5];

assign tmp_156_fu_1625_p3 = add_ln415_34_fu_1595_p2[32'd5];

assign tmp_157_fu_1672_p3 = tmp_data_V_44_9_reg_2048[32'd8];

assign tmp_159_fu_1695_p3 = add_ln415_35_fu_1685_p2[32'd5];

assign tmp_160_fu_1715_p3 = add_ln415_35_fu_1685_p2[32'd5];

assign tmp_161_fu_1762_p3 = tmp_data_V_44_10_reg_2054[32'd8];

assign tmp_163_fu_1785_p3 = add_ln415_36_fu_1775_p2[32'd5];

assign tmp_164_fu_1805_p3 = add_ln415_36_fu_1775_p2[32'd5];

assign tmp_165_fu_1852_p3 = tmp_data_V_44_11_reg_2060[32'd8];

assign tmp_167_fu_1875_p3 = add_ln415_37_fu_1865_p2[32'd5];

assign tmp_168_fu_1895_p3 = add_ln415_37_fu_1865_p2[32'd5];

assign tmp_data_0_V_fu_939_p3 = ((icmp_ln1494_fu_857_p2[0:0] === 1'b1) ? select_ln340_fu_931_p3 : 5'd0);

assign tmp_data_10_V_fu_1839_p3 = ((icmp_ln1494_10_fu_1757_p2[0:0] === 1'b1) ? select_ln340_10_fu_1831_p3 : 5'd0);

assign tmp_data_11_V_fu_1929_p3 = ((icmp_ln1494_11_fu_1847_p2[0:0] === 1'b1) ? select_ln340_11_fu_1921_p3 : 5'd0);

assign tmp_data_1_V_fu_1029_p3 = ((icmp_ln1494_1_fu_947_p2[0:0] === 1'b1) ? select_ln340_1_fu_1021_p3 : 5'd0);

assign tmp_data_2_V_fu_1119_p3 = ((icmp_ln1494_2_fu_1037_p2[0:0] === 1'b1) ? select_ln340_2_fu_1111_p3 : 5'd0);

assign tmp_data_3_V_fu_1209_p3 = ((icmp_ln1494_3_fu_1127_p2[0:0] === 1'b1) ? select_ln340_3_fu_1201_p3 : 5'd0);

assign tmp_data_4_V_fu_1299_p3 = ((icmp_ln1494_4_fu_1217_p2[0:0] === 1'b1) ? select_ln340_4_fu_1291_p3 : 5'd0);

assign tmp_data_5_V_fu_1389_p3 = ((icmp_ln1494_5_fu_1307_p2[0:0] === 1'b1) ? select_ln340_5_fu_1381_p3 : 5'd0);

assign tmp_data_6_V_fu_1479_p3 = ((icmp_ln1494_6_fu_1397_p2[0:0] === 1'b1) ? select_ln340_6_fu_1471_p3 : 5'd0);

assign tmp_data_7_V_fu_1569_p3 = ((icmp_ln1494_7_fu_1487_p2[0:0] === 1'b1) ? select_ln340_7_fu_1561_p3 : 5'd0);

assign tmp_data_8_V_fu_1659_p3 = ((icmp_ln1494_8_fu_1577_p2[0:0] === 1'b1) ? select_ln340_8_fu_1651_p3 : 5'd0);

assign tmp_data_9_V_fu_1749_p3 = ((icmp_ln1494_9_fu_1667_p2[0:0] === 1'b1) ? select_ln340_9_fu_1741_p3 : 5'd0);

assign xor_ln416_27_fu_983_p2 = (tmp_127_fu_975_p3 ^ 1'd1);

assign xor_ln416_28_fu_1073_p2 = (tmp_131_fu_1065_p3 ^ 1'd1);

assign xor_ln416_29_fu_1163_p2 = (tmp_135_fu_1155_p3 ^ 1'd1);

assign xor_ln416_30_fu_1253_p2 = (tmp_139_fu_1245_p3 ^ 1'd1);

assign xor_ln416_31_fu_1343_p2 = (tmp_143_fu_1335_p3 ^ 1'd1);

assign xor_ln416_32_fu_1433_p2 = (tmp_147_fu_1425_p3 ^ 1'd1);

assign xor_ln416_33_fu_1523_p2 = (tmp_151_fu_1515_p3 ^ 1'd1);

assign xor_ln416_34_fu_1613_p2 = (tmp_155_fu_1605_p3 ^ 1'd1);

assign xor_ln416_35_fu_1703_p2 = (tmp_159_fu_1695_p3 ^ 1'd1);

assign xor_ln416_36_fu_1793_p2 = (tmp_163_fu_1785_p3 ^ 1'd1);

assign xor_ln416_37_fu_1883_p2 = (tmp_167_fu_1875_p3 ^ 1'd1);

assign xor_ln416_fu_893_p2 = (tmp_123_fu_885_p3 ^ 1'd1);

assign xor_ln785_10_fu_1819_p2 = (select_ln777_36_fu_1813_p3 ^ 1'd1);

assign xor_ln785_11_fu_1909_p2 = (select_ln777_37_fu_1903_p3 ^ 1'd1);

assign xor_ln785_1_fu_1009_p2 = (select_ln777_27_fu_1003_p3 ^ 1'd1);

assign xor_ln785_2_fu_1099_p2 = (select_ln777_28_fu_1093_p3 ^ 1'd1);

assign xor_ln785_3_fu_1189_p2 = (select_ln777_29_fu_1183_p3 ^ 1'd1);

assign xor_ln785_4_fu_1279_p2 = (select_ln777_30_fu_1273_p3 ^ 1'd1);

assign xor_ln785_5_fu_1369_p2 = (select_ln777_31_fu_1363_p3 ^ 1'd1);

assign xor_ln785_6_fu_1459_p2 = (select_ln777_32_fu_1453_p3 ^ 1'd1);

assign xor_ln785_7_fu_1549_p2 = (select_ln777_33_fu_1543_p3 ^ 1'd1);

assign xor_ln785_8_fu_1639_p2 = (select_ln777_34_fu_1633_p3 ^ 1'd1);

assign xor_ln785_9_fu_1729_p2 = (select_ln777_35_fu_1723_p3 ^ 1'd1);

assign xor_ln785_fu_919_p2 = (select_ln777_fu_913_p3 ^ 1'd1);

assign zext_ln415_27_fu_959_p1 = tmp_126_reg_2097;

assign zext_ln415_28_fu_1049_p1 = tmp_130_reg_2123;

assign zext_ln415_29_fu_1139_p1 = tmp_134_reg_2149;

assign zext_ln415_30_fu_1229_p1 = tmp_138_reg_2175;

assign zext_ln415_31_fu_1319_p1 = tmp_142_reg_2201;

assign zext_ln415_32_fu_1409_p1 = tmp_146_reg_2227;

assign zext_ln415_33_fu_1499_p1 = tmp_150_reg_2253;

assign zext_ln415_34_fu_1589_p1 = tmp_154_reg_2279;

assign zext_ln415_35_fu_1679_p1 = tmp_158_reg_2305;

assign zext_ln415_36_fu_1769_p1 = tmp_162_reg_2331;

assign zext_ln415_37_fu_1859_p1 = tmp_166_reg_2357;

assign zext_ln415_43_fu_872_p1 = tmp_122_reg_2071;

assign zext_ln415_44_fu_962_p1 = tmp_126_reg_2097;

assign zext_ln415_45_fu_1052_p1 = tmp_130_reg_2123;

assign zext_ln415_46_fu_1142_p1 = tmp_134_reg_2149;

assign zext_ln415_47_fu_1232_p1 = tmp_138_reg_2175;

assign zext_ln415_48_fu_1322_p1 = tmp_142_reg_2201;

assign zext_ln415_49_fu_1412_p1 = tmp_146_reg_2227;

assign zext_ln415_50_fu_1502_p1 = tmp_150_reg_2253;

assign zext_ln415_51_fu_1592_p1 = tmp_154_reg_2279;

assign zext_ln415_52_fu_1682_p1 = tmp_158_reg_2305;

assign zext_ln415_53_fu_1772_p1 = tmp_162_reg_2331;

assign zext_ln415_54_fu_1862_p1 = tmp_166_reg_2357;

assign zext_ln415_fu_869_p1 = tmp_122_reg_2071;

endmodule //relu_array_array_ap_fixed_12u_relu_config15_s
