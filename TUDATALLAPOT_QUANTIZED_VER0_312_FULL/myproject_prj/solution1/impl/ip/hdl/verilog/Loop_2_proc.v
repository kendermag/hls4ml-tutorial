// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        is_last_0_i_loc_dout,
        is_last_0_i_loc_empty_n,
        is_last_0_i_loc_read,
        tmp_data_V_dout,
        tmp_data_V_empty_n,
        tmp_data_V_read
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;
input  [0:0] is_last_0_i_loc_dout;
input   is_last_0_i_loc_empty_n;
output   is_last_0_i_loc_read;
input  [15:0] tmp_data_V_dout;
input   tmp_data_V_empty_n;
output   tmp_data_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg is_last_0_i_loc_read;
reg tmp_data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_data_1_data_out;
reg    out_data_1_vld_in;
wire    out_data_1_vld_out;
wire    out_data_1_ack_in;
wire    out_data_1_ack_out;
reg   [31:0] out_data_1_payload_A;
reg   [31:0] out_data_1_payload_B;
reg    out_data_1_sel_rd;
reg    out_data_1_sel_wr;
wire    out_data_1_sel;
wire    out_data_1_load_A;
wire    out_data_1_load_B;
reg   [1:0] out_data_1_state;
wire    out_data_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
reg    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    is_last_0_i_loc_blk_n;
reg    tmp_data_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln37_fu_139_p2;
reg   [0:0] is_last_0_i_loc_read_reg_451;
reg    ap_block_state1;
wire   [1:0] j_fu_145_p2;
reg   [1:0] j_reg_459;
reg    ap_block_state2;
wire   [0:0] last_fu_157_p2;
reg   [0:0] last_reg_464;
reg   [15:0] tmp_V_3_reg_469;
reg   [0:0] p_Result_12_reg_475;
wire   [15:0] tmp_V_fu_170_p2;
reg   [15:0] tmp_V_reg_481;
wire   [0:0] icmp_ln935_fu_176_p2;
reg   [0:0] icmp_ln935_reg_486;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_V_4_fu_181_p3;
reg   [15:0] tmp_V_4_reg_491;
reg   [31:0] l_fu_204_p3;
reg   [31:0] l_reg_499;
wire   [7:0] trunc_ln943_fu_212_p1;
reg   [7:0] trunc_ln943_reg_504;
wire   [31:0] sub_ln944_fu_216_p2;
reg   [31:0] sub_ln944_reg_509;
wire    ap_CS_fsm_state4;
wire   [15:0] trunc_ln944_fu_221_p1;
reg   [15:0] trunc_ln944_reg_516;
wire   [4:0] sub_ln947_fu_229_p2;
reg   [4:0] sub_ln947_reg_521;
wire   [31:0] lsb_index_fu_235_p2;
reg   [31:0] lsb_index_reg_526;
wire    ap_CS_fsm_state5;
reg   [30:0] tmp_reg_532;
wire   [0:0] icmp_ln947_1_fu_264_p2;
reg   [0:0] icmp_ln947_1_reg_537;
wire   [31:0] add_ln958_fu_270_p2;
reg   [31:0] add_ln958_reg_542;
wire   [31:0] sub_ln958_fu_275_p2;
reg   [31:0] sub_ln958_reg_547;
wire   [31:0] or_ln_i_i_fu_327_p3;
reg   [31:0] or_ln_i_i_reg_552;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln958_fu_341_p2;
reg   [0:0] icmp_ln958_reg_567;
wire   [31:0] grp_fu_346_p2;
reg   [31:0] lshr_ln958_reg_577;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_354_p2;
reg   [63:0] shl_ln958_reg_582;
reg   [62:0] m_5_reg_587;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_296_reg_592;
wire   [7:0] select_ln964_fu_396_p3;
reg   [7:0] select_ln964_reg_597;
wire    ap_CS_fsm_state9;
wire   [31:0] select_ln935_fu_443_p3;
reg   [1:0] j3_0_i_i_reg_128;
wire   [0:0] icmp_ln38_fu_151_p2;
reg   [15:0] p_Result_s_fu_186_p4;
wire   [31:0] p_Result_13_fu_196_p3;
wire   [4:0] trunc_ln947_fu_225_p1;
wire   [15:0] zext_ln947_fu_250_p1;
wire   [15:0] lshr_ln947_fu_253_p2;
wire   [15:0] p_Result_10_fu_259_p2;
wire   [0:0] icmp_ln947_fu_280_p2;
wire   [0:0] tmp_295_fu_290_p3;
wire   [15:0] add_ln949_fu_303_p2;
wire   [0:0] p_Result_7_fu_308_p3;
wire   [0:0] xor_ln949_fu_297_p2;
wire   [0:0] and_ln949_fu_315_p2;
wire   [0:0] a_fu_285_p2;
wire   [0:0] or_ln949_fu_321_p2;
wire   [31:0] grp_fu_346_p0;
wire   [63:0] grp_fu_354_p0;
wire   [63:0] grp_fu_354_p1;
wire   [63:0] zext_ln958_fu_360_p1;
wire   [63:0] zext_ln961_fu_369_p1;
wire   [63:0] m_1_fu_363_p3;
wire   [63:0] m_2_fu_372_p2;
wire   [7:0] sub_ln964_fu_406_p2;
wire   [7:0] add_ln964_fu_411_p2;
wire   [63:0] m_6_fu_403_p1;
wire   [8:0] tmp_518_i_i_fu_416_p3;
wire   [63:0] p_Result_14_fu_423_p5;
wire   [31:0] trunc_ln738_fu_435_p1;
wire   [31:0] bitcast_ln739_fu_439_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 out_data_1_sel_rd = 1'b0;
#0 out_data_1_sel_wr = 1'b0;
#0 out_data_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
end

myproject_axi_lshr_32ns_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myproject_axi_lshr_32ns_32ns_32_2_1_U2945(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_346_p0),
    .din1(add_ln958_reg_542),
    .ce(1'b1),
    .dout(grp_fu_346_p2)
);

myproject_axi_shl_64ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_shl_64ns_32ns_64_2_1_U2946(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_354_p0),
    .din1(grp_fu_354_p1),
    .ce(1'b1),
    .dout(grp_fu_354_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln37_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_data_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_1_ack_out == 1'b1) & (out_data_1_vld_out == 1'b1))) begin
            out_data_1_sel_rd <= ~out_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_data_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_1_ack_in == 1'b1) & (out_data_1_vld_in == 1'b1))) begin
            out_data_1_sel_wr <= ~out_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_data_1_state <= 2'd0;
    end else begin
        if ((((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b0)) | ((out_data_1_state == 2'd3) & (out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)))) begin
            out_data_1_state <= 2'd2;
        end else if ((((out_data_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd1;
        end else if (((~((out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_data_1_vld_in == 1'b1)) & (out_data_1_state == 2'd3)) | ((out_data_1_state == 2'd1) & (out_data_1_ack_out == 1'b1)) | ((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd3;
        end else begin
            out_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_out == 1'b1) & (out_last_V_1_vld_out == 1'b1))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_in == 1'b1) & (out_last_V_1_vld_in == 1'b1))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((out_last_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd1;
        end else if (((~((out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_last_V_1_vld_in == 1'b1)) & (out_last_V_1_state == 2'd3)) | ((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b1)) | ((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (is_last_0_i_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j3_0_i_i_reg_128 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (out_last_V_1_ack_in == 1'b1))) begin
        j3_0_i_i_reg_128 <= j_reg_459;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_486 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln958_reg_542 <= add_ln958_fu_270_p2;
        icmp_ln947_1_reg_537 <= icmp_ln947_1_fu_264_p2;
        lsb_index_reg_526 <= lsb_index_fu_235_p2;
        sub_ln958_reg_547 <= sub_ln958_fu_275_p2;
        tmp_reg_532 <= {{lsb_index_fu_235_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln935_reg_486 <= icmp_ln935_fu_176_p2;
        l_reg_499 <= l_fu_204_p3;
        tmp_V_4_reg_491 <= tmp_V_4_fu_181_p3;
        trunc_ln943_reg_504 <= trunc_ln943_fu_212_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_486 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln958_reg_567 <= icmp_ln958_fu_341_p2;
        or_ln_i_i_reg_552[0] <= or_ln_i_i_fu_327_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (is_last_0_i_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_loc_read_reg_451 <= is_last_0_i_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_459 <= j_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln37_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        last_reg_464 <= last_fu_157_p2;
        p_Result_12_reg_475 <= tmp_data_V_dout[32'd15];
        tmp_V_3_reg_469 <= tmp_data_V_dout;
        tmp_V_reg_481 <= tmp_V_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_486 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        lshr_ln958_reg_577 <= grp_fu_346_p2;
        shl_ln958_reg_582 <= grp_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_486 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        m_5_reg_587 <= {{m_2_fu_372_p2[63:1]}};
        tmp_296_reg_592 <= m_2_fu_372_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_A == 1'b1)) begin
        out_data_1_payload_A <= select_ln935_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_B == 1'b1)) begin
        out_data_1_payload_B <= select_ln935_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_A == 1'b1)) begin
        out_last_V_1_payload_A <= last_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_B == 1'b1)) begin
        out_last_V_1_payload_B <= last_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_486 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        select_ln964_reg_597[0] <= select_ln964_fu_396_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_486 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln944_reg_509 <= sub_ln944_fu_216_p2;
        sub_ln947_reg_521 <= sub_ln947_fu_229_p2;
        trunc_ln944_reg_516 <= trunc_ln944_fu_221_p1;
    end
end

always @ (*) begin
    if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln37_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln37_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_loc_blk_n = is_last_0_i_loc_empty_n;
    end else begin
        is_last_0_i_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (is_last_0_i_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_last_0_i_loc_read = 1'b1;
    end else begin
        is_last_0_i_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_1_sel == 1'b1)) begin
        out_data_1_data_out = out_data_1_payload_B;
    end else begin
        out_data_1_data_out = out_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (out_last_V_1_ack_in == 1'b1))) begin
        out_data_1_vld_in = 1'b1;
    end else begin
        out_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_last_V_1_sel == 1'b1)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (out_last_V_1_ack_in == 1'b1))) begin
        out_last_V_1_vld_in = 1'b1;
    end else begin
        out_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_TDATA_blk_n = out_data_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_blk_n = tmp_data_V_empty_n;
    end else begin
        tmp_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln37_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_read = 1'b1;
    end else begin
        tmp_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (is_last_0_i_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln37_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (icmp_ln37_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (out_last_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (out_last_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_285_p2 = (icmp_ln947_fu_280_p2 & icmp_ln947_1_reg_537);

assign add_ln949_fu_303_p2 = ($signed(16'd65512) + $signed(trunc_ln944_reg_516));

assign add_ln958_fu_270_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_509));

assign add_ln964_fu_411_p2 = (sub_ln964_fu_406_p2 + select_ln964_reg_597);

assign and_ln949_fu_315_p2 = (xor_ln949_fu_297_p2 & p_Result_7_fu_308_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (is_last_0_i_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((icmp_ln37_fu_139_p2 == 1'd0) & (tmp_data_V_empty_n == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)));
end

assign bitcast_ln739_fu_439_p1 = trunc_ln738_fu_435_p1;

assign grp_fu_346_p0 = tmp_V_4_reg_491;

assign grp_fu_354_p0 = tmp_V_4_reg_491;

assign grp_fu_354_p1 = sub_ln958_reg_547;

assign icmp_ln37_fu_139_p2 = ((j3_0_i_i_reg_128 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_151_p2 = ((j3_0_i_i_reg_128 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_176_p2 = ((tmp_V_3_reg_469 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_264_p2 = ((p_Result_10_fu_259_p2 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_280_p2 = (($signed(tmp_reg_532) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_341_p2 = (($signed(lsb_index_reg_526) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign j_fu_145_p2 = (j3_0_i_i_reg_128 + 2'd1);


always @ (p_Result_13_fu_196_p3) begin
    if (p_Result_13_fu_196_p3[0] == 1'b1) begin
        l_fu_204_p3 = 32'd0;
    end else if (p_Result_13_fu_196_p3[1] == 1'b1) begin
        l_fu_204_p3 = 32'd1;
    end else if (p_Result_13_fu_196_p3[2] == 1'b1) begin
        l_fu_204_p3 = 32'd2;
    end else if (p_Result_13_fu_196_p3[3] == 1'b1) begin
        l_fu_204_p3 = 32'd3;
    end else if (p_Result_13_fu_196_p3[4] == 1'b1) begin
        l_fu_204_p3 = 32'd4;
    end else if (p_Result_13_fu_196_p3[5] == 1'b1) begin
        l_fu_204_p3 = 32'd5;
    end else if (p_Result_13_fu_196_p3[6] == 1'b1) begin
        l_fu_204_p3 = 32'd6;
    end else if (p_Result_13_fu_196_p3[7] == 1'b1) begin
        l_fu_204_p3 = 32'd7;
    end else if (p_Result_13_fu_196_p3[8] == 1'b1) begin
        l_fu_204_p3 = 32'd8;
    end else if (p_Result_13_fu_196_p3[9] == 1'b1) begin
        l_fu_204_p3 = 32'd9;
    end else if (p_Result_13_fu_196_p3[10] == 1'b1) begin
        l_fu_204_p3 = 32'd10;
    end else if (p_Result_13_fu_196_p3[11] == 1'b1) begin
        l_fu_204_p3 = 32'd11;
    end else if (p_Result_13_fu_196_p3[12] == 1'b1) begin
        l_fu_204_p3 = 32'd12;
    end else if (p_Result_13_fu_196_p3[13] == 1'b1) begin
        l_fu_204_p3 = 32'd13;
    end else if (p_Result_13_fu_196_p3[14] == 1'b1) begin
        l_fu_204_p3 = 32'd14;
    end else if (p_Result_13_fu_196_p3[15] == 1'b1) begin
        l_fu_204_p3 = 32'd15;
    end else if (p_Result_13_fu_196_p3[16] == 1'b1) begin
        l_fu_204_p3 = 32'd16;
    end else if (p_Result_13_fu_196_p3[17] == 1'b1) begin
        l_fu_204_p3 = 32'd17;
    end else if (p_Result_13_fu_196_p3[18] == 1'b1) begin
        l_fu_204_p3 = 32'd18;
    end else if (p_Result_13_fu_196_p3[19] == 1'b1) begin
        l_fu_204_p3 = 32'd19;
    end else if (p_Result_13_fu_196_p3[20] == 1'b1) begin
        l_fu_204_p3 = 32'd20;
    end else if (p_Result_13_fu_196_p3[21] == 1'b1) begin
        l_fu_204_p3 = 32'd21;
    end else if (p_Result_13_fu_196_p3[22] == 1'b1) begin
        l_fu_204_p3 = 32'd22;
    end else if (p_Result_13_fu_196_p3[23] == 1'b1) begin
        l_fu_204_p3 = 32'd23;
    end else if (p_Result_13_fu_196_p3[24] == 1'b1) begin
        l_fu_204_p3 = 32'd24;
    end else if (p_Result_13_fu_196_p3[25] == 1'b1) begin
        l_fu_204_p3 = 32'd25;
    end else if (p_Result_13_fu_196_p3[26] == 1'b1) begin
        l_fu_204_p3 = 32'd26;
    end else if (p_Result_13_fu_196_p3[27] == 1'b1) begin
        l_fu_204_p3 = 32'd27;
    end else if (p_Result_13_fu_196_p3[28] == 1'b1) begin
        l_fu_204_p3 = 32'd28;
    end else if (p_Result_13_fu_196_p3[29] == 1'b1) begin
        l_fu_204_p3 = 32'd29;
    end else if (p_Result_13_fu_196_p3[30] == 1'b1) begin
        l_fu_204_p3 = 32'd30;
    end else if (p_Result_13_fu_196_p3[31] == 1'b1) begin
        l_fu_204_p3 = 32'd31;
    end else begin
        l_fu_204_p3 = 32'd32;
    end
end

assign last_fu_157_p2 = (is_last_0_i_loc_read_reg_451 & icmp_ln38_fu_151_p2);

assign lsb_index_fu_235_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_reg_509));

assign lshr_ln947_fu_253_p2 = 16'd65535 >> zext_ln947_fu_250_p1;

assign m_1_fu_363_p3 = ((icmp_ln958_reg_567[0:0] === 1'b1) ? zext_ln958_fu_360_p1 : shl_ln958_reg_582);

assign m_2_fu_372_p2 = (zext_ln961_fu_369_p1 + m_1_fu_363_p3);

assign m_6_fu_403_p1 = m_5_reg_587;

assign or_ln949_fu_321_p2 = (and_ln949_fu_315_p2 | a_fu_285_p2);

assign or_ln_i_i_fu_327_p3 = {{31'd0}, {or_ln949_fu_321_p2}};

assign out_data_1_ack_in = out_data_1_state[1'd1];

assign out_data_1_ack_out = out_r_TREADY;

assign out_data_1_load_A = (out_data_1_state_cmp_full & ~out_data_1_sel_wr);

assign out_data_1_load_B = (out_data_1_state_cmp_full & out_data_1_sel_wr);

assign out_data_1_sel = out_data_1_sel_rd;

assign out_data_1_state_cmp_full = ((out_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_1_vld_out = out_data_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_state_cmp_full & out_last_V_1_sel_wr);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TVALID = out_last_V_1_state[1'd0];

assign p_Result_10_fu_259_p2 = (tmp_V_4_reg_491 & lshr_ln947_fu_253_p2);

assign p_Result_13_fu_196_p3 = {{16'd65535}, {p_Result_s_fu_186_p4}};

assign p_Result_14_fu_423_p5 = {{m_6_fu_403_p1[63:32]}, {tmp_518_i_i_fu_416_p3}, {m_6_fu_403_p1[22:0]}};

assign p_Result_7_fu_308_p3 = tmp_V_4_reg_491[add_ln949_fu_303_p2];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_181_p3) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            p_Result_s_fu_186_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_186_p4[ap_tvar_int_0] = tmp_V_4_fu_181_p3[15 - ap_tvar_int_0];
        end
    end
end

assign select_ln935_fu_443_p3 = ((icmp_ln935_reg_486[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_439_p1);

assign select_ln964_fu_396_p3 = ((tmp_296_reg_592[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sub_ln944_fu_216_p2 = (32'd16 - l_reg_499);

assign sub_ln947_fu_229_p2 = (5'd9 - trunc_ln947_fu_225_p1);

assign sub_ln958_fu_275_p2 = (32'd25 - sub_ln944_reg_509);

assign sub_ln964_fu_406_p2 = (8'd6 - trunc_ln943_reg_504);

assign tmp_295_fu_290_p3 = lsb_index_reg_526[32'd31];

assign tmp_518_i_i_fu_416_p3 = {{p_Result_12_reg_475}, {add_ln964_fu_411_p2}};

assign tmp_V_4_fu_181_p3 = ((p_Result_12_reg_475[0:0] === 1'b1) ? tmp_V_reg_481 : tmp_V_3_reg_469);

assign tmp_V_fu_170_p2 = (16'd0 - tmp_data_V_dout);

assign trunc_ln738_fu_435_p1 = p_Result_14_fu_423_p5[31:0];

assign trunc_ln943_fu_212_p1 = l_fu_204_p3[7:0];

assign trunc_ln944_fu_221_p1 = sub_ln944_fu_216_p2[15:0];

assign trunc_ln947_fu_225_p1 = sub_ln944_fu_216_p2[4:0];

assign xor_ln949_fu_297_p2 = (tmp_295_fu_290_p3 ^ 1'd1);

assign zext_ln947_fu_250_p1 = sub_ln947_reg_521;

assign zext_ln958_fu_360_p1 = lshr_ln958_reg_577;

assign zext_ln961_fu_369_p1 = or_ln_i_i_reg_552;

always @ (posedge ap_clk) begin
    or_ln_i_i_reg_552[31:1] <= 31'b0000000000000000000000000000000;
    select_ln964_reg_597[7:1] <= 7'b0111111;
end

endmodule //Loop_2_proc
