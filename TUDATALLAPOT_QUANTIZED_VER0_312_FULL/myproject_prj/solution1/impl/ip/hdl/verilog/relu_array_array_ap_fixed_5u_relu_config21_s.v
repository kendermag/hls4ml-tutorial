// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_fixed_5u_relu_config21_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [13:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [13:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [13:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [13:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [13:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [5:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output   start_out;
output   start_write;

reg ap_done;
reg ap_idle;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    internal_ap_ready;
wire    io_acc_block_signal_op4;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    io_acc_block_signal_op133;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    data_V_data_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg   [13:0] tmp_data_V_40_0_reg_853;
reg   [13:0] tmp_data_V_40_1_reg_859;
reg   [13:0] tmp_data_V_40_2_reg_865;
reg   [13:0] tmp_data_V_40_3_reg_871;
reg   [13:0] tmp_data_V_40_4_reg_877;
reg   [5:0] trunc_ln_reg_883;
reg   [0:0] tmp_38_reg_888;
reg   [4:0] trunc_ln415_s_reg_894;
wire   [0:0] icmp_ln879_fu_171_p2;
reg   [0:0] icmp_ln879_reg_899;
wire   [0:0] icmp_ln768_fu_177_p2;
reg   [0:0] icmp_ln768_reg_904;
reg   [5:0] trunc_ln708_s_reg_909;
reg   [0:0] tmp_42_reg_914;
reg   [4:0] trunc_ln415_6_reg_920;
wire   [0:0] icmp_ln879_8_fu_221_p2;
reg   [0:0] icmp_ln879_8_reg_925;
wire   [0:0] icmp_ln768_8_fu_227_p2;
reg   [0:0] icmp_ln768_8_reg_930;
reg   [5:0] trunc_ln708_17_reg_935;
reg   [0:0] tmp_46_reg_940;
reg   [4:0] trunc_ln415_7_reg_946;
wire   [0:0] icmp_ln879_9_fu_271_p2;
reg   [0:0] icmp_ln879_9_reg_951;
wire   [0:0] icmp_ln768_9_fu_277_p2;
reg   [0:0] icmp_ln768_9_reg_956;
reg   [5:0] trunc_ln708_18_reg_961;
reg   [0:0] tmp_50_reg_966;
reg   [4:0] trunc_ln415_8_reg_972;
wire   [0:0] icmp_ln879_10_fu_321_p2;
reg   [0:0] icmp_ln879_10_reg_977;
wire   [0:0] icmp_ln768_10_fu_327_p2;
reg   [0:0] icmp_ln768_10_reg_982;
reg   [5:0] trunc_ln708_19_reg_987;
reg   [0:0] tmp_54_reg_992;
reg   [4:0] trunc_ln415_9_reg_998;
wire   [0:0] icmp_ln879_11_fu_371_p2;
reg   [0:0] icmp_ln879_11_reg_1003;
wire   [0:0] icmp_ln768_11_fu_377_p2;
reg   [0:0] icmp_ln768_11_reg_1008;
wire   [4:0] tmp_data_0_V_fu_793_p3;
reg   [4:0] tmp_data_0_V_reg_1013;
wire   [4:0] tmp_data_1_V_fu_801_p3;
reg   [4:0] tmp_data_1_V_reg_1018;
wire   [4:0] tmp_data_2_V_fu_809_p3;
reg   [4:0] tmp_data_2_V_reg_1023;
wire   [4:0] tmp_data_3_V_fu_817_p3;
reg   [4:0] tmp_data_3_V_reg_1028;
wire   [4:0] tmp_data_4_V_fu_825_p3;
reg   [4:0] tmp_data_4_V_reg_1033;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] p_Result_s_fu_161_p4;
wire   [4:0] p_Result_11_1_fu_211_p4;
wire   [4:0] p_Result_11_2_fu_261_p4;
wire   [4:0] p_Result_11_3_fu_311_p4;
wire   [4:0] p_Result_11_4_fu_361_p4;
wire   [5:0] zext_ln415_fu_395_p1;
wire   [4:0] zext_ln415_16_fu_398_p1;
wire   [5:0] add_ln415_fu_401_p2;
wire   [0:0] tmp_39_fu_411_p3;
wire   [0:0] tmp_37_fu_388_p3;
wire   [0:0] xor_ln416_fu_419_p2;
wire   [0:0] and_ln416_fu_425_p2;
wire   [0:0] select_ln777_fu_439_p3;
wire   [0:0] tmp_40_fu_431_p3;
wire   [0:0] xor_ln785_fu_445_p2;
wire   [0:0] or_ln340_fu_451_p2;
wire   [4:0] add_ln416_fu_406_p2;
wire   [5:0] zext_ln415_8_fu_477_p1;
wire   [4:0] zext_ln415_17_fu_480_p1;
wire   [5:0] add_ln415_8_fu_483_p2;
wire   [0:0] tmp_43_fu_493_p3;
wire   [0:0] tmp_41_fu_470_p3;
wire   [0:0] xor_ln416_8_fu_501_p2;
wire   [0:0] and_ln416_8_fu_507_p2;
wire   [0:0] select_ln777_8_fu_521_p3;
wire   [0:0] tmp_44_fu_513_p3;
wire   [0:0] xor_ln785_1_fu_527_p2;
wire   [0:0] or_ln340_1_fu_533_p2;
wire   [4:0] add_ln416_8_fu_488_p2;
wire   [5:0] zext_ln415_9_fu_559_p1;
wire   [4:0] zext_ln415_18_fu_562_p1;
wire   [5:0] add_ln415_9_fu_565_p2;
wire   [0:0] tmp_47_fu_575_p3;
wire   [0:0] tmp_45_fu_552_p3;
wire   [0:0] xor_ln416_9_fu_583_p2;
wire   [0:0] and_ln416_9_fu_589_p2;
wire   [0:0] select_ln777_9_fu_603_p3;
wire   [0:0] tmp_48_fu_595_p3;
wire   [0:0] xor_ln785_2_fu_609_p2;
wire   [0:0] or_ln340_2_fu_615_p2;
wire   [4:0] add_ln416_9_fu_570_p2;
wire   [5:0] zext_ln415_10_fu_641_p1;
wire   [4:0] zext_ln415_19_fu_644_p1;
wire   [5:0] add_ln415_10_fu_647_p2;
wire   [0:0] tmp_51_fu_657_p3;
wire   [0:0] tmp_49_fu_634_p3;
wire   [0:0] xor_ln416_10_fu_665_p2;
wire   [0:0] and_ln416_10_fu_671_p2;
wire   [0:0] select_ln777_10_fu_685_p3;
wire   [0:0] tmp_52_fu_677_p3;
wire   [0:0] xor_ln785_3_fu_691_p2;
wire   [0:0] or_ln340_3_fu_697_p2;
wire   [4:0] add_ln416_10_fu_652_p2;
wire   [5:0] zext_ln415_11_fu_723_p1;
wire   [4:0] zext_ln415_20_fu_726_p1;
wire   [5:0] add_ln415_11_fu_729_p2;
wire   [0:0] tmp_55_fu_739_p3;
wire   [0:0] tmp_53_fu_716_p3;
wire   [0:0] xor_ln416_11_fu_747_p2;
wire   [0:0] and_ln416_11_fu_753_p2;
wire   [0:0] select_ln777_11_fu_767_p3;
wire   [0:0] tmp_56_fu_759_p3;
wire   [0:0] xor_ln785_4_fu_773_p2;
wire   [0:0] or_ln340_4_fu_779_p2;
wire   [4:0] add_ln416_11_fu_734_p2;
wire   [0:0] icmp_ln1494_fu_383_p2;
wire   [4:0] select_ln340_fu_457_p3;
wire   [0:0] icmp_ln1494_1_fu_465_p2;
wire   [4:0] select_ln340_1_fu_539_p3;
wire   [0:0] icmp_ln1494_2_fu_547_p2;
wire   [4:0] select_ln340_2_fu_621_p3;
wire   [0:0] icmp_ln1494_3_fu_629_p2;
wire   [4:0] select_ln340_3_fu_703_p3;
wire   [0:0] icmp_ln1494_4_fu_711_p2;
wire   [4:0] select_ln340_4_fu_785_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln768_10_reg_982 <= icmp_ln768_10_fu_327_p2;
        icmp_ln768_11_reg_1008 <= icmp_ln768_11_fu_377_p2;
        icmp_ln768_8_reg_930 <= icmp_ln768_8_fu_227_p2;
        icmp_ln768_9_reg_956 <= icmp_ln768_9_fu_277_p2;
        icmp_ln768_reg_904 <= icmp_ln768_fu_177_p2;
        icmp_ln879_10_reg_977 <= icmp_ln879_10_fu_321_p2;
        icmp_ln879_11_reg_1003 <= icmp_ln879_11_fu_371_p2;
        icmp_ln879_8_reg_925 <= icmp_ln879_8_fu_221_p2;
        icmp_ln879_9_reg_951 <= icmp_ln879_9_fu_271_p2;
        icmp_ln879_reg_899 <= icmp_ln879_fu_171_p2;
        tmp_38_reg_888 <= data_V_data_0_V_dout[32'd2];
        tmp_42_reg_914 <= data_V_data_1_V_dout[32'd2];
        tmp_46_reg_940 <= data_V_data_2_V_dout[32'd2];
        tmp_50_reg_966 <= data_V_data_3_V_dout[32'd2];
        tmp_54_reg_992 <= data_V_data_4_V_dout[32'd2];
        tmp_data_0_V_reg_1013 <= tmp_data_0_V_fu_793_p3;
        tmp_data_1_V_reg_1018 <= tmp_data_1_V_fu_801_p3;
        tmp_data_2_V_reg_1023 <= tmp_data_2_V_fu_809_p3;
        tmp_data_3_V_reg_1028 <= tmp_data_3_V_fu_817_p3;
        tmp_data_4_V_reg_1033 <= tmp_data_4_V_fu_825_p3;
        tmp_data_V_40_0_reg_853 <= data_V_data_0_V_dout;
        tmp_data_V_40_1_reg_859 <= data_V_data_1_V_dout;
        tmp_data_V_40_2_reg_865 <= data_V_data_2_V_dout;
        tmp_data_V_40_3_reg_871 <= data_V_data_3_V_dout;
        tmp_data_V_40_4_reg_877 <= data_V_data_4_V_dout;
        trunc_ln415_6_reg_920 <= {{data_V_data_1_V_dout[7:3]}};
        trunc_ln415_7_reg_946 <= {{data_V_data_2_V_dout[7:3]}};
        trunc_ln415_8_reg_972 <= {{data_V_data_3_V_dout[7:3]}};
        trunc_ln415_9_reg_998 <= {{data_V_data_4_V_dout[7:3]}};
        trunc_ln415_s_reg_894 <= {{data_V_data_0_V_dout[7:3]}};
        trunc_ln708_17_reg_935 <= {{data_V_data_2_V_dout[8:3]}};
        trunc_ln708_18_reg_961 <= {{data_V_data_3_V_dout[8:3]}};
        trunc_ln708_19_reg_987 <= {{data_V_data_4_V_dout[8:3]}};
        trunc_ln708_s_reg_909 <= {{data_V_data_1_V_dout[8:3]}};
        trunc_ln_reg_883 <= {{data_V_data_0_V_dout[8:3]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_10_fu_647_p2 = (trunc_ln708_18_reg_961 + zext_ln415_10_fu_641_p1);

assign add_ln415_11_fu_729_p2 = (trunc_ln708_19_reg_987 + zext_ln415_11_fu_723_p1);

assign add_ln415_8_fu_483_p2 = (trunc_ln708_s_reg_909 + zext_ln415_8_fu_477_p1);

assign add_ln415_9_fu_565_p2 = (trunc_ln708_17_reg_935 + zext_ln415_9_fu_559_p1);

assign add_ln415_fu_401_p2 = (trunc_ln_reg_883 + zext_ln415_fu_395_p1);

assign add_ln416_10_fu_652_p2 = (trunc_ln415_8_reg_972 + zext_ln415_19_fu_644_p1);

assign add_ln416_11_fu_734_p2 = (trunc_ln415_9_reg_998 + zext_ln415_20_fu_726_p1);

assign add_ln416_8_fu_488_p2 = (trunc_ln415_6_reg_920 + zext_ln415_17_fu_480_p1);

assign add_ln416_9_fu_570_p2 = (trunc_ln415_7_reg_946 + zext_ln415_18_fu_562_p1);

assign add_ln416_fu_406_p2 = (trunc_ln415_s_reg_894 + zext_ln415_16_fu_398_p1);

assign and_ln416_10_fu_671_p2 = (xor_ln416_10_fu_665_p2 & tmp_49_fu_634_p3);

assign and_ln416_11_fu_753_p2 = (xor_ln416_11_fu_747_p2 & tmp_53_fu_716_p3);

assign and_ln416_8_fu_507_p2 = (xor_ln416_8_fu_501_p2 & tmp_41_fu_470_p3);

assign and_ln416_9_fu_589_p2 = (xor_ln416_9_fu_583_p2 & tmp_45_fu_552_p3);

assign and_ln416_fu_425_p2 = (xor_ln416_fu_419_p2 & tmp_37_fu_388_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((io_acc_block_signal_op133 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((io_acc_block_signal_op133 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((io_acc_block_signal_op133 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((real_start == 1'b1) & ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (io_acc_block_signal_op133 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_ready = internal_ap_ready;

assign icmp_ln1494_1_fu_465_p2 = (($signed(tmp_data_V_40_1_reg_859) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_547_p2 = (($signed(tmp_data_V_40_2_reg_865) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_629_p2 = (($signed(tmp_data_V_40_3_reg_871) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_711_p2 = (($signed(tmp_data_V_40_4_reg_877) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_383_p2 = (($signed(tmp_data_V_40_0_reg_853) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln768_10_fu_327_p2 = ((p_Result_11_3_fu_311_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_11_fu_377_p2 = ((p_Result_11_4_fu_361_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_8_fu_227_p2 = ((p_Result_11_1_fu_211_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_9_fu_277_p2 = ((p_Result_11_2_fu_261_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_177_p2 = ((p_Result_s_fu_161_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_10_fu_321_p2 = ((p_Result_11_3_fu_311_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_11_fu_371_p2 = ((p_Result_11_4_fu_361_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_221_p2 = ((p_Result_11_1_fu_211_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_271_p2 = ((p_Result_11_2_fu_261_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_171_p2 = ((p_Result_s_fu_161_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op133 = (res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op4 = (data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_1_fu_533_p2 = (xor_ln785_1_fu_527_p2 | tmp_44_fu_513_p3);

assign or_ln340_2_fu_615_p2 = (xor_ln785_2_fu_609_p2 | tmp_48_fu_595_p3);

assign or_ln340_3_fu_697_p2 = (xor_ln785_3_fu_691_p2 | tmp_52_fu_677_p3);

assign or_ln340_4_fu_779_p2 = (xor_ln785_4_fu_773_p2 | tmp_56_fu_759_p3);

assign or_ln340_fu_451_p2 = (xor_ln785_fu_445_p2 | tmp_40_fu_431_p3);

assign p_Result_11_1_fu_211_p4 = {{data_V_data_1_V_dout[13:9]}};

assign p_Result_11_2_fu_261_p4 = {{data_V_data_2_V_dout[13:9]}};

assign p_Result_11_3_fu_311_p4 = {{data_V_data_3_V_dout[13:9]}};

assign p_Result_11_4_fu_361_p4 = {{data_V_data_4_V_dout[13:9]}};

assign p_Result_s_fu_161_p4 = {{data_V_data_0_V_dout[13:9]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_1013;

assign res_V_data_1_V_din = tmp_data_1_V_reg_1018;

assign res_V_data_2_V_din = tmp_data_2_V_reg_1023;

assign res_V_data_3_V_din = tmp_data_3_V_reg_1028;

assign res_V_data_4_V_din = tmp_data_4_V_reg_1033;

assign select_ln340_1_fu_539_p3 = ((or_ln340_1_fu_533_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_8_fu_488_p2);

assign select_ln340_2_fu_621_p3 = ((or_ln340_2_fu_615_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_9_fu_570_p2);

assign select_ln340_3_fu_703_p3 = ((or_ln340_3_fu_697_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_10_fu_652_p2);

assign select_ln340_4_fu_785_p3 = ((or_ln340_4_fu_779_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_11_fu_734_p2);

assign select_ln340_fu_457_p3 = ((or_ln340_fu_451_p2[0:0] === 1'b1) ? 5'd31 : add_ln416_fu_406_p2);

assign select_ln777_10_fu_685_p3 = ((and_ln416_10_fu_671_p2[0:0] === 1'b1) ? icmp_ln879_10_reg_977 : icmp_ln768_10_reg_982);

assign select_ln777_11_fu_767_p3 = ((and_ln416_11_fu_753_p2[0:0] === 1'b1) ? icmp_ln879_11_reg_1003 : icmp_ln768_11_reg_1008);

assign select_ln777_8_fu_521_p3 = ((and_ln416_8_fu_507_p2[0:0] === 1'b1) ? icmp_ln879_8_reg_925 : icmp_ln768_8_reg_930);

assign select_ln777_9_fu_603_p3 = ((and_ln416_9_fu_589_p2[0:0] === 1'b1) ? icmp_ln879_9_reg_951 : icmp_ln768_9_reg_956);

assign select_ln777_fu_439_p3 = ((and_ln416_fu_425_p2[0:0] === 1'b1) ? icmp_ln879_reg_899 : icmp_ln768_reg_904);

assign start_out = real_start;

assign tmp_37_fu_388_p3 = tmp_data_V_40_0_reg_853[32'd8];

assign tmp_39_fu_411_p3 = add_ln415_fu_401_p2[32'd5];

assign tmp_40_fu_431_p3 = add_ln415_fu_401_p2[32'd5];

assign tmp_41_fu_470_p3 = tmp_data_V_40_1_reg_859[32'd8];

assign tmp_43_fu_493_p3 = add_ln415_8_fu_483_p2[32'd5];

assign tmp_44_fu_513_p3 = add_ln415_8_fu_483_p2[32'd5];

assign tmp_45_fu_552_p3 = tmp_data_V_40_2_reg_865[32'd8];

assign tmp_47_fu_575_p3 = add_ln415_9_fu_565_p2[32'd5];

assign tmp_48_fu_595_p3 = add_ln415_9_fu_565_p2[32'd5];

assign tmp_49_fu_634_p3 = tmp_data_V_40_3_reg_871[32'd8];

assign tmp_51_fu_657_p3 = add_ln415_10_fu_647_p2[32'd5];

assign tmp_52_fu_677_p3 = add_ln415_10_fu_647_p2[32'd5];

assign tmp_53_fu_716_p3 = tmp_data_V_40_4_reg_877[32'd8];

assign tmp_55_fu_739_p3 = add_ln415_11_fu_729_p2[32'd5];

assign tmp_56_fu_759_p3 = add_ln415_11_fu_729_p2[32'd5];

assign tmp_data_0_V_fu_793_p3 = ((icmp_ln1494_fu_383_p2[0:0] === 1'b1) ? select_ln340_fu_457_p3 : 5'd0);

assign tmp_data_1_V_fu_801_p3 = ((icmp_ln1494_1_fu_465_p2[0:0] === 1'b1) ? select_ln340_1_fu_539_p3 : 5'd0);

assign tmp_data_2_V_fu_809_p3 = ((icmp_ln1494_2_fu_547_p2[0:0] === 1'b1) ? select_ln340_2_fu_621_p3 : 5'd0);

assign tmp_data_3_V_fu_817_p3 = ((icmp_ln1494_3_fu_629_p2[0:0] === 1'b1) ? select_ln340_3_fu_703_p3 : 5'd0);

assign tmp_data_4_V_fu_825_p3 = ((icmp_ln1494_4_fu_711_p2[0:0] === 1'b1) ? select_ln340_4_fu_785_p3 : 5'd0);

assign xor_ln416_10_fu_665_p2 = (tmp_51_fu_657_p3 ^ 1'd1);

assign xor_ln416_11_fu_747_p2 = (tmp_55_fu_739_p3 ^ 1'd1);

assign xor_ln416_8_fu_501_p2 = (tmp_43_fu_493_p3 ^ 1'd1);

assign xor_ln416_9_fu_583_p2 = (tmp_47_fu_575_p3 ^ 1'd1);

assign xor_ln416_fu_419_p2 = (tmp_39_fu_411_p3 ^ 1'd1);

assign xor_ln785_1_fu_527_p2 = (select_ln777_8_fu_521_p3 ^ 1'd1);

assign xor_ln785_2_fu_609_p2 = (select_ln777_9_fu_603_p3 ^ 1'd1);

assign xor_ln785_3_fu_691_p2 = (select_ln777_10_fu_685_p3 ^ 1'd1);

assign xor_ln785_4_fu_773_p2 = (select_ln777_11_fu_767_p3 ^ 1'd1);

assign xor_ln785_fu_445_p2 = (select_ln777_fu_439_p3 ^ 1'd1);

assign zext_ln415_10_fu_641_p1 = tmp_50_reg_966;

assign zext_ln415_11_fu_723_p1 = tmp_54_reg_992;

assign zext_ln415_16_fu_398_p1 = tmp_38_reg_888;

assign zext_ln415_17_fu_480_p1 = tmp_42_reg_914;

assign zext_ln415_18_fu_562_p1 = tmp_46_reg_940;

assign zext_ln415_19_fu_644_p1 = tmp_50_reg_966;

assign zext_ln415_20_fu_726_p1 = tmp_54_reg_992;

assign zext_ln415_8_fu_477_p1 = tmp_42_reg_914;

assign zext_ln415_9_fu_559_p1 = tmp_46_reg_940;

assign zext_ln415_fu_395_p1 = tmp_38_reg_888;

endmodule //relu_array_array_ap_fixed_5u_relu_config21_s
