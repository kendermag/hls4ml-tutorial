-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_array_array_ap_fixed_16_6_5_3_0_3u_config26_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_stream_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_0_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_0_V_read : OUT STD_LOGIC;
    data_stream_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_1_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_1_V_read : OUT STD_LOGIC;
    data_stream_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_2_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_2_V_read : OUT STD_LOGIC;
    data_stream_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_3_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_3_V_read : OUT STD_LOGIC;
    data_stream_V_data_4_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_4_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_4_V_read : OUT STD_LOGIC;
    data_stream_V_data_5_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_5_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_5_V_read : OUT STD_LOGIC;
    data_stream_V_data_6_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_6_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_6_V_read : OUT STD_LOGIC;
    data_stream_V_data_7_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_7_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_7_V_read : OUT STD_LOGIC;
    data_stream_V_data_8_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_8_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_8_V_read : OUT STD_LOGIC;
    data_stream_V_data_9_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_9_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_9_V_read : OUT STD_LOGIC;
    data_stream_V_data_10_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_10_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_10_V_read : OUT STD_LOGIC;
    data_stream_V_data_11_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_11_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_11_V_read : OUT STD_LOGIC;
    data_stream_V_data_12_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_12_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_12_V_read : OUT STD_LOGIC;
    data_stream_V_data_13_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_13_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_13_V_read : OUT STD_LOGIC;
    data_stream_V_data_14_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_14_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_14_V_read : OUT STD_LOGIC;
    data_stream_V_data_15_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_stream_V_data_15_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_15_V_read : OUT STD_LOGIC;
    res_stream_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_0_V_full_n : IN STD_LOGIC;
    res_stream_V_data_0_V_write : OUT STD_LOGIC;
    res_stream_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_1_V_full_n : IN STD_LOGIC;
    res_stream_V_data_1_V_write : OUT STD_LOGIC;
    res_stream_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_2_V_full_n : IN STD_LOGIC;
    res_stream_V_data_2_V_write : OUT STD_LOGIC );
end;


architecture behav of dense_array_array_ap_fixed_16_6_5_3_0_3u_config26_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_3_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_4_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_5_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_6_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_7_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_8_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_9_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_10_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_11_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_12_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_13_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_14_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_15_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal res_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal data_0_V_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal io_acc_block_signal_op3 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal data_1_V_reg_235 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_2_V_reg_240 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_3_V_reg_245 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_4_V_reg_250 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_5_V_reg_255 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_6_V_reg_260 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_7_V_reg_265 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_8_V_reg_270 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_9_V_reg_275 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_10_V_reg_280 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_11_V_reg_285 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_12_V_reg_290 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_13_V_reg_295 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_14_V_reg_300 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_15_V_reg_305 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_idle : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_ready : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call37 : BOOLEAN;
    signal io_acc_block_signal_op46 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113 : component dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start,
        ap_done => grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done,
        ap_idle => grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_idle,
        ap_ready => grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_ready,
        data_0_V_read => data_0_V_reg_230,
        data_1_V_read => data_1_V_reg_235,
        data_2_V_read => data_2_V_reg_240,
        data_3_V_read => data_3_V_reg_245,
        data_4_V_read => data_4_V_reg_250,
        data_5_V_read => data_5_V_reg_255,
        data_6_V_read => data_6_V_reg_260,
        data_7_V_read => data_7_V_reg_265,
        data_8_V_read => data_8_V_reg_270,
        data_9_V_read => data_9_V_reg_275,
        data_10_V_read => data_10_V_reg_280,
        data_11_V_read => data_11_V_reg_285,
        data_12_V_read => data_12_V_reg_290,
        data_13_V_read => data_13_V_reg_295,
        data_14_V_read => data_14_V_reg_300,
        data_15_V_read => data_15_V_reg_305,
        ap_return_0 => grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_0,
        ap_return_1 => grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_1,
        ap_return_2 => grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((io_acc_block_signal_op46 = ap_const_logic_0) or (grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_ready = ap_const_logic_1)) then 
                    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_0_V_reg_230 <= data_stream_V_data_0_V_dout;
                data_10_V_reg_280 <= data_stream_V_data_10_V_dout;
                data_11_V_reg_285 <= data_stream_V_data_11_V_dout;
                data_12_V_reg_290 <= data_stream_V_data_12_V_dout;
                data_13_V_reg_295 <= data_stream_V_data_13_V_dout;
                data_14_V_reg_300 <= data_stream_V_data_14_V_dout;
                data_15_V_reg_305 <= data_stream_V_data_15_V_dout;
                data_1_V_reg_235 <= data_stream_V_data_1_V_dout;
                data_2_V_reg_240 <= data_stream_V_data_2_V_dout;
                data_3_V_reg_245 <= data_stream_V_data_3_V_dout;
                data_4_V_reg_250 <= data_stream_V_data_4_V_dout;
                data_5_V_reg_255 <= data_stream_V_data_5_V_dout;
                data_6_V_reg_260 <= data_stream_V_data_6_V_dout;
                data_7_V_reg_265 <= data_stream_V_data_7_V_dout;
                data_8_V_reg_270 <= data_stream_V_data_8_V_dout;
                data_9_V_reg_275 <= data_stream_V_data_9_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, io_acc_block_signal_op3, grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done, io_acc_block_signal_op46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((io_acc_block_signal_op46 = ap_const_logic_0) or (grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, io_acc_block_signal_op3)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call37_assign_proc : process(real_start, ap_done_reg, io_acc_block_signal_op3)
    begin
                ap_block_state1_ignore_call37 <= ((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done, io_acc_block_signal_op46)
    begin
        if ((not(((io_acc_block_signal_op46 = ap_const_logic_0) or (grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_stream_V_data_0_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_0_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_0_V_blk_n <= data_stream_V_data_0_V_empty_n;
        else 
            data_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_0_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_10_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_10_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_10_V_blk_n <= data_stream_V_data_10_V_empty_n;
        else 
            data_stream_V_data_10_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_10_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_10_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_10_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_11_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_11_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_11_V_blk_n <= data_stream_V_data_11_V_empty_n;
        else 
            data_stream_V_data_11_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_11_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_11_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_11_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_12_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_12_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_12_V_blk_n <= data_stream_V_data_12_V_empty_n;
        else 
            data_stream_V_data_12_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_12_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_12_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_12_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_13_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_13_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_13_V_blk_n <= data_stream_V_data_13_V_empty_n;
        else 
            data_stream_V_data_13_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_13_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_13_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_13_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_14_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_14_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_14_V_blk_n <= data_stream_V_data_14_V_empty_n;
        else 
            data_stream_V_data_14_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_14_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_14_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_14_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_15_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_15_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_15_V_blk_n <= data_stream_V_data_15_V_empty_n;
        else 
            data_stream_V_data_15_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_15_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_15_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_15_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_1_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_1_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_1_V_blk_n <= data_stream_V_data_1_V_empty_n;
        else 
            data_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_1_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_2_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_2_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_2_V_blk_n <= data_stream_V_data_2_V_empty_n;
        else 
            data_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_2_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_3_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_3_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_3_V_blk_n <= data_stream_V_data_3_V_empty_n;
        else 
            data_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_3_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_4_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_4_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_4_V_blk_n <= data_stream_V_data_4_V_empty_n;
        else 
            data_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_4_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_5_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_5_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_5_V_blk_n <= data_stream_V_data_5_V_empty_n;
        else 
            data_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_5_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_6_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_6_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_6_V_blk_n <= data_stream_V_data_6_V_empty_n;
        else 
            data_stream_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_6_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_7_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_7_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_7_V_blk_n <= data_stream_V_data_7_V_empty_n;
        else 
            data_stream_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_7_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_8_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_8_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_8_V_blk_n <= data_stream_V_data_8_V_empty_n;
        else 
            data_stream_V_data_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_8_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_8_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_9_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, data_stream_V_data_9_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_9_V_blk_n <= data_stream_V_data_9_V_empty_n;
        else 
            data_stream_V_data_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_stream_V_data_9_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, io_acc_block_signal_op3)
    begin
        if ((not(((real_start = ap_const_logic_0) or (io_acc_block_signal_op3 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_stream_V_data_9_V_read <= ap_const_logic_1;
        else 
            data_stream_V_data_9_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_start_reg;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done, io_acc_block_signal_op46)
    begin
        if ((not(((io_acc_block_signal_op46 = ap_const_logic_0) or (grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op3 <= (data_stream_V_data_9_V_empty_n and data_stream_V_data_8_V_empty_n and data_stream_V_data_7_V_empty_n and data_stream_V_data_6_V_empty_n and data_stream_V_data_5_V_empty_n and data_stream_V_data_4_V_empty_n and data_stream_V_data_3_V_empty_n and data_stream_V_data_2_V_empty_n and data_stream_V_data_1_V_empty_n and data_stream_V_data_15_V_empty_n and data_stream_V_data_14_V_empty_n and data_stream_V_data_13_V_empty_n and data_stream_V_data_12_V_empty_n and data_stream_V_data_11_V_empty_n and data_stream_V_data_10_V_empty_n and data_stream_V_data_0_V_empty_n);
    io_acc_block_signal_op46 <= (res_stream_V_data_2_V_full_n and res_stream_V_data_1_V_full_n and res_stream_V_data_0_V_full_n);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_stream_V_data_0_V_blk_n_assign_proc : process(res_stream_V_data_0_V_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_stream_V_data_0_V_blk_n <= res_stream_V_data_0_V_full_n;
        else 
            res_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_0_V_din <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_0;

    res_stream_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state2, grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done, io_acc_block_signal_op46)
    begin
        if ((not(((io_acc_block_signal_op46 = ap_const_logic_0) or (grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            res_stream_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_1_V_blk_n_assign_proc : process(res_stream_V_data_1_V_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_stream_V_data_1_V_blk_n <= res_stream_V_data_1_V_full_n;
        else 
            res_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_1_V_din <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_1;

    res_stream_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state2, grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done, io_acc_block_signal_op46)
    begin
        if ((not(((io_acc_block_signal_op46 = ap_const_logic_0) or (grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            res_stream_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_2_V_blk_n_assign_proc : process(res_stream_V_data_2_V_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_stream_V_data_2_V_blk_n <= res_stream_V_data_2_V_full_n;
        else 
            res_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_2_V_din <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_return_2;

    res_stream_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state2, grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done, io_acc_block_signal_op46)
    begin
        if ((not(((io_acc_block_signal_op46 = ap_const_logic_0) or (grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config26_s_fu_113_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            res_stream_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
