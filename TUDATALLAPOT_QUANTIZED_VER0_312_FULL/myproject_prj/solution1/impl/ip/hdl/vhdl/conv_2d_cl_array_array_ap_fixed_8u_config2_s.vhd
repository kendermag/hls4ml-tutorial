-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_array_array_ap_fixed_8u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_empty_n : IN STD_LOGIC;
    data_V_data_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_array_array_ap_fixed_8u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_10 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_const_lv14_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_const_lv14_3FE0 : STD_LOGIC_VECTOR (13 downto 0) := "11111111100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_201 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000001";
    constant ap_const_lv14_2423 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal outidx9_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal outidx9_ce0 : STD_LOGIC;
    signal outidx9_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_data_V_1_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal w2_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal pX_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal and_ln271_2_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_6_V_blk_n : STD_LOGIC;
    signal res_V_data_7_V_blk_n : STD_LOGIC;
    signal in_index_0_i_i_i_i35_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_index34_reg_246 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_data_0_V_3933_reg_257 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_1_V_3231_reg_268 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_2_V_3229_reg_279 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_3_V_2927_reg_290 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_4_V_2925_reg_301 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_5_V_2623_reg_312 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_6_V_2621_reg_323 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_7_V_2619_reg_334 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_0_V_reg_1085 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_5_load_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln271_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_reg_1095 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_5_load_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln271_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_1_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_5_load_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_5_load_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln271_2_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln78_fu_569_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln78_reg_1126 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_index_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_index_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln168_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln168_reg_1146 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_fu_593_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_index_reg_1151 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln151_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_1156_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_1156_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_1156_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_1156_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_reg_1160_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_reg_1160_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_reg_1160_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_1181 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_2_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_2_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_4_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_4_reg_1191 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_6_fu_741_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_6_reg_1196 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln160_2_fu_749_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln160_2_reg_1201 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_119_reg_1206 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_120_reg_1211 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_121_reg_1216 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln168_fu_783_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal sext_ln1116_fu_810_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1061_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_reg_1254 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1067_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_146_reg_1259 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1073_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_147_reg_1264 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1079_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_148_reg_1269 : STD_LOGIC_VECTOR (21 downto 0);
    signal acc_1_V_fu_848_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_1_V_reg_1274 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal acc_1_V_3_fu_855_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_1_V_3_reg_1280 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_3_V_fu_884_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_3_V_reg_1286 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_3_V_3_fu_891_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_3_V_3_reg_1292 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_5_V_fu_920_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_5_V_reg_1298 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_5_V_3_fu_927_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_5_V_3_reg_1304 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_7_V_fu_956_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_7_V_reg_1310 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_7_V_3_fu_963_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_7_V_3_reg_1316 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln292_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_1322 : STD_LOGIC_VECTOR (0 downto 0);
    signal io_acc_block_signal_op172 : STD_LOGIC;
    signal ap_block_state10 : BOOLEAN;
    signal select_ln307_fu_991_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln307_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln296_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln296_reg_1331 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_fu_1031_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln302_reg_1335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_start : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_done : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_idle : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_ready : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten36_reg_222 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln78_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_in_index_0_i_i_i_i35_phi_fu_238_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_index34_phi_fu_250_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_storemerge_i_i_phi_fu_349_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_i_i_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln155_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln305_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln300_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_515_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_249_fu_535_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln271_2_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_3_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln271_1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln271_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln160_fu_605_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_7_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_6_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_5_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_4_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_3_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_669_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_1_fu_683_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_2_fu_697_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_3_fu_711_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_4_fu_719_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_5_fu_733_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_3_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_5_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_6_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_7_fu_803_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_826_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln1265_fu_835_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_0_V_fu_842_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln708_s_fu_862_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln1265_1_fu_871_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_2_V_fu_878_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln708_181_fu_898_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln1265_2_fu_907_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_4_V_fu_914_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln708_182_fu_934_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln1265_3_fu_943_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal acc_6_V_fu_950_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln307_fu_986_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln302_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1061_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1067_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1073_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1079_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_285 : BOOLEAN;
    signal ap_condition_294 : BOOLEAN;

    component shift_line_buffer_array_ap_fixed_1u_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        kernel_window_8_V_write : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_mul_mul_6s_16s_22_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component conv_2d_cl_array_array_ap_fixed_8u_config2_s_outidx9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    outidx9_U : component conv_2d_cl_array_array_ap_fixed_8u_config2_s_outidx9
    generic map (
        DataWidth => 1,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outidx9_address0,
        ce0 => outidx9_ce0,
        q0 => outidx9_q0);

    w2_V_U : component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V
    generic map (
        DataWidth => 24,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356 : component shift_line_buffer_array_ap_fixed_1u_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_start,
        ap_done => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_done,
        ap_idle => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_idle,
        ap_ready => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_ready,
        kernel_window_8_V_write => tmp_data_0_V_reg_1085,
        kernel_window_1_V_read => kernel_data_V_1_1,
        kernel_window_2_V_read => kernel_data_V_1_2,
        kernel_window_4_V_read => kernel_data_V_1_4,
        kernel_window_5_V_read => kernel_data_V_1_5,
        kernel_window_7_V_read => kernel_data_V_1_7,
        kernel_window_8_V_read => kernel_data_V_1_8,
        ap_return_0 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_0,
        ap_return_1 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_1,
        ap_return_2 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_2,
        ap_return_3 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_3,
        ap_return_4 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_4,
        ap_return_5 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_5,
        ap_return_6 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_6,
        ap_return_7 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_7,
        ap_return_8 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_8);

    myproject_axi_mul_mul_6s_16s_22_3_1_U19 : component myproject_axi_mul_mul_6s_16s_22_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln160_2_reg_1201,
        din1 => grp_fu_1061_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1061_p2);

    myproject_axi_mul_mul_6s_16s_22_3_1_U20 : component myproject_axi_mul_mul_6s_16s_22_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_119_reg_1206,
        din1 => grp_fu_1067_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1067_p2);

    myproject_axi_mul_mul_6s_16s_22_3_1_U21 : component myproject_axi_mul_mul_6s_16s_22_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_120_reg_1211,
        din1 => grp_fu_1073_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1073_p2);

    myproject_axi_mul_mul_6s_16s_22_3_1_U22 : component myproject_axi_mul_mul_6s_16s_22_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_121_reg_1216,
        din1 => grp_fu_1079_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1079_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln78_fu_1055_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln151_fu_599_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_index_0_i_i_i_i35_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                in_index_0_i_i_i_i35_reg_234 <= select_ln168_fu_783_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                in_index_0_i_i_i_i35_reg_234 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten36_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_1055_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                indvar_flatten36_reg_222 <= add_ln78_reg_1126;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten36_reg_222 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    pX_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_285)) then
                if ((icmp_ln292_fu_970_p2 = ap_const_lv1_1)) then 
                    pX_5 <= ap_const_lv32_0;
                elsif ((icmp_ln292_fu_970_p2 = ap_const_lv1_0)) then 
                    pX_5 <= add_ln305_fu_975_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_294)) then
                if ((icmp_ln296_fu_1010_p2 = ap_const_lv1_1)) then 
                    pY_5 <= ap_const_lv32_0;
                elsif ((icmp_ln296_fu_1010_p2 = ap_const_lv1_0)) then 
                    pY_5 <= add_ln300_fu_1015_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln292_reg_1322 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                sX_5 <= select_ln307_reg_1326;
            elsif ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln292_fu_970_p2 = ap_const_lv1_1))) then 
                sX_5 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_i_i_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln296_fu_1010_p2 = ap_const_lv1_1) and (icmp_ln292_fu_970_p2 = ap_const_lv1_1))) then 
                storemerge_i_i_reg_345 <= ap_const_lv32_0;
            elsif (((icmp_ln296_reg_1331 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln292_reg_1322 = ap_const_lv1_1))) then 
                storemerge_i_i_reg_345 <= select_ln302_reg_1335;
            end if; 
        end if;
    end process;

    tmp_data_0_V_3933_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_0_V_3933_reg_257 <= acc_1_V_3_fu_855_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_0_V_3933_reg_257 <= ap_const_lv14_10;
            end if; 
        end if;
    end process;

    tmp_data_1_V_3231_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_1_V_3231_reg_268 <= acc_1_V_fu_848_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_1_V_3231_reg_268 <= ap_const_lv14_10;
            end if; 
        end if;
    end process;

    tmp_data_2_V_3229_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_2_V_3229_reg_279 <= acc_3_V_3_fu_891_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_2_V_3229_reg_279 <= ap_const_lv14_8;
            end if; 
        end if;
    end process;

    tmp_data_3_V_2927_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_3_V_2927_reg_290 <= acc_3_V_fu_884_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_3_V_2927_reg_290 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    tmp_data_4_V_2925_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_4_V_2925_reg_301 <= acc_5_V_3_fu_927_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_4_V_2925_reg_301 <= ap_const_lv14_10;
            end if; 
        end if;
    end process;

    tmp_data_5_V_2623_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_5_V_2623_reg_312 <= acc_5_V_fu_920_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_5_V_2623_reg_312 <= ap_const_lv14_8;
            end if; 
        end if;
    end process;

    tmp_data_6_V_2621_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_6_V_2621_reg_323 <= acc_7_V_3_fu_963_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_6_V_2621_reg_323 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    tmp_data_7_V_2619_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_7_V_2619_reg_334 <= acc_7_V_fu_956_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                tmp_data_7_V_2619_reg_334 <= ap_const_lv14_3FE0;
            end if; 
        end if;
    end process;

    w_index34_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_index34_reg_246 <= w_index_reg_1151;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then 
                w_index34_reg_246 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                acc_1_V_3_reg_1280 <= acc_1_V_3_fu_855_p3;
                acc_1_V_reg_1274 <= acc_1_V_fu_848_p3;
                acc_3_V_3_reg_1292 <= acc_3_V_3_fu_891_p3;
                acc_3_V_reg_1286 <= acc_3_V_fu_884_p3;
                acc_5_V_3_reg_1304 <= acc_5_V_3_fu_927_p3;
                acc_5_V_reg_1298 <= acc_5_V_fu_920_p3;
                acc_7_V_3_reg_1316 <= acc_7_V_3_fu_963_p3;
                acc_7_V_reg_1310 <= acc_7_V_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln78_reg_1126 <= add_ln78_fu_569_p2;
                and_ln271_2_reg_1122 <= and_ln271_2_fu_563_p2;
                icmp_ln271_1_reg_1105 <= icmp_ln271_1_fu_505_p2;
                icmp_ln271_reg_1095 <= icmp_ln271_fu_495_p2;
                kernel_data_V_1_0 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_0;
                kernel_data_V_1_1 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_3;
                kernel_data_V_1_2 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_4;
                kernel_data_V_1_3 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_1;
                kernel_data_V_1_4 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_5;
                kernel_data_V_1_5 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_6;
                kernel_data_V_1_6 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_2;
                kernel_data_V_1_7 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_7;
                kernel_data_V_1_8 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_return_8;
                pX_5_load_reg_1116 <= pX_5;
                pY_5_load_reg_1110 <= pY_5;
                sX_5_load_reg_1090 <= sX_5;
                sY_5_load_reg_1100 <= sY_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln151_reg_1156 <= icmp_ln151_fu_599_p2;
                icmp_ln151_reg_1156_pp0_iter1_reg <= icmp_ln151_reg_1156;
                icmp_ln168_reg_1146 <= icmp_ln168_fu_587_p2;
                icmp_ln19_1_reg_1181 <= icmp_ln19_1_fu_627_p2;
                icmp_ln19_reg_1176 <= icmp_ln19_fu_621_p2;
                in_index_reg_1141 <= in_index_fu_581_p2;
                or_ln19_2_reg_1186 <= or_ln19_2_fu_705_p2;
                or_ln19_4_reg_1191 <= or_ln19_4_fu_727_p2;
                out_index_reg_1160 <= outidx9_q0;
                select_ln19_6_reg_1196 <= select_ln19_6_fu_741_p3;
                tmp_119_reg_1206 <= w2_V_q0(11 downto 6);
                tmp_120_reg_1211 <= w2_V_q0(17 downto 12);
                tmp_121_reg_1216 <= w2_V_q0(23 downto 18);
                trunc_ln160_2_reg_1201 <= trunc_ln160_2_fu_749_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln151_reg_1156_pp0_iter2_reg <= icmp_ln151_reg_1156_pp0_iter1_reg;
                icmp_ln151_reg_1156_pp0_iter3_reg <= icmp_ln151_reg_1156_pp0_iter2_reg;
                icmp_ln151_reg_1156_pp0_iter4_reg <= icmp_ln151_reg_1156_pp0_iter3_reg;
                mul_ln1118_146_reg_1259 <= grp_fu_1067_p2;
                mul_ln1118_147_reg_1264 <= grp_fu_1073_p2;
                mul_ln1118_148_reg_1269 <= grp_fu_1079_p2;
                mul_ln1118_reg_1254 <= grp_fu_1061_p2;
                out_index_reg_1160_pp0_iter2_reg <= out_index_reg_1160;
                out_index_reg_1160_pp0_iter3_reg <= out_index_reg_1160_pp0_iter2_reg;
                out_index_reg_1160_pp0_iter4_reg <= out_index_reg_1160_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln292_reg_1322 <= icmp_ln292_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln292_fu_970_p2 = ap_const_lv1_1))) then
                icmp_ln296_reg_1331 <= icmp_ln296_fu_1010_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln292_reg_1322 = ap_const_lv1_1))) then
                sY_5 <= ap_phi_mux_storemerge_i_i_phi_fu_349_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (icmp_ln296_fu_1010_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln292_fu_970_p2 = ap_const_lv1_1))) then
                select_ln302_reg_1335 <= select_ln302_fu_1031_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (icmp_ln292_fu_970_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                select_ln307_reg_1326 <= select_ln307_fu_991_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_0_V_reg_1085 <= data_V_data_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                w_index_reg_1151 <= w_index_fu_593_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_data_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state10, and_ln271_2_reg_1122, ap_CS_fsm_state3, and_ln271_2_fu_563_p2, ap_enable_reg_pp0_iter5, io_acc_block_signal_op172, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_CS_fsm_state11, icmp_ln78_fu_1055_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((data_V_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln271_2_fu_563_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln78_fu_1055_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    acc_0_V_fu_842_p2 <= std_logic_vector(unsigned(trunc_ln_fu_826_p4) + unsigned(select_ln1265_fu_835_p3));
    acc_1_V_3_fu_855_p3 <= 
        tmp_data_0_V_3933_reg_257 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        acc_0_V_fu_842_p2;
    acc_1_V_fu_848_p3 <= 
        acc_0_V_fu_842_p2 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_1_V_3231_reg_268;
    acc_2_V_fu_878_p2 <= std_logic_vector(unsigned(trunc_ln708_s_fu_862_p4) + unsigned(select_ln1265_1_fu_871_p3));
    acc_3_V_3_fu_891_p3 <= 
        tmp_data_2_V_3229_reg_279 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        acc_2_V_fu_878_p2;
    acc_3_V_fu_884_p3 <= 
        acc_2_V_fu_878_p2 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_3_V_2927_reg_290;
    acc_4_V_fu_914_p2 <= std_logic_vector(unsigned(trunc_ln708_181_fu_898_p4) + unsigned(select_ln1265_2_fu_907_p3));
    acc_5_V_3_fu_927_p3 <= 
        tmp_data_4_V_2925_reg_301 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        acc_4_V_fu_914_p2;
    acc_5_V_fu_920_p3 <= 
        acc_4_V_fu_914_p2 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_5_V_2623_reg_312;
    acc_6_V_fu_950_p2 <= std_logic_vector(unsigned(trunc_ln708_182_fu_934_p4) + unsigned(select_ln1265_3_fu_943_p3));
    acc_7_V_3_fu_963_p3 <= 
        tmp_data_6_V_2621_reg_323 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        acc_6_V_fu_950_p2;
    acc_7_V_fu_956_p3 <= 
        acc_6_V_fu_950_p2 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_7_V_2619_reg_334;
    add_ln300_fu_1015_p2 <= std_logic_vector(unsigned(pY_5_load_reg_1110) + unsigned(ap_const_lv32_1));
    add_ln302_fu_1026_p2 <= std_logic_vector(unsigned(sY_5_load_reg_1100) + unsigned(ap_const_lv32_1));
    add_ln305_fu_975_p2 <= std_logic_vector(unsigned(pX_5_load_reg_1116) + unsigned(ap_const_lv32_1));
    add_ln307_fu_986_p2 <= std_logic_vector(unsigned(sX_5_load_reg_1090) + unsigned(ap_const_lv32_1));
    add_ln78_fu_569_p2 <= std_logic_vector(unsigned(indvar_flatten36_reg_222) + unsigned(ap_const_lv14_1));
    and_ln271_1_fu_557_p2 <= (icmp_ln271_3_fu_545_p2 and icmp_ln271_2_fu_525_p2);
    and_ln271_2_fu_563_p2 <= (and_ln271_fu_551_p2 and and_ln271_1_fu_557_p2);
    and_ln271_fu_551_p2 <= (icmp_ln271_fu_495_p2 and icmp_ln271_1_fu_505_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_assign_proc : process(and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
                ap_block_state10 <= ((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_285_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
                ap_condition_285 <= (not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10));
    end process;


    ap_condition_294_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, icmp_ln292_fu_970_p2, io_acc_block_signal_op172)
    begin
                ap_condition_294 <= (not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln292_fu_970_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11, icmp_ln78_fu_1055_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln78_fu_1055_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_in_index_0_i_i_i_i35_phi_fu_238_p4_assign_proc : process(in_index_0_i_i_i_i35_reg_234, ap_CS_fsm_pp0_stage0, icmp_ln151_reg_1156, select_ln168_fu_783_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln151_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_in_index_0_i_i_i_i35_phi_fu_238_p4 <= select_ln168_fu_783_p3;
        else 
            ap_phi_mux_in_index_0_i_i_i_i35_phi_fu_238_p4 <= in_index_0_i_i_i_i35_reg_234;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_349_p4_assign_proc : process(icmp_ln292_reg_1322, icmp_ln296_reg_1331, select_ln302_reg_1335, ap_CS_fsm_state11, storemerge_i_i_reg_345)
    begin
        if (((icmp_ln296_reg_1331 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln292_reg_1322 = ap_const_lv1_1))) then 
            ap_phi_mux_storemerge_i_i_phi_fu_349_p4 <= select_ln302_reg_1335;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_349_p4 <= storemerge_i_i_reg_345;
        end if; 
    end process;


    ap_phi_mux_w_index34_phi_fu_250_p4_assign_proc : process(w_index34_reg_246, ap_CS_fsm_pp0_stage0, w_index_reg_1151, icmp_ln151_reg_1156, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln151_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_w_index34_phi_fu_250_p4 <= w_index_reg_1151;
        else 
            ap_phi_mux_w_index34_phi_fu_250_p4 <= w_index34_reg_246;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_start <= ap_const_logic_1;
        else 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_356_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_blk_n_assign_proc : process(data_V_data_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_data_V_blk_n <= data_V_data_V_empty_n;
        else 
            data_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_read_assign_proc : process(data_V_data_V_empty_n, ap_CS_fsm_state2)
    begin
        if (((data_V_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_V_data_V_read <= ap_const_logic_1;
        else 
            data_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1061_p1 <= sext_ln1116_fu_810_p1(16 - 1 downto 0);
    grp_fu_1067_p1 <= sext_ln1116_fu_810_p1(16 - 1 downto 0);
    grp_fu_1073_p1 <= sext_ln1116_fu_810_p1(16 - 1 downto 0);
    grp_fu_1079_p1 <= sext_ln1116_fu_810_p1(16 - 1 downto 0);
    icmp_ln151_fu_599_p2 <= "1" when (ap_phi_mux_w_index34_phi_fu_250_p4 = ap_const_lv5_11) else "0";
    icmp_ln168_fu_587_p2 <= "1" when (signed(in_index_fu_581_p2) > signed(ap_const_lv32_8)) else "0";
    icmp_ln19_1_fu_627_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_1) else "0";
    icmp_ln19_2_fu_633_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_2) else "0";
    icmp_ln19_3_fu_639_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_3) else "0";
    icmp_ln19_4_fu_645_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_4) else "0";
    icmp_ln19_5_fu_651_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_5) else "0";
    icmp_ln19_6_fu_657_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_6) else "0";
    icmp_ln19_7_fu_663_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_7) else "0";
    icmp_ln19_fu_621_p2 <= "1" when (trunc_ln160_fu_605_p1 = ap_const_lv4_0) else "0";
    icmp_ln271_1_fu_505_p2 <= "1" when (sY_5 = ap_const_lv32_2) else "0";
    icmp_ln271_2_fu_525_p2 <= "1" when (signed(tmp_fu_515_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln271_3_fu_545_p2 <= "1" when (signed(tmp_249_fu_535_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln271_fu_495_p2 <= "1" when (sX_5 = ap_const_lv32_2) else "0";
    icmp_ln292_fu_970_p2 <= "1" when (pX_5_load_reg_1116 = ap_const_lv32_11) else "0";
    icmp_ln296_fu_1010_p2 <= "1" when (pY_5_load_reg_1110 = ap_const_lv32_201) else "0";
    icmp_ln78_fu_1055_p2 <= "1" when (indvar_flatten36_reg_222 = ap_const_lv14_2423) else "0";
    in_index_fu_581_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_in_index_0_i_i_i_i35_phi_fu_238_p4));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln78_fu_1055_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln78_fu_1055_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op172 <= (res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    or_ln19_1_fu_691_p2 <= (icmp_ln19_5_fu_651_p2 or icmp_ln19_4_fu_645_p2);
    or_ln19_2_fu_705_p2 <= (icmp_ln19_3_fu_639_p2 or icmp_ln19_2_fu_633_p2);
    or_ln19_3_fu_789_p2 <= (icmp_ln19_reg_1176 or icmp_ln19_1_reg_1181);
    or_ln19_4_fu_727_p2 <= (or_ln19_fu_677_p2 or or_ln19_1_fu_691_p2);
    or_ln19_5_fu_793_p2 <= (or_ln19_3_fu_789_p2 or or_ln19_2_reg_1186);
    or_ln19_6_fu_798_p2 <= (or_ln19_5_fu_793_p2 or or_ln19_4_reg_1191);
    or_ln19_fu_677_p2 <= (icmp_ln19_7_fu_663_p2 or icmp_ln19_6_fu_657_p2);
    outidx9_address0 <= zext_ln155_fu_575_p1(5 - 1 downto 0);

    outidx9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outidx9_ce0 <= ap_const_logic_1;
        else 
            outidx9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= acc_1_V_3_reg_1280;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= acc_1_V_reg_1274;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= acc_3_V_3_reg_1292;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= acc_3_V_reg_1286;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= acc_5_V_3_reg_1304;

    res_V_data_4_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= acc_5_V_reg_1298;

    res_V_data_5_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(res_V_data_6_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_din <= acc_7_V_3_reg_1316;

    res_V_data_6_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(res_V_data_7_V_full_n, ap_CS_fsm_state10, and_ln271_2_reg_1122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_din <= acc_7_V_reg_1310;

    res_V_data_7_V_write_assign_proc : process(ap_CS_fsm_state10, and_ln271_2_reg_1122, io_acc_block_signal_op172)
    begin
        if ((not(((io_acc_block_signal_op172 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = and_ln271_2_reg_1122))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1265_1_fu_871_p3 <= 
        tmp_data_3_V_2927_reg_290 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_2_V_3229_reg_279;
    select_ln1265_2_fu_907_p3 <= 
        tmp_data_5_V_2623_reg_312 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_4_V_2925_reg_301;
    select_ln1265_3_fu_943_p3 <= 
        tmp_data_7_V_2619_reg_334 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_6_V_2621_reg_323;
    select_ln1265_fu_835_p3 <= 
        tmp_data_1_V_3231_reg_268 when (out_index_reg_1160_pp0_iter4_reg(0) = '1') else 
        tmp_data_0_V_3933_reg_257;
    select_ln168_fu_783_p3 <= 
        ap_const_lv32_0 when (icmp_ln168_reg_1146(0) = '1') else 
        in_index_reg_1141;
    select_ln19_1_fu_683_p3 <= 
        kernel_data_V_1_5 when (icmp_ln19_5_fu_651_p2(0) = '1') else 
        kernel_data_V_1_4;
    select_ln19_2_fu_697_p3 <= 
        kernel_data_V_1_3 when (icmp_ln19_3_fu_639_p2(0) = '1') else 
        kernel_data_V_1_2;
    select_ln19_3_fu_711_p3 <= 
        kernel_data_V_1_1 when (icmp_ln19_1_fu_627_p2(0) = '1') else 
        kernel_data_V_1_0;
    select_ln19_4_fu_719_p3 <= 
        select_ln19_fu_669_p3 when (or_ln19_fu_677_p2(0) = '1') else 
        select_ln19_1_fu_683_p3;
    select_ln19_5_fu_733_p3 <= 
        select_ln19_2_fu_697_p3 when (or_ln19_2_fu_705_p2(0) = '1') else 
        select_ln19_3_fu_711_p3;
    select_ln19_6_fu_741_p3 <= 
        select_ln19_4_fu_719_p3 when (or_ln19_4_fu_727_p2(0) = '1') else 
        select_ln19_5_fu_733_p3;
    select_ln19_7_fu_803_p3 <= 
        select_ln19_6_reg_1196 when (or_ln19_6_fu_798_p2(0) = '1') else 
        kernel_data_V_1_8;
    select_ln19_fu_669_p3 <= 
        kernel_data_V_1_7 when (icmp_ln19_7_fu_663_p2(0) = '1') else 
        kernel_data_V_1_6;
    select_ln302_fu_1031_p3 <= 
        ap_const_lv32_2 when (icmp_ln271_1_reg_1105(0) = '1') else 
        add_ln302_fu_1026_p2;
    select_ln307_fu_991_p3 <= 
        ap_const_lv32_2 when (icmp_ln271_reg_1095(0) = '1') else 
        add_ln307_fu_986_p2;
        sext_ln1116_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln19_7_fu_803_p3),22));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_249_fu_535_p4 <= pX_5(31 downto 1);
    tmp_fu_515_p4 <= pY_5(31 downto 1);
    trunc_ln160_2_fu_749_p1 <= w2_V_q0(6 - 1 downto 0);
    trunc_ln160_fu_605_p1 <= in_index_0_i_i_i_i35_reg_234(4 - 1 downto 0);
    trunc_ln708_181_fu_898_p4 <= mul_ln1118_147_reg_1264(20 downto 7);
    trunc_ln708_182_fu_934_p4 <= mul_ln1118_148_reg_1269(20 downto 7);
    trunc_ln708_s_fu_862_p4 <= mul_ln1118_146_reg_1259(20 downto 7);
    trunc_ln_fu_826_p4 <= mul_ln1118_reg_1254(20 downto 7);
    w2_V_address0 <= zext_ln155_fu_575_p1(5 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_w_index34_phi_fu_250_p4));
    zext_ln155_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index34_phi_fu_250_p4),64));
end behav;
