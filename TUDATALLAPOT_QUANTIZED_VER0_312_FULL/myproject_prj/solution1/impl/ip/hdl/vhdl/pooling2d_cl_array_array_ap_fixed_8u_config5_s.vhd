-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_array_ap_fixed_8u_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    data_V_data_5_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_5_V_empty_n : IN STD_LOGIC;
    data_V_data_5_V_read : OUT STD_LOGIC;
    data_V_data_6_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_6_V_empty_n : IN STD_LOGIC;
    data_V_data_6_V_read : OUT STD_LOGIC;
    data_V_data_7_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_7_V_empty_n : IN STD_LOGIC;
    data_V_data_7_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_array_ap_fixed_8u_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_6_8 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_9 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_10 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_11 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_12 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_13 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_14 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_15 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_24 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_25 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_26 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_27 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_28 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_29 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_30 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_6_31 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln233_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal data_V_data_4_V_blk_n : STD_LOGIC;
    signal data_V_data_5_V_blk_n : STD_LOGIC;
    signal data_V_data_6_V_blk_n : STD_LOGIC;
    signal data_V_data_7_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal and_ln185_2_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_6_V_blk_n : STD_LOGIC;
    signal res_V_data_7_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_190 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln233_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln233_reg_1115_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln233_fu_262_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln233_reg_1119 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool_window_2_V_7_reg_1124 : STD_LOGIC_VECTOR (5 downto 0);
    signal io_acc_block_signal_op28 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal io_acc_block_signal_op199 : STD_LOGIC;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal pool_window_2_V_6_reg_1130 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_5_reg_1136 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_4_reg_1142 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_3_reg_1148 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_2_reg_1154 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_reg_1160 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_2_V_1_reg_1166 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_7_reg_1172 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_6_reg_1178 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_5_reg_1184 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_4_reg_1190 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_3_reg_1196 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_2_reg_1202 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_reg_1208 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_0_V_1_reg_1214 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_1_reg_1220 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_reg_1226 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_2_reg_1232 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_3_reg_1238 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_4_reg_1244 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_5_reg_1250 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_6_reg_1256 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_1_V_7_reg_1262 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_1_reg_1268 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_reg_1274 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_2_reg_1280 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_3_reg_1286 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_4_reg_1292 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_5_reg_1298 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_6_reg_1304 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_window_3_V_7_reg_1310 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln185_2_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_fu_674_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_reg_1320 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_15_fu_684_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_15_reg_1325 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_16_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_17_fu_700_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_17_reg_1335 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_18_fu_710_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_18_reg_1340 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_19_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_19_reg_1345 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_20_fu_726_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_20_reg_1350 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_21_fu_736_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_21_reg_1355 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_22_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_22_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_23_fu_752_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_23_reg_1365 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_24_fu_762_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_24_reg_1370 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_25_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_25_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_26_fu_778_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_26_reg_1380 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_27_fu_788_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_27_reg_1385 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_28_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_28_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_29_fu_804_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_29_reg_1395 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_30_fu_814_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_30_reg_1400 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_31_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_31_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_32_fu_830_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_32_reg_1410 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_33_fu_840_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_33_reg_1415 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_34_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_34_reg_1420 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_35_fu_856_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_35_reg_1425 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_36_fu_866_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln86_36_reg_1430 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1496_37_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_37_reg_1435 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_1440 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln218_fu_902_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln218_reg_1444 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln207_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_1449 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln213_fu_946_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln213_reg_1453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_done : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_idle : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ready : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_5 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_6 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_7 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_9 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_10 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_11 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_12 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_13 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_14 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_15 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31 : STD_LOGIC_VECTOR (5 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0_ignore_call30 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call30 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp53 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_194_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_storemerge_i_i_phi_fu_205_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg : STD_LOGIC := '0';
    signal add_ln216_fu_884_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln211_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal icmp_ln185_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_1_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_3_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_1_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_15_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_17_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_18_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_20_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_21_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_23_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_24_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_26_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_27_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_29_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_30_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_32_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_33_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_35_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_36_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln218_fu_896_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln86_16_fu_960_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_0_V_4_fu_965_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln86_19_fu_978_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_1_V_4_fu_983_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln86_22_fu_996_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_2_V_4_fu_1001_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln86_25_fu_1014_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_3_V_3_fu_1019_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln86_28_fu_1032_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_4_V_3_fu_1037_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln86_31_fu_1050_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_5_V_2_fu_1055_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln86_34_fu_1068_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_6_V_2_fu_1073_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln86_37_fu_1086_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_7_V_2_fu_1091_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_428 : BOOLEAN;
    signal ap_condition_2009 : BOOLEAN;
    signal ap_condition_331 : BOOLEAN;
    signal ap_condition_2014 : BOOLEAN;

    component shift_line_buffer_array_ap_fixed_8u_config5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        kernel_window_24_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_25_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_26_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_27_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_28_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_29_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_30_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_31_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_8_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_9_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_10_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_11_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_12_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_13_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_14_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_15_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_24_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_25_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_26_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_27_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_28_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_29_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_30_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        kernel_window_31_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212 : component shift_line_buffer_array_ap_fixed_8u_config5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start,
        ap_done => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_done,
        ap_idle => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_idle,
        ap_ready => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ready,
        kernel_window_24_V_write => data_V_data_0_V_dout,
        kernel_window_25_V_write => data_V_data_1_V_dout,
        kernel_window_26_V_write => data_V_data_2_V_dout,
        kernel_window_27_V_write => data_V_data_3_V_dout,
        kernel_window_28_V_write => data_V_data_4_V_dout,
        kernel_window_29_V_write => data_V_data_5_V_dout,
        kernel_window_30_V_write => data_V_data_6_V_dout,
        kernel_window_31_V_write => data_V_data_7_V_dout,
        kernel_window_8_V_read => kernel_data_V_6_8,
        kernel_window_9_V_read => kernel_data_V_6_9,
        kernel_window_10_V_read => kernel_data_V_6_10,
        kernel_window_11_V_read => kernel_data_V_6_11,
        kernel_window_12_V_read => kernel_data_V_6_12,
        kernel_window_13_V_read => kernel_data_V_6_13,
        kernel_window_14_V_read => kernel_data_V_6_14,
        kernel_window_15_V_read => kernel_data_V_6_15,
        kernel_window_24_V_read => kernel_data_V_6_24,
        kernel_window_25_V_read => kernel_data_V_6_25,
        kernel_window_26_V_read => kernel_data_V_6_26,
        kernel_window_27_V_read => kernel_data_V_6_27,
        kernel_window_28_V_read => kernel_data_V_6_28,
        kernel_window_29_V_read => kernel_data_V_6_29,
        kernel_window_30_V_read => kernel_data_V_6_30,
        kernel_window_31_V_read => kernel_data_V_6_31,
        ap_return_0 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_0,
        ap_return_1 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_1,
        ap_return_2 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_2,
        ap_return_3 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_3,
        ap_return_4 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_4,
        ap_return_5 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_5,
        ap_return_6 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_6,
        ap_return_7 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_7,
        ap_return_8 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_8,
        ap_return_9 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_9,
        ap_return_10 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_10,
        ap_return_11 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_11,
        ap_return_12 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_12,
        ap_return_13 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_13,
        ap_return_14 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_14,
        ap_return_15 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_15,
        ap_return_16 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16,
        ap_return_17 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17,
        ap_return_18 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18,
        ap_return_19 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19,
        ap_return_20 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20,
        ap_return_21 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21,
        ap_return_22 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22,
        ap_return_23 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23,
        ap_return_24 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24,
        ap_return_25 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25,
        ap_return_26 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26,
        ap_return_27 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27,
        ap_return_28 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28,
        ap_return_29 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29,
        ap_return_30 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30,
        ap_return_31 => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31,
        ap_ce => call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln233_fu_256_p2 = ap_const_lv1_0))) then 
                    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ready = ap_const_logic_1)) then 
                    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln207_fu_922_p2 = ap_const_lv1_1) and (icmp_ln203_fu_878_p2 = ap_const_lv1_1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_201;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
                indvar_flatten_reg_190 <= add_ln233_reg_1119;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_190 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_428)) then
                if ((icmp_ln203_fu_878_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln203_fu_878_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln216_fu_884_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_2009)) then
                if ((icmp_ln207_fu_922_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln207_fu_922_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln211_fu_928_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_2014)) then 
                    sX <= select_ln218_reg_1444;
                elsif ((ap_const_boolean_1 = ap_condition_331)) then 
                    sX <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln233_reg_1119 <= add_ln233_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then
                and_ln185_2_reg_1316 <= and_ln185_2_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln185_2_fu_664_p2))) then
                icmp_ln1496_16_reg_1330 <= icmp_ln1496_16_fu_690_p2;
                icmp_ln1496_19_reg_1345 <= icmp_ln1496_19_fu_716_p2;
                icmp_ln1496_22_reg_1360 <= icmp_ln1496_22_fu_742_p2;
                icmp_ln1496_25_reg_1375 <= icmp_ln1496_25_fu_768_p2;
                icmp_ln1496_28_reg_1390 <= icmp_ln1496_28_fu_794_p2;
                icmp_ln1496_31_reg_1405 <= icmp_ln1496_31_fu_820_p2;
                icmp_ln1496_34_reg_1420 <= icmp_ln1496_34_fu_846_p2;
                icmp_ln1496_37_reg_1435 <= icmp_ln1496_37_fu_872_p2;
                select_ln86_15_reg_1325 <= select_ln86_15_fu_684_p3;
                select_ln86_17_reg_1335 <= select_ln86_17_fu_700_p3;
                select_ln86_18_reg_1340 <= select_ln86_18_fu_710_p3;
                select_ln86_20_reg_1350 <= select_ln86_20_fu_726_p3;
                select_ln86_21_reg_1355 <= select_ln86_21_fu_736_p3;
                select_ln86_23_reg_1365 <= select_ln86_23_fu_752_p3;
                select_ln86_24_reg_1370 <= select_ln86_24_fu_762_p3;
                select_ln86_26_reg_1380 <= select_ln86_26_fu_778_p3;
                select_ln86_27_reg_1385 <= select_ln86_27_fu_788_p3;
                select_ln86_29_reg_1395 <= select_ln86_29_fu_804_p3;
                select_ln86_30_reg_1400 <= select_ln86_30_fu_814_p3;
                select_ln86_32_reg_1410 <= select_ln86_32_fu_830_p3;
                select_ln86_33_reg_1415 <= select_ln86_33_fu_840_p3;
                select_ln86_35_reg_1425 <= select_ln86_35_fu_856_p3;
                select_ln86_36_reg_1430 <= select_ln86_36_fu_866_p3;
                select_ln86_reg_1320 <= select_ln86_fu_674_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln203_reg_1440 <= icmp_ln203_fu_878_p2;
                icmp_ln233_reg_1115 <= icmp_ln233_fu_256_p2;
                icmp_ln233_reg_1115_pp0_iter1_reg <= icmp_ln233_reg_1115;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_878_p2 = ap_const_lv1_1))) then
                icmp_ln207_reg_1449 <= icmp_ln207_fu_922_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then
                kernel_data_V_6_10 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18;
                kernel_data_V_6_11 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19;
                kernel_data_V_6_12 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20;
                kernel_data_V_6_13 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21;
                kernel_data_V_6_14 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22;
                kernel_data_V_6_15 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23;
                kernel_data_V_6_24 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24;
                kernel_data_V_6_25 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25;
                kernel_data_V_6_26 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26;
                kernel_data_V_6_27 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27;
                kernel_data_V_6_28 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28;
                kernel_data_V_6_29 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29;
                kernel_data_V_6_30 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30;
                kernel_data_V_6_31 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31;
                kernel_data_V_6_8 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16;
                kernel_data_V_6_9 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then
                pool_window_0_V_1_reg_1214 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_0;
                pool_window_0_V_2_reg_1202 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_2;
                pool_window_0_V_3_reg_1196 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_3;
                pool_window_0_V_4_reg_1190 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_4;
                pool_window_0_V_5_reg_1184 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_5;
                pool_window_0_V_6_reg_1178 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_6;
                pool_window_0_V_7_reg_1172 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_7;
                pool_window_0_V_reg_1208 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_1;
                pool_window_1_V_1_reg_1220 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16;
                pool_window_1_V_2_reg_1232 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18;
                pool_window_1_V_3_reg_1238 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19;
                pool_window_1_V_4_reg_1244 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20;
                pool_window_1_V_5_reg_1250 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21;
                pool_window_1_V_6_reg_1256 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22;
                pool_window_1_V_7_reg_1262 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23;
                pool_window_1_V_reg_1226 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17;
                pool_window_2_V_1_reg_1166 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_8;
                pool_window_2_V_2_reg_1154 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_10;
                pool_window_2_V_3_reg_1148 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_11;
                pool_window_2_V_4_reg_1142 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_12;
                pool_window_2_V_5_reg_1136 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_13;
                pool_window_2_V_6_reg_1130 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_14;
                pool_window_2_V_7_reg_1124 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_15;
                pool_window_2_V_reg_1160 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_9;
                pool_window_3_V_1_reg_1268 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24;
                pool_window_3_V_2_reg_1280 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26;
                pool_window_3_V_3_reg_1286 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27;
                pool_window_3_V_4_reg_1292 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28;
                pool_window_3_V_5_reg_1298 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29;
                pool_window_3_V_6_reg_1304 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30;
                pool_window_3_V_7_reg_1310 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31;
                pool_window_3_V_reg_1274 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln203_reg_1440 = ap_const_lv1_1))) then
                sY <= ap_phi_mux_storemerge_i_i_phi_fu_205_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_878_p2 = ap_const_lv1_1) and (icmp_ln207_fu_922_p2 = ap_const_lv1_0) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then
                select_ln213_reg_1453 <= select_ln213_fu_946_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_878_p2 = ap_const_lv1_0))) then
                select_ln218_reg_1444 <= select_ln218_fu_902_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln233_fu_256_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_fu_256_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_fu_256_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln211_fu_928_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln213_fu_940_p2 <= std_logic_vector(unsigned(sY) + unsigned(ap_const_lv32_1));
    add_ln216_fu_884_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln218_fu_896_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln233_fu_262_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_194_p4) + unsigned(ap_const_lv14_1));
    and_ln185_1_fu_658_p2 <= (icmp_ln185_3_fu_646_p2 and icmp_ln185_2_fu_636_p2);
    and_ln185_2_fu_664_p2 <= (and_ln185_fu_652_p2 and and_ln185_1_fu_658_p2);
    and_ln185_fu_652_p2 <= (icmp_ln185_fu_616_p2 and icmp_ln185_1_fu_626_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, io_acc_block_signal_op28, io_acc_block_signal_op199)
    begin
                ap_block_pp0_stage1_01001 <= (((io_acc_block_signal_op199 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_2_reg_1316)) or ((io_acc_block_signal_op28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_reg_1115 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, io_acc_block_signal_op28, io_acc_block_signal_op199)
    begin
                ap_block_pp0_stage1_11001 <= (((io_acc_block_signal_op199 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_2_reg_1316)) or ((io_acc_block_signal_op28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_reg_1115 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp53_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, io_acc_block_signal_op28, io_acc_block_signal_op199)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp53 <= (((io_acc_block_signal_op199 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_2_reg_1316)) or ((io_acc_block_signal_op28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_reg_1115 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, io_acc_block_signal_op28, io_acc_block_signal_op199)
    begin
                ap_block_pp0_stage1_subdone <= (((io_acc_block_signal_op199 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_2_reg_1316)) or ((io_acc_block_signal_op28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_reg_1115 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln233_reg_1115, io_acc_block_signal_op28)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((io_acc_block_signal_op28 = ap_const_logic_0) and (icmp_ln233_reg_1115 = ap_const_lv1_0));
    end process;


    ap_block_state3_pp0_stage1_iter0_ignore_call30_assign_proc : process(icmp_ln233_reg_1115, io_acc_block_signal_op28)
    begin
                ap_block_state3_pp0_stage1_iter0_ignore_call30 <= ((io_acc_block_signal_op28 = ap_const_logic_0) and (icmp_ln233_reg_1115 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter1_assign_proc : process(and_ln185_2_reg_1316, io_acc_block_signal_op199)
    begin
                ap_block_state5_pp0_stage1_iter1 <= ((io_acc_block_signal_op199 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln185_2_reg_1316));
    end process;


    ap_block_state5_pp0_stage1_iter1_ignore_call30_assign_proc : process(and_ln185_2_reg_1316, io_acc_block_signal_op199)
    begin
                ap_block_state5_pp0_stage1_iter1_ignore_call30 <= ((io_acc_block_signal_op199 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln185_2_reg_1316));
    end process;


    ap_condition_2009_assign_proc : process(icmp_ln233_reg_1115, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln203_fu_878_p2)
    begin
                ap_condition_2009 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_878_p2 = ap_const_lv1_1) and (icmp_ln233_reg_1115 = ap_const_lv1_0));
    end process;


    ap_condition_2014_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln203_reg_1440)
    begin
                ap_condition_2014 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln203_reg_1440 = ap_const_lv1_0));
    end process;


    ap_condition_331_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln203_fu_878_p2)
    begin
                ap_condition_331 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_878_p2 = ap_const_lv1_1));
    end process;


    ap_condition_428_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_428 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln233_fu_256_p2)
    begin
        if ((icmp_ln233_fu_256_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_194_p4_assign_proc : process(icmp_ln233_reg_1115, ap_enable_reg_pp0_iter1, indvar_flatten_reg_190, ap_CS_fsm_pp0_stage0, add_ln233_reg_1119, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_194_p4 <= add_ln233_reg_1119;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_194_p4 <= indvar_flatten_reg_190;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_205_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln233_reg_1115_pp0_iter1_reg, icmp_ln203_reg_1440, icmp_ln207_reg_1449, select_ln213_reg_1453, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln203_reg_1440 = ap_const_lv1_1) and (icmp_ln207_reg_1449 = ap_const_lv1_0) and (icmp_ln233_reg_1115_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_storemerge_i_i_phi_fu_205_p4 <= select_ln213_reg_1453;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_205_p4 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_201 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp53)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp53) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce <= ap_const_logic_1;
        else 
            call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg;

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(data_V_data_4_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_5_V_blk_n_assign_proc : process(data_V_data_5_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_5_V_blk_n <= data_V_data_5_V_empty_n;
        else 
            data_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_5_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_6_V_blk_n_assign_proc : process(data_V_data_6_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_6_V_blk_n <= data_V_data_6_V_empty_n;
        else 
            data_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_6_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_7_V_blk_n_assign_proc : process(data_V_data_7_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_1115)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_7_V_blk_n <= data_V_data_7_V_empty_n;
        else 
            data_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_7_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_1115, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln233_reg_1115 = ap_const_lv1_0))) then 
            data_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_15_fu_680_p2 <= "1" when (signed(pool_window_2_V_1_reg_1166) < signed(pool_window_3_V_1_reg_1268)) else "0";
    icmp_ln1496_16_fu_690_p2 <= "1" when (signed(select_ln86_fu_674_p3) < signed(select_ln86_15_fu_684_p3)) else "0";
    icmp_ln1496_17_fu_696_p2 <= "1" when (signed(pool_window_0_V_reg_1208) < signed(pool_window_1_V_reg_1226)) else "0";
    icmp_ln1496_18_fu_706_p2 <= "1" when (signed(pool_window_2_V_reg_1160) < signed(pool_window_3_V_reg_1274)) else "0";
    icmp_ln1496_19_fu_716_p2 <= "1" when (signed(select_ln86_17_fu_700_p3) < signed(select_ln86_18_fu_710_p3)) else "0";
    icmp_ln1496_20_fu_722_p2 <= "1" when (signed(pool_window_0_V_2_reg_1202) < signed(pool_window_1_V_2_reg_1232)) else "0";
    icmp_ln1496_21_fu_732_p2 <= "1" when (signed(pool_window_2_V_2_reg_1154) < signed(pool_window_3_V_2_reg_1280)) else "0";
    icmp_ln1496_22_fu_742_p2 <= "1" when (signed(select_ln86_20_fu_726_p3) < signed(select_ln86_21_fu_736_p3)) else "0";
    icmp_ln1496_23_fu_748_p2 <= "1" when (signed(pool_window_0_V_3_reg_1196) < signed(pool_window_1_V_3_reg_1238)) else "0";
    icmp_ln1496_24_fu_758_p2 <= "1" when (signed(pool_window_2_V_3_reg_1148) < signed(pool_window_3_V_3_reg_1286)) else "0";
    icmp_ln1496_25_fu_768_p2 <= "1" when (signed(select_ln86_23_fu_752_p3) < signed(select_ln86_24_fu_762_p3)) else "0";
    icmp_ln1496_26_fu_774_p2 <= "1" when (signed(pool_window_0_V_4_reg_1190) < signed(pool_window_1_V_4_reg_1244)) else "0";
    icmp_ln1496_27_fu_784_p2 <= "1" when (signed(pool_window_2_V_4_reg_1142) < signed(pool_window_3_V_4_reg_1292)) else "0";
    icmp_ln1496_28_fu_794_p2 <= "1" when (signed(select_ln86_26_fu_778_p3) < signed(select_ln86_27_fu_788_p3)) else "0";
    icmp_ln1496_29_fu_800_p2 <= "1" when (signed(pool_window_0_V_5_reg_1184) < signed(pool_window_1_V_5_reg_1250)) else "0";
    icmp_ln1496_30_fu_810_p2 <= "1" when (signed(pool_window_2_V_5_reg_1136) < signed(pool_window_3_V_5_reg_1298)) else "0";
    icmp_ln1496_31_fu_820_p2 <= "1" when (signed(select_ln86_29_fu_804_p3) < signed(select_ln86_30_fu_814_p3)) else "0";
    icmp_ln1496_32_fu_826_p2 <= "1" when (signed(pool_window_0_V_6_reg_1178) < signed(pool_window_1_V_6_reg_1256)) else "0";
    icmp_ln1496_33_fu_836_p2 <= "1" when (signed(pool_window_2_V_6_reg_1130) < signed(pool_window_3_V_6_reg_1304)) else "0";
    icmp_ln1496_34_fu_846_p2 <= "1" when (signed(select_ln86_32_fu_830_p3) < signed(select_ln86_33_fu_840_p3)) else "0";
    icmp_ln1496_35_fu_852_p2 <= "1" when (signed(pool_window_0_V_7_reg_1172) < signed(pool_window_1_V_7_reg_1262)) else "0";
    icmp_ln1496_36_fu_862_p2 <= "1" when (signed(pool_window_2_V_7_reg_1124) < signed(pool_window_3_V_7_reg_1310)) else "0";
    icmp_ln1496_37_fu_872_p2 <= "1" when (signed(select_ln86_35_fu_856_p3) < signed(select_ln86_36_fu_866_p3)) else "0";
    icmp_ln1496_fu_670_p2 <= "1" when (signed(pool_window_0_V_1_reg_1214) < signed(pool_window_1_V_1_reg_1220)) else "0";
    icmp_ln185_1_fu_626_p2 <= "1" when (sY = ap_const_lv32_1) else "0";
    icmp_ln185_2_fu_636_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln185_3_fu_646_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln185_fu_616_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln203_fu_878_p2 <= "1" when (pX = ap_const_lv32_F) else "0";
    icmp_ln207_fu_922_p2 <= "1" when (pY = ap_const_lv32_1FF) else "0";
    icmp_ln233_fu_256_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_194_p4 = ap_const_lv14_2000) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op199 <= (res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op28 <= (data_V_data_7_V_empty_n and data_V_data_6_V_empty_n and data_V_data_5_V_empty_n and data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_0_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_0_V_4_fu_965_p3),16));


    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_1_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_1_V_4_fu_983_p3),16));


    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_2_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_2_V_4_fu_1001_p3),16));


    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_3_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_3_V_3_fu_1019_p3),16));


    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_4_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_4_V_3_fu_1037_p3),16));


    res_V_data_4_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_5_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_5_V_2_fu_1055_p3),16));


    res_V_data_5_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(res_V_data_6_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_6_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_6_V_2_fu_1073_p3),16));


    res_V_data_6_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(res_V_data_7_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        res_V_data_7_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_7_V_2_fu_1091_p3),16));


    res_V_data_7_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln185_2_reg_1316, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln185_2_reg_1316))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln213_fu_946_p3 <= 
        ap_const_lv32_0 when (icmp_ln185_1_fu_626_p2(0) = '1') else 
        add_ln213_fu_940_p2;
    select_ln218_fu_902_p3 <= 
        ap_const_lv32_0 when (icmp_ln185_fu_616_p2(0) = '1') else 
        add_ln218_fu_896_p2;
    select_ln86_15_fu_684_p3 <= 
        pool_window_3_V_1_reg_1268 when (icmp_ln1496_15_fu_680_p2(0) = '1') else 
        pool_window_2_V_1_reg_1166;
    select_ln86_16_fu_960_p3 <= 
        select_ln86_15_reg_1325 when (icmp_ln1496_16_reg_1330(0) = '1') else 
        select_ln86_reg_1320;
    select_ln86_17_fu_700_p3 <= 
        pool_window_1_V_reg_1226 when (icmp_ln1496_17_fu_696_p2(0) = '1') else 
        pool_window_0_V_reg_1208;
    select_ln86_18_fu_710_p3 <= 
        pool_window_3_V_reg_1274 when (icmp_ln1496_18_fu_706_p2(0) = '1') else 
        pool_window_2_V_reg_1160;
    select_ln86_19_fu_978_p3 <= 
        select_ln86_18_reg_1340 when (icmp_ln1496_19_reg_1345(0) = '1') else 
        select_ln86_17_reg_1335;
    select_ln86_20_fu_726_p3 <= 
        pool_window_1_V_2_reg_1232 when (icmp_ln1496_20_fu_722_p2(0) = '1') else 
        pool_window_0_V_2_reg_1202;
    select_ln86_21_fu_736_p3 <= 
        pool_window_3_V_2_reg_1280 when (icmp_ln1496_21_fu_732_p2(0) = '1') else 
        pool_window_2_V_2_reg_1154;
    select_ln86_22_fu_996_p3 <= 
        select_ln86_21_reg_1355 when (icmp_ln1496_22_reg_1360(0) = '1') else 
        select_ln86_20_reg_1350;
    select_ln86_23_fu_752_p3 <= 
        pool_window_1_V_3_reg_1238 when (icmp_ln1496_23_fu_748_p2(0) = '1') else 
        pool_window_0_V_3_reg_1196;
    select_ln86_24_fu_762_p3 <= 
        pool_window_3_V_3_reg_1286 when (icmp_ln1496_24_fu_758_p2(0) = '1') else 
        pool_window_2_V_3_reg_1148;
    select_ln86_25_fu_1014_p3 <= 
        select_ln86_24_reg_1370 when (icmp_ln1496_25_reg_1375(0) = '1') else 
        select_ln86_23_reg_1365;
    select_ln86_26_fu_778_p3 <= 
        pool_window_1_V_4_reg_1244 when (icmp_ln1496_26_fu_774_p2(0) = '1') else 
        pool_window_0_V_4_reg_1190;
    select_ln86_27_fu_788_p3 <= 
        pool_window_3_V_4_reg_1292 when (icmp_ln1496_27_fu_784_p2(0) = '1') else 
        pool_window_2_V_4_reg_1142;
    select_ln86_28_fu_1032_p3 <= 
        select_ln86_27_reg_1385 when (icmp_ln1496_28_reg_1390(0) = '1') else 
        select_ln86_26_reg_1380;
    select_ln86_29_fu_804_p3 <= 
        pool_window_1_V_5_reg_1250 when (icmp_ln1496_29_fu_800_p2(0) = '1') else 
        pool_window_0_V_5_reg_1184;
    select_ln86_30_fu_814_p3 <= 
        pool_window_3_V_5_reg_1298 when (icmp_ln1496_30_fu_810_p2(0) = '1') else 
        pool_window_2_V_5_reg_1136;
    select_ln86_31_fu_1050_p3 <= 
        select_ln86_30_reg_1400 when (icmp_ln1496_31_reg_1405(0) = '1') else 
        select_ln86_29_reg_1395;
    select_ln86_32_fu_830_p3 <= 
        pool_window_1_V_6_reg_1256 when (icmp_ln1496_32_fu_826_p2(0) = '1') else 
        pool_window_0_V_6_reg_1178;
    select_ln86_33_fu_840_p3 <= 
        pool_window_3_V_6_reg_1304 when (icmp_ln1496_33_fu_836_p2(0) = '1') else 
        pool_window_2_V_6_reg_1130;
    select_ln86_34_fu_1068_p3 <= 
        select_ln86_33_reg_1415 when (icmp_ln1496_34_reg_1420(0) = '1') else 
        select_ln86_32_reg_1410;
    select_ln86_35_fu_856_p3 <= 
        pool_window_1_V_7_reg_1262 when (icmp_ln1496_35_fu_852_p2(0) = '1') else 
        pool_window_0_V_7_reg_1172;
    select_ln86_36_fu_866_p3 <= 
        pool_window_3_V_7_reg_1310 when (icmp_ln1496_36_fu_862_p2(0) = '1') else 
        pool_window_2_V_7_reg_1124;
    select_ln86_37_fu_1086_p3 <= 
        select_ln86_36_reg_1430 when (icmp_ln1496_37_reg_1435(0) = '1') else 
        select_ln86_35_reg_1425;
    select_ln86_fu_674_p3 <= 
        pool_window_1_V_1_reg_1220 when (icmp_ln1496_fu_670_p2(0) = '1') else 
        pool_window_0_V_1_reg_1214;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_4_fu_965_p3 <= (select_ln86_16_fu_960_p3 & ap_const_lv5_0);
    tmp_data_1_V_4_fu_983_p3 <= (select_ln86_19_fu_978_p3 & ap_const_lv5_0);
    tmp_data_2_V_4_fu_1001_p3 <= (select_ln86_22_fu_996_p3 & ap_const_lv5_0);
    tmp_data_3_V_3_fu_1019_p3 <= (select_ln86_25_fu_1014_p3 & ap_const_lv5_0);
    tmp_data_4_V_3_fu_1037_p3 <= (select_ln86_28_fu_1032_p3 & ap_const_lv5_0);
    tmp_data_5_V_2_fu_1055_p3 <= (select_ln86_31_fu_1050_p3 & ap_const_lv5_0);
    tmp_data_6_V_2_fu_1073_p3 <= (select_ln86_34_fu_1068_p3 & ap_const_lv5_0);
    tmp_data_7_V_2_fu_1091_p3 <= (select_ln86_37_fu_1086_p3 & ap_const_lv5_0);
end behav;
