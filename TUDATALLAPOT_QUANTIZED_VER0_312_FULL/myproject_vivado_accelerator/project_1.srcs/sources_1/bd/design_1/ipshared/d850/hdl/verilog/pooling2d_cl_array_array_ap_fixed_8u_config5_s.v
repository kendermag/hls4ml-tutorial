// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_8u_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [5:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [5:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [5:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [5:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [5:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [5:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [5:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [5:0] kernel_data_V_6_8;
reg   [5:0] kernel_data_V_6_9;
reg   [5:0] kernel_data_V_6_10;
reg   [5:0] kernel_data_V_6_11;
reg   [5:0] kernel_data_V_6_12;
reg   [5:0] kernel_data_V_6_13;
reg   [5:0] kernel_data_V_6_14;
reg   [5:0] kernel_data_V_6_15;
reg   [5:0] kernel_data_V_6_24;
reg   [5:0] kernel_data_V_6_25;
reg   [5:0] kernel_data_V_6_26;
reg   [5:0] kernel_data_V_6_27;
reg   [5:0] kernel_data_V_6_28;
reg   [5:0] kernel_data_V_6_29;
reg   [5:0] kernel_data_V_6_30;
reg   [5:0] kernel_data_V_6_31;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln233_reg_1115;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] and_ln185_2_reg_1316;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [13:0] indvar_flatten_reg_190;
wire   [0:0] icmp_ln233_fu_256_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln233_reg_1115_pp0_iter1_reg;
wire   [13:0] add_ln233_fu_262_p2;
reg   [13:0] add_ln233_reg_1119;
reg   [5:0] pool_window_2_V_7_reg_1124;
wire    io_acc_block_signal_op28;
reg    ap_block_state3_pp0_stage1_iter0;
wire    io_acc_block_signal_op199;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [5:0] pool_window_2_V_6_reg_1130;
reg   [5:0] pool_window_2_V_5_reg_1136;
reg   [5:0] pool_window_2_V_4_reg_1142;
reg   [5:0] pool_window_2_V_3_reg_1148;
reg   [5:0] pool_window_2_V_2_reg_1154;
reg   [5:0] pool_window_2_V_reg_1160;
reg   [5:0] pool_window_2_V_1_reg_1166;
reg   [5:0] pool_window_0_V_7_reg_1172;
reg   [5:0] pool_window_0_V_6_reg_1178;
reg   [5:0] pool_window_0_V_5_reg_1184;
reg   [5:0] pool_window_0_V_4_reg_1190;
reg   [5:0] pool_window_0_V_3_reg_1196;
reg   [5:0] pool_window_0_V_2_reg_1202;
reg   [5:0] pool_window_0_V_reg_1208;
reg   [5:0] pool_window_0_V_1_reg_1214;
reg   [5:0] pool_window_1_V_1_reg_1220;
reg   [5:0] pool_window_1_V_reg_1226;
reg   [5:0] pool_window_1_V_2_reg_1232;
reg   [5:0] pool_window_1_V_3_reg_1238;
reg   [5:0] pool_window_1_V_4_reg_1244;
reg   [5:0] pool_window_1_V_5_reg_1250;
reg   [5:0] pool_window_1_V_6_reg_1256;
reg   [5:0] pool_window_1_V_7_reg_1262;
reg   [5:0] pool_window_3_V_1_reg_1268;
reg   [5:0] pool_window_3_V_reg_1274;
reg   [5:0] pool_window_3_V_2_reg_1280;
reg   [5:0] pool_window_3_V_3_reg_1286;
reg   [5:0] pool_window_3_V_4_reg_1292;
reg   [5:0] pool_window_3_V_5_reg_1298;
reg   [5:0] pool_window_3_V_6_reg_1304;
reg   [5:0] pool_window_3_V_7_reg_1310;
wire   [0:0] and_ln185_2_fu_664_p2;
wire   [5:0] select_ln86_fu_674_p3;
reg   [5:0] select_ln86_reg_1320;
wire   [5:0] select_ln86_15_fu_684_p3;
reg   [5:0] select_ln86_15_reg_1325;
wire   [0:0] icmp_ln1496_16_fu_690_p2;
reg   [0:0] icmp_ln1496_16_reg_1330;
wire   [5:0] select_ln86_17_fu_700_p3;
reg   [5:0] select_ln86_17_reg_1335;
wire   [5:0] select_ln86_18_fu_710_p3;
reg   [5:0] select_ln86_18_reg_1340;
wire   [0:0] icmp_ln1496_19_fu_716_p2;
reg   [0:0] icmp_ln1496_19_reg_1345;
wire   [5:0] select_ln86_20_fu_726_p3;
reg   [5:0] select_ln86_20_reg_1350;
wire   [5:0] select_ln86_21_fu_736_p3;
reg   [5:0] select_ln86_21_reg_1355;
wire   [0:0] icmp_ln1496_22_fu_742_p2;
reg   [0:0] icmp_ln1496_22_reg_1360;
wire   [5:0] select_ln86_23_fu_752_p3;
reg   [5:0] select_ln86_23_reg_1365;
wire   [5:0] select_ln86_24_fu_762_p3;
reg   [5:0] select_ln86_24_reg_1370;
wire   [0:0] icmp_ln1496_25_fu_768_p2;
reg   [0:0] icmp_ln1496_25_reg_1375;
wire   [5:0] select_ln86_26_fu_778_p3;
reg   [5:0] select_ln86_26_reg_1380;
wire   [5:0] select_ln86_27_fu_788_p3;
reg   [5:0] select_ln86_27_reg_1385;
wire   [0:0] icmp_ln1496_28_fu_794_p2;
reg   [0:0] icmp_ln1496_28_reg_1390;
wire   [5:0] select_ln86_29_fu_804_p3;
reg   [5:0] select_ln86_29_reg_1395;
wire   [5:0] select_ln86_30_fu_814_p3;
reg   [5:0] select_ln86_30_reg_1400;
wire   [0:0] icmp_ln1496_31_fu_820_p2;
reg   [0:0] icmp_ln1496_31_reg_1405;
wire   [5:0] select_ln86_32_fu_830_p3;
reg   [5:0] select_ln86_32_reg_1410;
wire   [5:0] select_ln86_33_fu_840_p3;
reg   [5:0] select_ln86_33_reg_1415;
wire   [0:0] icmp_ln1496_34_fu_846_p2;
reg   [0:0] icmp_ln1496_34_reg_1420;
wire   [5:0] select_ln86_35_fu_856_p3;
reg   [5:0] select_ln86_35_reg_1425;
wire   [5:0] select_ln86_36_fu_866_p3;
reg   [5:0] select_ln86_36_reg_1430;
wire   [0:0] icmp_ln1496_37_fu_872_p2;
reg   [0:0] icmp_ln1496_37_reg_1435;
wire   [0:0] icmp_ln203_fu_878_p2;
reg   [0:0] icmp_ln203_reg_1440;
wire   [31:0] select_ln218_fu_902_p3;
reg   [31:0] select_ln218_reg_1444;
wire   [0:0] icmp_ln207_fu_922_p2;
reg   [0:0] icmp_ln207_reg_1449;
wire   [31:0] select_ln213_fu_946_p3;
reg   [31:0] select_ln213_reg_1453;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
wire    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start;
wire    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_done;
wire    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_idle;
wire    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ready;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_0;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_1;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_2;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_3;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_4;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_5;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_6;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_7;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_8;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_9;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_10;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_11;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_12;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_13;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_14;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_15;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30;
wire   [5:0] call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31;
reg    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce;
reg    ap_block_state3_pp0_stage1_iter0_ignore_call30;
reg    ap_block_state5_pp0_stage1_iter1_ignore_call30;
reg    ap_block_pp0_stage1_11001_ignoreCallOp53;
reg   [13:0] ap_phi_mux_indvar_flatten_phi_fu_194_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_205_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_201;
reg    call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg;
wire   [31:0] add_ln216_fu_884_p2;
wire   [31:0] add_ln211_fu_928_p2;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln185_fu_616_p2;
wire   [0:0] icmp_ln185_1_fu_626_p2;
wire   [0:0] icmp_ln185_2_fu_636_p2;
wire   [0:0] icmp_ln185_3_fu_646_p2;
wire   [0:0] and_ln185_1_fu_658_p2;
wire   [0:0] and_ln185_fu_652_p2;
wire   [0:0] icmp_ln1496_fu_670_p2;
wire   [0:0] icmp_ln1496_15_fu_680_p2;
wire   [0:0] icmp_ln1496_17_fu_696_p2;
wire   [0:0] icmp_ln1496_18_fu_706_p2;
wire   [0:0] icmp_ln1496_20_fu_722_p2;
wire   [0:0] icmp_ln1496_21_fu_732_p2;
wire   [0:0] icmp_ln1496_23_fu_748_p2;
wire   [0:0] icmp_ln1496_24_fu_758_p2;
wire   [0:0] icmp_ln1496_26_fu_774_p2;
wire   [0:0] icmp_ln1496_27_fu_784_p2;
wire   [0:0] icmp_ln1496_29_fu_800_p2;
wire   [0:0] icmp_ln1496_30_fu_810_p2;
wire   [0:0] icmp_ln1496_32_fu_826_p2;
wire   [0:0] icmp_ln1496_33_fu_836_p2;
wire   [0:0] icmp_ln1496_35_fu_852_p2;
wire   [0:0] icmp_ln1496_36_fu_862_p2;
wire   [31:0] add_ln218_fu_896_p2;
wire   [31:0] add_ln213_fu_940_p2;
wire   [5:0] select_ln86_16_fu_960_p3;
wire   [10:0] tmp_data_0_V_4_fu_965_p3;
wire   [5:0] select_ln86_19_fu_978_p3;
wire   [10:0] tmp_data_1_V_4_fu_983_p3;
wire   [5:0] select_ln86_22_fu_996_p3;
wire   [10:0] tmp_data_2_V_4_fu_1001_p3;
wire   [5:0] select_ln86_25_fu_1014_p3;
wire   [10:0] tmp_data_3_V_3_fu_1019_p3;
wire   [5:0] select_ln86_28_fu_1032_p3;
wire   [10:0] tmp_data_4_V_3_fu_1037_p3;
wire   [5:0] select_ln86_31_fu_1050_p3;
wire   [10:0] tmp_data_5_V_2_fu_1055_p3;
wire   [5:0] select_ln86_34_fu_1068_p3;
wire   [10:0] tmp_data_6_V_2_fu_1073_p3;
wire   [5:0] select_ln86_37_fu_1086_p3;
wire   [10:0] tmp_data_7_V_2_fu_1091_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_428;
reg    ap_condition_2009;
reg    ap_condition_331;
reg    ap_condition_2014;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_6_8 = 6'd0;
#0 kernel_data_V_6_9 = 6'd0;
#0 kernel_data_V_6_10 = 6'd0;
#0 kernel_data_V_6_11 = 6'd0;
#0 kernel_data_V_6_12 = 6'd0;
#0 kernel_data_V_6_13 = 6'd0;
#0 kernel_data_V_6_14 = 6'd0;
#0 kernel_data_V_6_15 = 6'd0;
#0 kernel_data_V_6_24 = 6'd0;
#0 kernel_data_V_6_25 = 6'd0;
#0 kernel_data_V_6_26 = 6'd0;
#0 kernel_data_V_6_27 = 6'd0;
#0 kernel_data_V_6_28 = 6'd0;
#0 kernel_data_V_6_29 = 6'd0;
#0 kernel_data_V_6_30 = 6'd0;
#0 kernel_data_V_6_31 = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg = 1'b0;
end

shift_line_buffer_array_ap_fixed_8u_config5_s call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start),
    .ap_done(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_done),
    .ap_idle(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_idle),
    .ap_ready(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ready),
    .kernel_window_24_V_write(data_V_data_0_V_dout),
    .kernel_window_25_V_write(data_V_data_1_V_dout),
    .kernel_window_26_V_write(data_V_data_2_V_dout),
    .kernel_window_27_V_write(data_V_data_3_V_dout),
    .kernel_window_28_V_write(data_V_data_4_V_dout),
    .kernel_window_29_V_write(data_V_data_5_V_dout),
    .kernel_window_30_V_write(data_V_data_6_V_dout),
    .kernel_window_31_V_write(data_V_data_7_V_dout),
    .kernel_window_8_V_read(kernel_data_V_6_8),
    .kernel_window_9_V_read(kernel_data_V_6_9),
    .kernel_window_10_V_read(kernel_data_V_6_10),
    .kernel_window_11_V_read(kernel_data_V_6_11),
    .kernel_window_12_V_read(kernel_data_V_6_12),
    .kernel_window_13_V_read(kernel_data_V_6_13),
    .kernel_window_14_V_read(kernel_data_V_6_14),
    .kernel_window_15_V_read(kernel_data_V_6_15),
    .kernel_window_24_V_read(kernel_data_V_6_24),
    .kernel_window_25_V_read(kernel_data_V_6_25),
    .kernel_window_26_V_read(kernel_data_V_6_26),
    .kernel_window_27_V_read(kernel_data_V_6_27),
    .kernel_window_28_V_read(kernel_data_V_6_28),
    .kernel_window_29_V_read(kernel_data_V_6_29),
    .kernel_window_30_V_read(kernel_data_V_6_30),
    .kernel_window_31_V_read(kernel_data_V_6_31),
    .ap_return_0(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_0),
    .ap_return_1(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_1),
    .ap_return_2(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_2),
    .ap_return_3(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_3),
    .ap_return_4(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_4),
    .ap_return_5(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_5),
    .ap_return_6(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_6),
    .ap_return_7(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_7),
    .ap_return_8(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_8),
    .ap_return_9(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_9),
    .ap_return_10(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_10),
    .ap_return_11(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_11),
    .ap_return_12(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_12),
    .ap_return_13(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_13),
    .ap_return_14(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_14),
    .ap_return_15(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_15),
    .ap_return_16(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16),
    .ap_return_17(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17),
    .ap_return_18(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18),
    .ap_return_19(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19),
    .ap_return_20(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20),
    .ap_return_21(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21),
    .ap_return_22(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22),
    .ap_return_23(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23),
    .ap_return_24(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24),
    .ap_return_25(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25),
    .ap_return_26(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26),
    .ap_return_27(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27),
    .ap_return_28(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28),
    .ap_return_29(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29),
    .ap_return_30(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30),
    .ap_return_31(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31),
    .ap_ce(call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln233_fu_256_p2 == 1'd0))) begin
            call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg <= 1'b1;
        end else if ((call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ready == 1'b1)) begin
            call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_fu_922_p2 == 1'd1) & (icmp_ln203_fu_878_p2 == 1'd1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_201;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln233_reg_1115 == 1'd0))) begin
        indvar_flatten_reg_190 <= add_ln233_reg_1119;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_190 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_428)) begin
        if ((icmp_ln203_fu_878_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln203_fu_878_p2 == 1'd0)) begin
            pX <= add_ln216_fu_884_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2009)) begin
        if ((icmp_ln207_fu_922_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln207_fu_922_p2 == 1'd0)) begin
            pY <= add_ln211_fu_928_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_2014)) begin
            sX <= select_ln218_reg_1444;
        end else if ((1'b1 == ap_condition_331)) begin
            sX <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln233_reg_1119 <= add_ln233_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln233_reg_1115 == 1'd0))) begin
        and_ln185_2_reg_1316 <= and_ln185_2_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln185_2_fu_664_p2))) begin
        icmp_ln1496_16_reg_1330 <= icmp_ln1496_16_fu_690_p2;
        icmp_ln1496_19_reg_1345 <= icmp_ln1496_19_fu_716_p2;
        icmp_ln1496_22_reg_1360 <= icmp_ln1496_22_fu_742_p2;
        icmp_ln1496_25_reg_1375 <= icmp_ln1496_25_fu_768_p2;
        icmp_ln1496_28_reg_1390 <= icmp_ln1496_28_fu_794_p2;
        icmp_ln1496_31_reg_1405 <= icmp_ln1496_31_fu_820_p2;
        icmp_ln1496_34_reg_1420 <= icmp_ln1496_34_fu_846_p2;
        icmp_ln1496_37_reg_1435 <= icmp_ln1496_37_fu_872_p2;
        select_ln86_15_reg_1325 <= select_ln86_15_fu_684_p3;
        select_ln86_17_reg_1335 <= select_ln86_17_fu_700_p3;
        select_ln86_18_reg_1340 <= select_ln86_18_fu_710_p3;
        select_ln86_20_reg_1350 <= select_ln86_20_fu_726_p3;
        select_ln86_21_reg_1355 <= select_ln86_21_fu_736_p3;
        select_ln86_23_reg_1365 <= select_ln86_23_fu_752_p3;
        select_ln86_24_reg_1370 <= select_ln86_24_fu_762_p3;
        select_ln86_26_reg_1380 <= select_ln86_26_fu_778_p3;
        select_ln86_27_reg_1385 <= select_ln86_27_fu_788_p3;
        select_ln86_29_reg_1395 <= select_ln86_29_fu_804_p3;
        select_ln86_30_reg_1400 <= select_ln86_30_fu_814_p3;
        select_ln86_32_reg_1410 <= select_ln86_32_fu_830_p3;
        select_ln86_33_reg_1415 <= select_ln86_33_fu_840_p3;
        select_ln86_35_reg_1425 <= select_ln86_35_fu_856_p3;
        select_ln86_36_reg_1430 <= select_ln86_36_fu_866_p3;
        select_ln86_reg_1320 <= select_ln86_fu_674_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln203_reg_1440 <= icmp_ln203_fu_878_p2;
        icmp_ln233_reg_1115 <= icmp_ln233_fu_256_p2;
        icmp_ln233_reg_1115_pp0_iter1_reg <= icmp_ln233_reg_1115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln203_fu_878_p2 == 1'd1))) begin
        icmp_ln207_reg_1449 <= icmp_ln207_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        kernel_data_V_6_10 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18;
        kernel_data_V_6_11 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19;
        kernel_data_V_6_12 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20;
        kernel_data_V_6_13 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21;
        kernel_data_V_6_14 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22;
        kernel_data_V_6_15 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23;
        kernel_data_V_6_24 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24;
        kernel_data_V_6_25 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25;
        kernel_data_V_6_26 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26;
        kernel_data_V_6_27 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27;
        kernel_data_V_6_28 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28;
        kernel_data_V_6_29 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29;
        kernel_data_V_6_30 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30;
        kernel_data_V_6_31 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31;
        kernel_data_V_6_8 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16;
        kernel_data_V_6_9 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        pool_window_0_V_1_reg_1214 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_0;
        pool_window_0_V_2_reg_1202 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_2;
        pool_window_0_V_3_reg_1196 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_3;
        pool_window_0_V_4_reg_1190 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_4;
        pool_window_0_V_5_reg_1184 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_5;
        pool_window_0_V_6_reg_1178 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_6;
        pool_window_0_V_7_reg_1172 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_7;
        pool_window_0_V_reg_1208 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_1;
        pool_window_1_V_1_reg_1220 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_16;
        pool_window_1_V_2_reg_1232 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_18;
        pool_window_1_V_3_reg_1238 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_19;
        pool_window_1_V_4_reg_1244 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_20;
        pool_window_1_V_5_reg_1250 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_21;
        pool_window_1_V_6_reg_1256 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_22;
        pool_window_1_V_7_reg_1262 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_23;
        pool_window_1_V_reg_1226 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_17;
        pool_window_2_V_1_reg_1166 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_8;
        pool_window_2_V_2_reg_1154 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_10;
        pool_window_2_V_3_reg_1148 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_11;
        pool_window_2_V_4_reg_1142 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_12;
        pool_window_2_V_5_reg_1136 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_13;
        pool_window_2_V_6_reg_1130 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_14;
        pool_window_2_V_7_reg_1124 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_15;
        pool_window_2_V_reg_1160 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_9;
        pool_window_3_V_1_reg_1268 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_24;
        pool_window_3_V_2_reg_1280 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_26;
        pool_window_3_V_3_reg_1286 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_27;
        pool_window_3_V_4_reg_1292 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_28;
        pool_window_3_V_5_reg_1298 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_29;
        pool_window_3_V_6_reg_1304 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_30;
        pool_window_3_V_7_reg_1310 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_31;
        pool_window_3_V_reg_1274 <= call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_return_25;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln203_reg_1440 == 1'd1))) begin
        sY <= ap_phi_mux_storemerge_i_i_phi_fu_205_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln203_fu_878_p2 == 1'd1) & (icmp_ln207_fu_922_p2 == 1'd0) & (icmp_ln233_reg_1115 == 1'd0))) begin
        select_ln213_reg_1453 <= select_ln213_fu_946_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln203_fu_878_p2 == 1'd0))) begin
        select_ln218_reg_1444 <= select_ln218_fu_902_p3;
    end
end

always @ (*) begin
    if ((icmp_ln233_fu_256_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_194_p4 = add_ln233_reg_1119;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_194_p4 = indvar_flatten_reg_190;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln203_reg_1440 == 1'd1) & (icmp_ln207_reg_1449 == 1'd0) & (icmp_ln233_reg_1115_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_205_p4 = select_ln213_reg_1453;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_205_p4 = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_201;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp53) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln233_reg_1115 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln185_2_reg_1316))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln211_fu_928_p2 = (pY + 32'd1);

assign add_ln213_fu_940_p2 = (sY + 32'd1);

assign add_ln216_fu_884_p2 = (pX + 32'd1);

assign add_ln218_fu_896_p2 = (sX + 32'd1);

assign add_ln233_fu_262_p2 = (ap_phi_mux_indvar_flatten_phi_fu_194_p4 + 14'd1);

assign and_ln185_1_fu_658_p2 = (icmp_ln185_3_fu_646_p2 & icmp_ln185_2_fu_636_p2);

assign and_ln185_2_fu_664_p2 = (and_ln185_fu_652_p2 & and_ln185_1_fu_658_p2);

assign and_ln185_fu_652_p2 = (icmp_ln185_fu_616_p2 & icmp_ln185_1_fu_626_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((io_acc_block_signal_op199 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_2_reg_1316)) | ((io_acc_block_signal_op28 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1115 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((io_acc_block_signal_op199 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_2_reg_1316)) | ((io_acc_block_signal_op28 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1115 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp53 = (((io_acc_block_signal_op199 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_2_reg_1316)) | ((io_acc_block_signal_op28 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1115 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((io_acc_block_signal_op199 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln185_2_reg_1316)) | ((io_acc_block_signal_op28 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln233_reg_1115 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((io_acc_block_signal_op28 == 1'b0) & (icmp_ln233_reg_1115 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0_ignore_call30 = ((io_acc_block_signal_op28 == 1'b0) & (icmp_ln233_reg_1115 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((io_acc_block_signal_op199 == 1'b0) & (1'd1 == and_ln185_2_reg_1316));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1_ignore_call30 = ((io_acc_block_signal_op199 == 1'b0) & (1'd1 == and_ln185_2_reg_1316));
end

always @ (*) begin
    ap_condition_2009 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln203_fu_878_p2 == 1'd1) & (icmp_ln233_reg_1115 == 1'd0));
end

always @ (*) begin
    ap_condition_2014 = ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln203_reg_1440 == 1'd0));
end

always @ (*) begin
    ap_condition_331 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln203_fu_878_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_428 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_201 = 'bx;

assign ap_ready = internal_ap_ready;

assign call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start = call_ret_shift_line_buffer_array_ap_fixed_8u_config5_s_fu_212_ap_start_reg;

assign icmp_ln1496_15_fu_680_p2 = (($signed(pool_window_2_V_1_reg_1166) < $signed(pool_window_3_V_1_reg_1268)) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_690_p2 = (($signed(select_ln86_fu_674_p3) < $signed(select_ln86_15_fu_684_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_17_fu_696_p2 = (($signed(pool_window_0_V_reg_1208) < $signed(pool_window_1_V_reg_1226)) ? 1'b1 : 1'b0);

assign icmp_ln1496_18_fu_706_p2 = (($signed(pool_window_2_V_reg_1160) < $signed(pool_window_3_V_reg_1274)) ? 1'b1 : 1'b0);

assign icmp_ln1496_19_fu_716_p2 = (($signed(select_ln86_17_fu_700_p3) < $signed(select_ln86_18_fu_710_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_20_fu_722_p2 = (($signed(pool_window_0_V_2_reg_1202) < $signed(pool_window_1_V_2_reg_1232)) ? 1'b1 : 1'b0);

assign icmp_ln1496_21_fu_732_p2 = (($signed(pool_window_2_V_2_reg_1154) < $signed(pool_window_3_V_2_reg_1280)) ? 1'b1 : 1'b0);

assign icmp_ln1496_22_fu_742_p2 = (($signed(select_ln86_20_fu_726_p3) < $signed(select_ln86_21_fu_736_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_23_fu_748_p2 = (($signed(pool_window_0_V_3_reg_1196) < $signed(pool_window_1_V_3_reg_1238)) ? 1'b1 : 1'b0);

assign icmp_ln1496_24_fu_758_p2 = (($signed(pool_window_2_V_3_reg_1148) < $signed(pool_window_3_V_3_reg_1286)) ? 1'b1 : 1'b0);

assign icmp_ln1496_25_fu_768_p2 = (($signed(select_ln86_23_fu_752_p3) < $signed(select_ln86_24_fu_762_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_26_fu_774_p2 = (($signed(pool_window_0_V_4_reg_1190) < $signed(pool_window_1_V_4_reg_1244)) ? 1'b1 : 1'b0);

assign icmp_ln1496_27_fu_784_p2 = (($signed(pool_window_2_V_4_reg_1142) < $signed(pool_window_3_V_4_reg_1292)) ? 1'b1 : 1'b0);

assign icmp_ln1496_28_fu_794_p2 = (($signed(select_ln86_26_fu_778_p3) < $signed(select_ln86_27_fu_788_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_29_fu_800_p2 = (($signed(pool_window_0_V_5_reg_1184) < $signed(pool_window_1_V_5_reg_1250)) ? 1'b1 : 1'b0);

assign icmp_ln1496_30_fu_810_p2 = (($signed(pool_window_2_V_5_reg_1136) < $signed(pool_window_3_V_5_reg_1298)) ? 1'b1 : 1'b0);

assign icmp_ln1496_31_fu_820_p2 = (($signed(select_ln86_29_fu_804_p3) < $signed(select_ln86_30_fu_814_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_32_fu_826_p2 = (($signed(pool_window_0_V_6_reg_1178) < $signed(pool_window_1_V_6_reg_1256)) ? 1'b1 : 1'b0);

assign icmp_ln1496_33_fu_836_p2 = (($signed(pool_window_2_V_6_reg_1130) < $signed(pool_window_3_V_6_reg_1304)) ? 1'b1 : 1'b0);

assign icmp_ln1496_34_fu_846_p2 = (($signed(select_ln86_32_fu_830_p3) < $signed(select_ln86_33_fu_840_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_35_fu_852_p2 = (($signed(pool_window_0_V_7_reg_1172) < $signed(pool_window_1_V_7_reg_1262)) ? 1'b1 : 1'b0);

assign icmp_ln1496_36_fu_862_p2 = (($signed(pool_window_2_V_7_reg_1124) < $signed(pool_window_3_V_7_reg_1310)) ? 1'b1 : 1'b0);

assign icmp_ln1496_37_fu_872_p2 = (($signed(select_ln86_35_fu_856_p3) < $signed(select_ln86_36_fu_866_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_670_p2 = (($signed(pool_window_0_V_1_reg_1214) < $signed(pool_window_1_V_1_reg_1220)) ? 1'b1 : 1'b0);

assign icmp_ln185_1_fu_626_p2 = ((sY == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln185_2_fu_636_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln185_3_fu_646_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_616_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_878_p2 = ((pX == 32'd15) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_922_p2 = ((pY == 32'd511) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_256_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_194_p4 == 14'd8192) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op199 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op28 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = $signed(tmp_data_0_V_4_fu_965_p3);

assign res_V_data_1_V_din = $signed(tmp_data_1_V_4_fu_983_p3);

assign res_V_data_2_V_din = $signed(tmp_data_2_V_4_fu_1001_p3);

assign res_V_data_3_V_din = $signed(tmp_data_3_V_3_fu_1019_p3);

assign res_V_data_4_V_din = $signed(tmp_data_4_V_3_fu_1037_p3);

assign res_V_data_5_V_din = $signed(tmp_data_5_V_2_fu_1055_p3);

assign res_V_data_6_V_din = $signed(tmp_data_6_V_2_fu_1073_p3);

assign res_V_data_7_V_din = $signed(tmp_data_7_V_2_fu_1091_p3);

assign select_ln213_fu_946_p3 = ((icmp_ln185_1_fu_626_p2[0:0] === 1'b1) ? 32'd0 : add_ln213_fu_940_p2);

assign select_ln218_fu_902_p3 = ((icmp_ln185_fu_616_p2[0:0] === 1'b1) ? 32'd0 : add_ln218_fu_896_p2);

assign select_ln86_15_fu_684_p3 = ((icmp_ln1496_15_fu_680_p2[0:0] === 1'b1) ? pool_window_3_V_1_reg_1268 : pool_window_2_V_1_reg_1166);

assign select_ln86_16_fu_960_p3 = ((icmp_ln1496_16_reg_1330[0:0] === 1'b1) ? select_ln86_15_reg_1325 : select_ln86_reg_1320);

assign select_ln86_17_fu_700_p3 = ((icmp_ln1496_17_fu_696_p2[0:0] === 1'b1) ? pool_window_1_V_reg_1226 : pool_window_0_V_reg_1208);

assign select_ln86_18_fu_710_p3 = ((icmp_ln1496_18_fu_706_p2[0:0] === 1'b1) ? pool_window_3_V_reg_1274 : pool_window_2_V_reg_1160);

assign select_ln86_19_fu_978_p3 = ((icmp_ln1496_19_reg_1345[0:0] === 1'b1) ? select_ln86_18_reg_1340 : select_ln86_17_reg_1335);

assign select_ln86_20_fu_726_p3 = ((icmp_ln1496_20_fu_722_p2[0:0] === 1'b1) ? pool_window_1_V_2_reg_1232 : pool_window_0_V_2_reg_1202);

assign select_ln86_21_fu_736_p3 = ((icmp_ln1496_21_fu_732_p2[0:0] === 1'b1) ? pool_window_3_V_2_reg_1280 : pool_window_2_V_2_reg_1154);

assign select_ln86_22_fu_996_p3 = ((icmp_ln1496_22_reg_1360[0:0] === 1'b1) ? select_ln86_21_reg_1355 : select_ln86_20_reg_1350);

assign select_ln86_23_fu_752_p3 = ((icmp_ln1496_23_fu_748_p2[0:0] === 1'b1) ? pool_window_1_V_3_reg_1238 : pool_window_0_V_3_reg_1196);

assign select_ln86_24_fu_762_p3 = ((icmp_ln1496_24_fu_758_p2[0:0] === 1'b1) ? pool_window_3_V_3_reg_1286 : pool_window_2_V_3_reg_1148);

assign select_ln86_25_fu_1014_p3 = ((icmp_ln1496_25_reg_1375[0:0] === 1'b1) ? select_ln86_24_reg_1370 : select_ln86_23_reg_1365);

assign select_ln86_26_fu_778_p3 = ((icmp_ln1496_26_fu_774_p2[0:0] === 1'b1) ? pool_window_1_V_4_reg_1244 : pool_window_0_V_4_reg_1190);

assign select_ln86_27_fu_788_p3 = ((icmp_ln1496_27_fu_784_p2[0:0] === 1'b1) ? pool_window_3_V_4_reg_1292 : pool_window_2_V_4_reg_1142);

assign select_ln86_28_fu_1032_p3 = ((icmp_ln1496_28_reg_1390[0:0] === 1'b1) ? select_ln86_27_reg_1385 : select_ln86_26_reg_1380);

assign select_ln86_29_fu_804_p3 = ((icmp_ln1496_29_fu_800_p2[0:0] === 1'b1) ? pool_window_1_V_5_reg_1250 : pool_window_0_V_5_reg_1184);

assign select_ln86_30_fu_814_p3 = ((icmp_ln1496_30_fu_810_p2[0:0] === 1'b1) ? pool_window_3_V_5_reg_1298 : pool_window_2_V_5_reg_1136);

assign select_ln86_31_fu_1050_p3 = ((icmp_ln1496_31_reg_1405[0:0] === 1'b1) ? select_ln86_30_reg_1400 : select_ln86_29_reg_1395);

assign select_ln86_32_fu_830_p3 = ((icmp_ln1496_32_fu_826_p2[0:0] === 1'b1) ? pool_window_1_V_6_reg_1256 : pool_window_0_V_6_reg_1178);

assign select_ln86_33_fu_840_p3 = ((icmp_ln1496_33_fu_836_p2[0:0] === 1'b1) ? pool_window_3_V_6_reg_1304 : pool_window_2_V_6_reg_1130);

assign select_ln86_34_fu_1068_p3 = ((icmp_ln1496_34_reg_1420[0:0] === 1'b1) ? select_ln86_33_reg_1415 : select_ln86_32_reg_1410);

assign select_ln86_35_fu_856_p3 = ((icmp_ln1496_35_fu_852_p2[0:0] === 1'b1) ? pool_window_1_V_7_reg_1262 : pool_window_0_V_7_reg_1172);

assign select_ln86_36_fu_866_p3 = ((icmp_ln1496_36_fu_862_p2[0:0] === 1'b1) ? pool_window_3_V_7_reg_1310 : pool_window_2_V_7_reg_1124);

assign select_ln86_37_fu_1086_p3 = ((icmp_ln1496_37_reg_1435[0:0] === 1'b1) ? select_ln86_36_reg_1430 : select_ln86_35_reg_1425);

assign select_ln86_fu_674_p3 = ((icmp_ln1496_fu_670_p2[0:0] === 1'b1) ? pool_window_1_V_1_reg_1220 : pool_window_0_V_1_reg_1214);

assign start_out = real_start;

assign tmp_data_0_V_4_fu_965_p3 = {{select_ln86_16_fu_960_p3}, {5'd0}};

assign tmp_data_1_V_4_fu_983_p3 = {{select_ln86_19_fu_978_p3}, {5'd0}};

assign tmp_data_2_V_4_fu_1001_p3 = {{select_ln86_22_fu_996_p3}, {5'd0}};

assign tmp_data_3_V_3_fu_1019_p3 = {{select_ln86_25_fu_1014_p3}, {5'd0}};

assign tmp_data_4_V_3_fu_1037_p3 = {{select_ln86_28_fu_1032_p3}, {5'd0}};

assign tmp_data_5_V_2_fu_1055_p3 = {{select_ln86_31_fu_1050_p3}, {5'd0}};

assign tmp_data_6_V_2_fu_1073_p3 = {{select_ln86_34_fu_1068_p3}, {5'd0}};

assign tmp_data_7_V_2_fu_1091_p3 = {{select_ln86_37_fu_1086_p3}, {5'd0}};

endmodule //pooling2d_cl_array_array_ap_fixed_8u_config5_s
